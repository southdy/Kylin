/*
** Lua binding: GraphicsLuaAPI
*/

//
// Copyright (c) 2008-2019 the Urho3D project.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include <toluapp/tolua++.h>
#include "LuaScript/ToluaUtils.h"

#if __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
#endif

/* Exported function */
TOLUA_API int tolua_GraphicsLuaAPI_open (lua_State* tolua_S);

#include "Graphics/GraphicsDefs.h"
#include "Graphics/Drawable.h"
#include "Graphics/AnimatedModel.h"
#include "Graphics/Animation.h"
#include "Graphics/AnimationController.h"
#include "Graphics/AnimationState.h"
#include "Graphics/BillboardSet.h"
#include "Graphics/Camera.h"
#include "Graphics/CustomGeometry.h"
#include "Graphics/DebugRenderer.h"
#include "Graphics/DecalSet.h"
#include "IO/File.h"
#include "Graphics/Graphics.h"
#include "Graphics/Light.h"
#include "Graphics/Material.h"
#include "Graphics/VertexBuffer.h"
#include "Graphics/IndexBuffer.h"
#include "Graphics/Geometry.h"
#include "Graphics/Model.h"
#include "Graphics/Octree.h"
#include "Graphics/OctreeQuery.h"
#include "Graphics/ParticleEffect.h"
#include "Graphics/ParticleEmitter.h"
#include "Graphics/Renderer.h"
#include "Graphics/RenderPath.h"
#include "Graphics/RenderSurface.h"
#include "Graphics/RibbonTrail.h"
#include "Graphics/Skeleton.h"
#include "Graphics/Skybox.h"
#include "Graphics/StaticModel.h"
#include "Graphics/StaticModelGroup.h"
#include "Graphics/Technique.h"
#include "Graphics/Terrain.h"
#include "Graphics/TerrainPatch.h"
#include "Graphics/Texture.h"
#include "Graphics/Texture2D.h"
#include "Graphics/Texture2DArray.h"
#include "Graphics/Texture3D.h"
#include "Graphics/TextureCube.h"
#include "Graphics/Viewport.h"
#include "Graphics/Zone.h"
using namespace Urho3D;
#pragma warning(disable:4800)

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_new00
static int tolua_GraphicsLuaAPI_Animation_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Animation>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_new00_local
static int tolua_GraphicsLuaAPI_Animation_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Animation>(tolua_S);
}

static Animation* AnimationClone(const Animation* animation, const String& cloneName = String::EMPTY)
{
    if (!animation)
        return 0;
        
    return animation->Clone(cloneName).Detach();
}

#define TOLUA_DISABLE_tolua_set_AnimationTrack_unsigned_channelMask
static int tolua_set_AnimationTrack_unsigned_channelMask(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'channelMask_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->channelMask_ = AnimationChannelFlags((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}

static const AnimationControl* AnimationControllerGetAnimation(const AnimationController* controller, unsigned index)
{
    if (!controller)
        return (const AnimationControl*)0;

    const Vector<AnimationControl>& animations = controller->GetAnimations();
    return (index < animations.Size()) ? &animations[index] : (const AnimationControl*)0;
}

static unsigned AnimationControllerGetNumAnimations(const AnimationController* controller)
{
    if (!controller)
        return 0;

    return controller->GetAnimations().Size();
}

static void GraphicsPrecacheShaders(Graphics* graphics, const String& fileName)
{
    if (!graphics)
        return;

    File file(graphics->GetContext());
    if (file.Open(fileName, FILE_READ))
        graphics->PrecacheShaders(file);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_GetGraphics00
static int tolua_GraphicsLuaAPI_GetGraphics00(lua_State* tolua_S)
{
    return ToluaGetSubsystem<Graphics>(tolua_S);
}

#define TOLUA_DISABLE_tolua_get_graphics_ptr
#define tolua_get_graphics_ptr tolua_GraphicsLuaAPI_GetGraphics00

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_new00
static int tolua_GraphicsLuaAPI_Material_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Material>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_new00_local
static int tolua_GraphicsLuaAPI_Material_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Material>(tolua_S);
}

static Material* MaterialClone(const Material* material, const String& cloneName = String::EMPTY)
{
    if (!material)
        return 0;

    return material->Clone(cloneName).Detach();
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_new00
static int tolua_GraphicsLuaAPI_VertexBuffer_new00(lua_State* tolua_S)
{
    return ToluaNewObject<VertexBuffer>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_new00_local
static int tolua_GraphicsLuaAPI_VertexBuffer_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<VertexBuffer>(tolua_S);
}

static bool VertexBufferSetData(VertexBuffer* dest, VectorBuffer& src)
{
    // Make sure there is enough data
    if (dest->GetVertexCount() && src.GetSize() >= dest->GetVertexCount() * dest->GetVertexSize())
        return dest->SetData(&src.GetBuffer()[0]);
    else
        return false;
}

static bool VertexBufferSetDataRange(VertexBuffer* dest, VectorBuffer& src, unsigned start, unsigned count, bool discard)
{
    // Make sure there is enough data
    if (dest->GetVertexCount() && src.GetSize() >= count * dest->GetVertexSize())
        return dest->SetDataRange(&src.GetBuffer()[0], start, count, discard);
    else
        return false;
}

static VectorBuffer VertexBufferGetData(VertexBuffer* src)
{
    VectorBuffer ret;
    void* data = src->Lock(0, src->GetVertexCount(), false);

    if (data)
    {
        ret.Write(data, src->GetVertexCount() * src->GetVertexSize());
        ret.Seek(0);
        src->Unlock();
    }

    return ret;
}

static const PODVector<VertexElement>& VertexBufferGetElements(const VertexBuffer* buffer)
{
    static PODVector<VertexElement> vector = buffer->GetElements();
    return vector;
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_new00
static int tolua_GraphicsLuaAPI_IndexBuffer_new00(lua_State* tolua_S)
{
    return ToluaNewObject<IndexBuffer>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_new00_local
static int tolua_GraphicsLuaAPI_IndexBuffer_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<IndexBuffer>(tolua_S);
}

static bool IndexBufferSetData(IndexBuffer* dest, VectorBuffer& src)
{
    // Make sure there is enough data
    if (dest->GetIndexCount() && src.GetSize() >= dest->GetIndexCount() * dest->GetIndexSize())
        return dest->SetData(&src.GetBuffer()[0]);
    else
        return false;
}

static bool IndexBufferSetDataRange(IndexBuffer* dest, VectorBuffer& src, unsigned start, unsigned count, bool discard)
{
    // Make sure there is enough data
    if (dest->GetIndexCount() && src.GetSize() >= count * dest->GetIndexSize())
        return dest->SetDataRange(&src.GetBuffer()[0], start, count, discard);
    else
        return false;
}

static VectorBuffer IndexBufferGetData(IndexBuffer* src)
{
    VectorBuffer ret;
    void* data = src->Lock(0, src->GetIndexCount(), false);

    if (data)
    {
        ret.Write(data, src->GetIndexCount() * src->GetIndexSize());
        ret.Seek(0);
        src->Unlock();
    }

    return ret;
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_new00
static int tolua_GraphicsLuaAPI_Geometry_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Geometry>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_new00_local
static int tolua_GraphicsLuaAPI_Geometry_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Geometry>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_new00
static int tolua_GraphicsLuaAPI_Model_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Model>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_new00_local
static int tolua_GraphicsLuaAPI_Model_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Model>(tolua_S);
}

static Model* ModelClone(const Model* model, const String& cloneName = String::EMPTY)
{
    if (!model)
        return 0;

    return model->Clone(cloneName).Detach();
}

static const PODVector<OctreeQueryResult>& OctreeGetDrawablesPoint(const Octree* octree, const Vector3& point, unsigned char drawableFlags = DRAWABLE_ANY, unsigned viewMask = DEFAULT_VIEWMASK)
{
    PODVector<Drawable*> drawableResult;
    PointOctreeQuery query(drawableResult, point, drawableFlags, viewMask);
    octree->GetDrawables(query);
    
    static PODVector<OctreeQueryResult> result;
    result.Resize(drawableResult.Size());
    for (unsigned i = 0; i < drawableResult.Size(); ++i)
    {
        result[i].drawable_ = drawableResult[i];
        result[i].node_ = drawableResult[i]->GetNode();
    }
    return result;
}

static const PODVector<OctreeQueryResult>& OctreeGetDrawablesBoundingBox(const Octree* octree, const BoundingBox& box, unsigned char drawableFlags = DRAWABLE_ANY, unsigned viewMask = DEFAULT_VIEWMASK)
{
    PODVector<Drawable*> drawableResult;
    BoxOctreeQuery query(drawableResult, box, drawableFlags, viewMask);
    octree->GetDrawables(query);

    static PODVector<OctreeQueryResult> result;
    result.Resize(drawableResult.Size());
    for (unsigned i = 0; i < drawableResult.Size(); ++i)
    {
        result[i].drawable_ = drawableResult[i];
        result[i].node_ = drawableResult[i]->GetNode();
    }
    return result;
}

static const PODVector<OctreeQueryResult>& OctreeGetDrawablesFrustum(const Octree* octree, const Frustum& frustum, unsigned char drawableFlags = DRAWABLE_ANY, unsigned viewMask = DEFAULT_VIEWMASK)
{
    PODVector<Drawable*> drawableResult;
    FrustumOctreeQuery query(drawableResult, frustum, drawableFlags, viewMask);
    octree->GetDrawables(query);

    static PODVector<OctreeQueryResult> result;
    result.Resize(drawableResult.Size());
    for (unsigned i = 0; i < drawableResult.Size(); ++i)
    {
        result[i].drawable_ = drawableResult[i];
        result[i].node_ = drawableResult[i]->GetNode();
    }
    return result;
}

static const PODVector<OctreeQueryResult>& OctreeGetDrawablesSphere(const Octree* octree, const Sphere& sphere, unsigned char drawableFlags = DRAWABLE_ANY, unsigned viewMask = DEFAULT_VIEWMASK)
{
    PODVector<Drawable*> drawableResult;
    SphereOctreeQuery query(drawableResult, sphere, drawableFlags, viewMask);
    octree->GetDrawables(query);

    static PODVector<OctreeQueryResult> result;
    result.Resize(drawableResult.Size());
    for (unsigned i = 0; i < drawableResult.Size(); ++i)
    {
        result[i].drawable_ = drawableResult[i];
        result[i].node_ = drawableResult[i]->GetNode();
    }
    return result;
}

static const PODVector<OctreeQueryResult>& OctreeGetAllDrawables(const Octree* octree, unsigned char drawableFlags = DRAWABLE_ANY, unsigned viewMask = DEFAULT_VIEWMASK)
{
    PODVector<Drawable*> drawableResult;
    AllContentOctreeQuery query(drawableResult, drawableFlags, viewMask);
    octree->GetDrawables(query);

    static PODVector<OctreeQueryResult> result;
    result.Resize(drawableResult.Size());
    for (unsigned i = 0; i < drawableResult.Size(); ++i)
    {
        result[i].drawable_ = drawableResult[i];
        result[i].node_ = drawableResult[i]->GetNode();
    }
    return result;
}

static RayQueryResult OctreeRaycastSingle(const Octree* octree, const Ray& ray, RayQueryLevel level, float maxDistance, unsigned char drawableFlags, unsigned viewMask = DEFAULT_VIEWMASK)
{
    PODVector<RayQueryResult> result;
    RayOctreeQuery query(result, ray, level, maxDistance, drawableFlags, viewMask);
    octree->RaycastSingle(query);
    if (!query.result_.Empty())
        return query.result_[0];
    else
    {
        RayQueryResult empty;
        empty.position_ = Vector3::ZERO;
        empty.normal_ = Vector3::ZERO;
        empty.distance_ = M_INFINITY;
        empty.subObject_ = 0;
        return empty;
    }
}

static const PODVector<RayQueryResult>& OctreeRaycast(const Octree* octree, const Ray& ray, RayQueryLevel level, float maxDistance, unsigned char drawableFlags, unsigned viewMask = DEFAULT_VIEWMASK)
{
    static PODVector<RayQueryResult> result;
    result.Clear();
    RayOctreeQuery query(result, ray, level, maxDistance, drawableFlags, viewMask);
    octree->Raycast(query);
    return result;
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_new00
static int tolua_GraphicsLuaAPI_ParticleEffect_new00(lua_State* tolua_S)
{
    return ToluaNewObject<ParticleEffect>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_new00_local
static int tolua_GraphicsLuaAPI_ParticleEffect_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<ParticleEffect>(tolua_S);
}

static ParticleEffect* ParticleEffectClone(const ParticleEffect* effect, const String& cloneName = String::EMPTY)
{
    if (!effect)
        return 0;

    return effect->Clone(cloneName).Detach();
}

#define TOLUA_DISABLE_tolua_set_ParticleEffect_numColorFrames
#define tolua_set_ParticleEffect_numColorFrames NULL

#define TOLUA_DISABLE_tolua_set_ParticleEffect_numTextureFrames
#define tolua_set_ParticleEffect_numTextureFrames NULL

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_GetRenderer00
static int tolua_GraphicsLuaAPI_GetRenderer00(lua_State* tolua_S)
{
    return ToluaGetSubsystem<Renderer>(tolua_S);
}

#define TOLUA_DISABLE_tolua_get_renderer_ptr
#define tolua_get_renderer_ptr tolua_GraphicsLuaAPI_GetRenderer00

static RenderPath* RenderPathClone(RenderPath* renderPath)
{
    if (!renderPath)
        return 0;

    return renderPath->Clone().Detach();
}

#define TOLUA_DISABLE_tolua_set_RenderPathCommand_clearFlags
static int tolua_set_RenderPathCommand_clearFlags(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearFlags_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->clearFlags_ = ClearTargetFlags((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}


#define TOLUA_DISABLE_tolua_set_Bone_unsigned_collisionMask
static int tolua_set_Bone_unsigned_collisionMask(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'collisionMask_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->collisionMask_ = BoneCollisionShape((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}

static const Vector<String>& TechniqueGetPassNames(const Technique* technique)
{
    static Vector<String> vector = technique->GetPassNames();
    return vector;
}

static const PODVector<Pass*>& TechniqueGetPasses(const Technique* technique)
{
    static PODVector<Pass*> vector = technique->GetPasses();
    return vector;
}

static Technique* TechniqueClone(const Technique* technique, const String& cloneName = String::EMPTY)
{
    if (!technique)
        return 0;
        
    SharedPtr<Technique> clonedTechniquePtr = technique->Clone(cloneName);
    Technique* clonedTechnique = clonedTechniquePtr.Get();
    clonedTechniquePtr.Detach();
    
    return clonedTechnique;
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_new00
static int tolua_GraphicsLuaAPI_Texture2D_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Texture2D>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_new00_local
static int tolua_GraphicsLuaAPI_Texture2D_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Texture2D>(tolua_S);
}

static Image* Texture2DGetImage(const Texture2D* texture2D)
{
    if (!texture2D)
        return 0;

    return texture2D->GetImage().Detach();
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_new00
static int tolua_GraphicsLuaAPI_Texture2DArray_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Texture2DArray>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_new00_local
static int tolua_GraphicsLuaAPI_Texture2DArray_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Texture2DArray>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_new00
static int tolua_GraphicsLuaAPI_Texture3D_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Texture3D>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_new00_local
static int tolua_GraphicsLuaAPI_Texture3D_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Texture3D>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_new00
static int tolua_GraphicsLuaAPI_TextureCube_new00(lua_State* tolua_S)
{
    return ToluaNewObject<TextureCube>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_new00_local
static int tolua_GraphicsLuaAPI_TextureCube_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<TextureCube>(tolua_S);
}

static Image* TextureCubeGetImage(const TextureCube* textureCube, CubeMapFace face)
{
    if (!textureCube)
        return 0;

    return textureCube->GetImage(face).Detach();
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new00
static int tolua_GraphicsLuaAPI_Viewport_new00(lua_State* tolua_S)
{
    return ToluaNewObject<Viewport>(tolua_S);
}

#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new00_local
static int tolua_GraphicsLuaAPI_Viewport_new00_local(lua_State* tolua_S)
{
    return ToluaNewObjectGC<Viewport>(tolua_S);
}

/* method: new of class  Viewport */
#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new01
static int tolua_GraphicsLuaAPI_Viewport_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,4,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(GetContext(tolua_S),scene,camera,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new00(tolua_S);
}

/* method: new_local of class  Viewport */
#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new01_local
static int tolua_GraphicsLuaAPI_Viewport_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,4,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(GetContext(tolua_S),scene,camera,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new00_local(tolua_S);
}

/* method: new of class  Viewport */
#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new02
static int tolua_GraphicsLuaAPI_Viewport_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const IntRect",0,&tolua_err)) ||
 !tolua_isusertype(tolua_S,5,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  const IntRect* rect = ((const IntRect*)  tolua_tousertype(tolua_S,4,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,5,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(GetContext(tolua_S),scene,camera,*rect,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new01(tolua_S);
}

/* method: new_local of class  Viewport */
#define TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new02_local
static int tolua_GraphicsLuaAPI_Viewport_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const IntRect",0,&tolua_err)) ||
 !tolua_isusertype(tolua_S,5,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  const IntRect* rect = ((const IntRect*)  tolua_tousertype(tolua_S,4,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,5,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(GetContext(tolua_S),scene,camera,*rect,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new01_local(tolua_S);
}

/* function to release collected object via destructor */
#ifdef __cplusplus

static int tolua_collect_ColorFrame (lua_State* tolua_S)
{
 ColorFrame* self = (ColorFrame*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Matrix3x4 (lua_State* tolua_S)
{
 Matrix3x4* self = (Matrix3x4*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_CascadeParameters (lua_State* tolua_S)
{
 CascadeParameters* self = (CascadeParameters*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Texture3D (lua_State* tolua_S)
{
 Texture3D* self = (Texture3D*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_AnimationControl (lua_State* tolua_S)
{
 AnimationControl* self = (AnimationControl*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Bone (lua_State* tolua_S)
{
 Bone* self = (Bone*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Vector3 (lua_State* tolua_S)
{
 Vector3* self = (Vector3*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_AnimationState (lua_State* tolua_S)
{
 AnimationState* self = (AnimationState*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Texture2D (lua_State* tolua_S)
{
 Texture2D* self = (Texture2D*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_TextureFrame (lua_State* tolua_S)
{
 TextureFrame* self = (TextureFrame*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_ViewOverride (lua_State* tolua_S)
{
 ViewOverride* self = (ViewOverride*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_IntVector2 (lua_State* tolua_S)
{
 IntVector2* self = (IntVector2*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_TextureCube (lua_State* tolua_S)
{
 TextureCube* self = (TextureCube*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Color (lua_State* tolua_S)
{
 Color* self = (Color*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_RenderTargetInfo (lua_State* tolua_S)
{
 RenderTargetInfo* self = (RenderTargetInfo*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Viewport (lua_State* tolua_S)
{
 Viewport* self = (Viewport*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Texture2DArray (lua_State* tolua_S)
{
 Texture2DArray* self = (Texture2DArray*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_SharedArrayPtr_float_ (lua_State* tolua_S)
{
 SharedArrayPtr<float>* self = (SharedArrayPtr<float>*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_BiasParameters (lua_State* tolua_S)
{
 BiasParameters* self = (BiasParameters*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_IndexBuffer (lua_State* tolua_S)
{
 IndexBuffer* self = (IndexBuffer*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_VectorBuffer (lua_State* tolua_S)
{
 VectorBuffer* self = (VectorBuffer*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_RenderSurface (lua_State* tolua_S)
{
 RenderSurface* self = (RenderSurface*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_RenderPathCommand (lua_State* tolua_S)
{
 RenderPathCommand* self = (RenderPathCommand*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_OctreeQueryResult (lua_State* tolua_S)
{
 OctreeQueryResult* self = (OctreeQueryResult*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_VertexElement (lua_State* tolua_S)
{
 VertexElement* self = (VertexElement*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Animation (lua_State* tolua_S)
{
 Animation* self = (Animation*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Material (lua_State* tolua_S)
{
 Material* self = (Material*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_VertexBuffer (lua_State* tolua_S)
{
 VertexBuffer* self = (VertexBuffer*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_FocusParameters (lua_State* tolua_S)
{
 FocusParameters* self = (FocusParameters*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_ParticleEffect (lua_State* tolua_S)
{
 ParticleEffect* self = (ParticleEffect*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Ray (lua_State* tolua_S)
{
 Ray* self = (Ray*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_AnimationTriggerPoint (lua_State* tolua_S)
{
 AnimationTriggerPoint* self = (AnimationTriggerPoint*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Frustum (lua_State* tolua_S)
{
 Frustum* self = (Frustum*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Vector2 (lua_State* tolua_S)
{
 Vector2* self = (Vector2*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_RayQueryResult (lua_State* tolua_S)
{
 RayQueryResult* self = (RayQueryResult*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Model (lua_State* tolua_S)
{
 Model* self = (Model*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Geometry (lua_State* tolua_S)
{
 Geometry* self = (Geometry*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}

static int tolua_collect_Matrix4 (lua_State* tolua_S)
{
 Matrix4* self = (Matrix4*) tolua_tousertype(tolua_S,1,0);
 Mtolua_delete(self);
 return 0;
}
#endif


/* function to register type */
static void tolua_reg_types (lua_State* tolua_S)
{
 tolua_usertype(tolua_S,"BiasParameters");
 tolua_usertype(tolua_S,"Vector<AnimationKeyFrame>");
 tolua_usertype(tolua_S,"Component");
 tolua_usertype(tolua_S,"AnimationControl");
 tolua_usertype(tolua_S,"ValueAnimation");
 tolua_usertype(tolua_S,"Node");
 tolua_usertype(tolua_S,"Light");
 tolua_usertype(tolua_S,"Vector<SharedPtr<IndexBuffer> >");
 tolua_usertype(tolua_S,"Pass");
 tolua_usertype(tolua_S,"Texture2D");
 tolua_usertype(tolua_S,"Graphics");
 tolua_usertype(tolua_S,"IntVector2");
 tolua_usertype(tolua_S,"AnimationController");
 tolua_usertype(tolua_S,"ParticleEmitter");
 tolua_usertype(tolua_S,"Color");
 tolua_usertype(tolua_S,"VertexElement");
 tolua_usertype(tolua_S,"Image");
 tolua_usertype(tolua_S,"FrameInfo");
 tolua_usertype(tolua_S,"Material");
 tolua_usertype(tolua_S,"VectorBuffer");
 tolua_usertype(tolua_S,"Vector4");
 tolua_usertype(tolua_S,"DecalSet");
 tolua_usertype(tolua_S,"StaticModel");
 tolua_usertype(tolua_S,"Animation");
 tolua_usertype(tolua_S,"PODVector<RayQueryResult>");
 tolua_usertype(tolua_S,"VertexBuffer");
 tolua_usertype(tolua_S,"Plane");
 tolua_usertype(tolua_S,"Zone");
 tolua_usertype(tolua_S,"Ray");
 tolua_usertype(tolua_S,"AnimationTriggerPoint");
 tolua_usertype(tolua_S,"Frustum");
 tolua_usertype(tolua_S,"Vector2");
 tolua_usertype(tolua_S,"Texture2DArray");
 tolua_usertype(tolua_S,"IntRect");
 tolua_usertype(tolua_S,"Viewport");
 tolua_usertype(tolua_S,"TextureCube");
 tolua_usertype(tolua_S,"TerrainPatch");
 tolua_usertype(tolua_S,"Matrix3x4");
 tolua_usertype(tolua_S,"CascadeParameters");
 tolua_usertype(tolua_S,"Texture");
 tolua_usertype(tolua_S,"Texture3D");
 tolua_usertype(tolua_S,"PODVector<OctreeQueryResult>");
 tolua_usertype(tolua_S,"Skeleton");
 tolua_usertype(tolua_S,"Sphere");
 tolua_usertype(tolua_S,"Vector<String>");
 tolua_usertype(tolua_S,"Bone");
 tolua_usertype(tolua_S,"Geometry");
 tolua_usertype(tolua_S,"Variant");
 tolua_usertype(tolua_S,"Renderer");
 tolua_usertype(tolua_S,"Technique");
 tolua_usertype(tolua_S,"ColorFrame");
 tolua_usertype(tolua_S,"Vector3");
 tolua_usertype(tolua_S,"Billboard");
 tolua_usertype(tolua_S,"RenderTargetInfo");
 tolua_usertype(tolua_S,"Scene");
 tolua_usertype(tolua_S,"Skybox");
 tolua_usertype(tolua_S,"Terrain");
 tolua_usertype(tolua_S,"AnimationState");
 tolua_usertype(tolua_S,"RibbonTrail");
 tolua_usertype(tolua_S,"StringHash");
 tolua_usertype(tolua_S,"RefCounted");
 tolua_usertype(tolua_S,"Camera");
 tolua_usertype(tolua_S,"Object");
 tolua_usertype(tolua_S,"Deserializer");
 tolua_usertype(tolua_S,"PODVector<VertexElement>");
 tolua_usertype(tolua_S,"ModelMorph");
 tolua_usertype(tolua_S,"Matrix4");
 tolua_usertype(tolua_S,"ResourceWithMetadata");
 tolua_usertype(tolua_S,"StaticModelGroup");
 tolua_usertype(tolua_S,"CustomGeometryVertex");
 tolua_usertype(tolua_S,"Resource");
 tolua_usertype(tolua_S,"CustomGeometry");
 tolua_usertype(tolua_S,"XMLFile");
 tolua_usertype(tolua_S,"ParticleEffect");
 tolua_usertype(tolua_S,"TextureFrame");
 tolua_usertype(tolua_S,"RenderSurface");
 tolua_usertype(tolua_S,"ViewOverride");
 tolua_usertype(tolua_S,"Octree");
 tolua_usertype(tolua_S,"Drawable");
 tolua_usertype(tolua_S,"AnimationKeyFrame");
 tolua_usertype(tolua_S,"DebugRenderer");
 tolua_usertype(tolua_S,"Quaternion");
 tolua_usertype(tolua_S,"OctreeQueryResult");
 tolua_usertype(tolua_S,"BoundingBox");
 tolua_usertype(tolua_S,"RenderPathCommand");
 tolua_usertype(tolua_S,"AnimationTrack");
 tolua_usertype(tolua_S,"IndexBuffer");
 tolua_usertype(tolua_S,"PODVector<unsigned>");
 tolua_usertype(tolua_S,"Vector<SharedPtr<VertexBuffer> >");
 tolua_usertype(tolua_S,"Model");
 tolua_usertype(tolua_S,"BillboardSet");
 tolua_usertype(tolua_S,"Polyhedron");
 tolua_usertype(tolua_S,"PODVector<Pass*>");
 tolua_usertype(tolua_S,"Rect");
 tolua_usertype(tolua_S,"SharedArrayPtr<float>");
 tolua_usertype(tolua_S,"FocusParameters");
 tolua_usertype(tolua_S,"RayQueryResult");
 tolua_usertype(tolua_S,"AnimatedModel");
 tolua_usertype(tolua_S,"RenderPath");
 tolua_usertype(tolua_S,"XMLElement");
}

/* method: new of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexElement_new00
static int tolua_GraphicsLuaAPI_VertexElement_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"VertexElement",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  VertexElement* tolua_ret = (VertexElement*)  Mtolua_new((VertexElement)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexElement");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexElement_new00_local
static int tolua_GraphicsLuaAPI_VertexElement_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"VertexElement",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  VertexElement* tolua_ret = (VertexElement*)  Mtolua_new((VertexElement)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexElement");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexElement_new01
static int tolua_GraphicsLuaAPI_VertexElement_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"VertexElement",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  VertexElementType type = ((VertexElementType) (int)  tolua_tonumber(tolua_S,2,0));
  VertexElementSemantic semantic = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,3,0));
  unsigned char index = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
  bool perInstance = ((bool)  tolua_toboolean(tolua_S,5,false));
 {
  VertexElement* tolua_ret = (VertexElement*)  Mtolua_new((VertexElement)(type,semantic,index,perInstance));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexElement");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_VertexElement_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexElement_new01_local
static int tolua_GraphicsLuaAPI_VertexElement_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"VertexElement",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  VertexElementType type = ((VertexElementType) (int)  tolua_tonumber(tolua_S,2,0));
  VertexElementSemantic semantic = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,3,0));
  unsigned char index = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
  bool perInstance = ((bool)  tolua_toboolean(tolua_S,5,false));
 {
  VertexElement* tolua_ret = (VertexElement*)  Mtolua_new((VertexElement)(type,semantic,index,perInstance));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexElement");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_VertexElement_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* get function: type_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_get_VertexElement_type
static int tolua_get_VertexElement_type(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'type_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->type_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: type_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_set_VertexElement_type
static int tolua_set_VertexElement_type(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'type_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->type_ = ((VertexElementType) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: semantic_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_get_VertexElement_semantic
static int tolua_get_VertexElement_semantic(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'semantic_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->semantic_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: semantic_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_set_VertexElement_semantic
static int tolua_set_VertexElement_semantic(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'semantic_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->semantic_ = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: index_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_get_VertexElement_unsigned_index
static int tolua_get_VertexElement_unsigned_index(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'index_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->index_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: index_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_set_VertexElement_unsigned_index
static int tolua_set_VertexElement_unsigned_index(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'index_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->index_ = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: perInstance_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_get_VertexElement_perInstance
static int tolua_get_VertexElement_perInstance(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'perInstance_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->perInstance_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: perInstance_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_set_VertexElement_perInstance
static int tolua_set_VertexElement_perInstance(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'perInstance_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->perInstance_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: offset_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_get_VertexElement_offset
static int tolua_get_VertexElement_offset(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'offset_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->offset_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: offset_ of class  VertexElement */
#ifndef TOLUA_DISABLE_tolua_set_VertexElement_offset
static int tolua_set_VertexElement_offset(lua_State* tolua_S)
{
  VertexElement* self = (VertexElement*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'offset_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->offset_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DRAWABLE_GEOMETRY */
#ifndef TOLUA_DISABLE_tolua_get_DRAWABLE_GEOMETRY
static int tolua_get_DRAWABLE_GEOMETRY(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DRAWABLE_GEOMETRY);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DRAWABLE_LIGHT */
#ifndef TOLUA_DISABLE_tolua_get_DRAWABLE_LIGHT
static int tolua_get_DRAWABLE_LIGHT(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DRAWABLE_LIGHT);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DRAWABLE_ZONE */
#ifndef TOLUA_DISABLE_tolua_get_DRAWABLE_ZONE
static int tolua_get_DRAWABLE_ZONE(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DRAWABLE_ZONE);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DRAWABLE_GEOMETRY2D */
#ifndef TOLUA_DISABLE_tolua_get_DRAWABLE_GEOMETRY2D
static int tolua_get_DRAWABLE_GEOMETRY2D(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DRAWABLE_GEOMETRY2D);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DRAWABLE_ANY */
#ifndef TOLUA_DISABLE_tolua_get_DRAWABLE_ANY
static int tolua_get_DRAWABLE_ANY(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DRAWABLE_ANY);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DEFAULT_VIEWMASK */
#ifndef TOLUA_DISABLE_tolua_get_DEFAULT_VIEWMASK
static int tolua_get_DEFAULT_VIEWMASK(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DEFAULT_VIEWMASK);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DEFAULT_LIGHTMASK */
#ifndef TOLUA_DISABLE_tolua_get_DEFAULT_LIGHTMASK
static int tolua_get_DEFAULT_LIGHTMASK(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DEFAULT_LIGHTMASK);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DEFAULT_SHADOWMASK */
#ifndef TOLUA_DISABLE_tolua_get_DEFAULT_SHADOWMASK
static int tolua_get_DEFAULT_SHADOWMASK(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DEFAULT_SHADOWMASK);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: DEFAULT_ZONEMASK */
#ifndef TOLUA_DISABLE_tolua_get_DEFAULT_ZONEMASK
static int tolua_get_DEFAULT_ZONEMASK(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)DEFAULT_ZONEMASK);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: MAX_VERTEX_LIGHTS */
#ifndef TOLUA_DISABLE_tolua_get_MAX_VERTEX_LIGHTS
static int tolua_get_MAX_VERTEX_LIGHTS(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)MAX_VERTEX_LIGHTS);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ANIMATION_LOD_BASESCALE */
#ifndef TOLUA_DISABLE_tolua_get_ANIMATION_LOD_BASESCALE
static int tolua_get_ANIMATION_LOD_BASESCALE(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)ANIMATION_LOD_BASESCALE);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDrawDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetDrawDistance00
static int tolua_GraphicsLuaAPI_Drawable_SetDrawDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDrawDistance'", NULL);
#endif
 {
  self->SetDrawDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDrawDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetShadowDistance00
static int tolua_GraphicsLuaAPI_Drawable_SetShadowDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowDistance'", NULL);
#endif
 {
  self->SetShadowDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLodBias of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetLodBias00
static int tolua_GraphicsLuaAPI_Drawable_SetLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  float bias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLodBias'", NULL);
#endif
 {
  self->SetLodBias(bias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetViewMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetViewMask00
static int tolua_GraphicsLuaAPI_Drawable_SetViewMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetViewMask'", NULL);
#endif
 {
  self->SetViewMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetViewMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLightMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetLightMask00
static int tolua_GraphicsLuaAPI_Drawable_SetLightMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLightMask'", NULL);
#endif
 {
  self->SetLightMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLightMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetShadowMask00
static int tolua_GraphicsLuaAPI_Drawable_SetShadowMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowMask'", NULL);
#endif
 {
  self->SetShadowMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetZoneMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetZoneMask00
static int tolua_GraphicsLuaAPI_Drawable_SetZoneMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetZoneMask'", NULL);
#endif
 {
  self->SetZoneMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetZoneMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxLights of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetMaxLights00
static int tolua_GraphicsLuaAPI_Drawable_SetMaxLights00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxLights'", NULL);
#endif
 {
  self->SetMaxLights(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxLights'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCastShadows of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetCastShadows00
static int tolua_GraphicsLuaAPI_Drawable_SetCastShadows00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCastShadows'", NULL);
#endif
 {
  self->SetCastShadows(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCastShadows'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOccluder of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetOccluder00
static int tolua_GraphicsLuaAPI_Drawable_SetOccluder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOccluder'", NULL);
#endif
 {
  self->SetOccluder(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOccluder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOccludee of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_SetOccludee00
static int tolua_GraphicsLuaAPI_Drawable_SetOccludee00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOccludee'", NULL);
#endif
 {
  self->SetOccludee(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOccludee'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: MarkForUpdate of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_MarkForUpdate00
static int tolua_GraphicsLuaAPI_Drawable_MarkForUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MarkForUpdate'", NULL);
#endif
 {
  self->MarkForUpdate();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MarkForUpdate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoundingBox of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetBoundingBox00
static int tolua_GraphicsLuaAPI_Drawable_GetBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoundingBox'", NULL);
#endif
 {
  const BoundingBox& tolua_ret = (const BoundingBox&)  self->GetBoundingBox();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const BoundingBox");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWorldBoundingBox of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetWorldBoundingBox00
static int tolua_GraphicsLuaAPI_Drawable_GetWorldBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWorldBoundingBox'", NULL);
#endif
 {
  const BoundingBox& tolua_ret = (const BoundingBox&)  self->GetWorldBoundingBox();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const BoundingBox");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWorldBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDrawableFlags of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetDrawableFlags00
static int tolua_GraphicsLuaAPI_Drawable_GetDrawableFlags00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDrawableFlags'", NULL);
#endif
 {
  unsigned char tolua_ret = (unsigned char)  self->GetDrawableFlags();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDrawableFlags'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDrawDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetDrawDistance00
static int tolua_GraphicsLuaAPI_Drawable_GetDrawDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDrawDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetDrawDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDrawDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetShadowDistance00
static int tolua_GraphicsLuaAPI_Drawable_GetShadowDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLodBias of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetLodBias00
static int tolua_GraphicsLuaAPI_Drawable_GetLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetViewMask00
static int tolua_GraphicsLuaAPI_Drawable_GetViewMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetViewMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLightMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetLightMask00
static int tolua_GraphicsLuaAPI_Drawable_GetLightMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLightMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetLightMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLightMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetShadowMask00
static int tolua_GraphicsLuaAPI_Drawable_GetShadowMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetShadowMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetZoneMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetZoneMask00
static int tolua_GraphicsLuaAPI_Drawable_GetZoneMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetZoneMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetZoneMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetZoneMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxLights of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetMaxLights00
static int tolua_GraphicsLuaAPI_Drawable_GetMaxLights00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxLights'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMaxLights();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxLights'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCastShadows of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetCastShadows00
static int tolua_GraphicsLuaAPI_Drawable_GetCastShadows00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCastShadows'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetCastShadows();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCastShadows'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOccluder of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_IsOccluder00
static int tolua_GraphicsLuaAPI_Drawable_IsOccluder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOccluder'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsOccluder();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOccluder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOccludee of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_IsOccludee00
static int tolua_GraphicsLuaAPI_Drawable_IsOccludee00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOccludee'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsOccludee();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOccludee'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInView of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_IsInView00
static int tolua_GraphicsLuaAPI_Drawable_IsInView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInView'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInView();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsInView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInView of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_IsInView01
static int tolua_GraphicsLuaAPI_Drawable_IsInView01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
  Camera* tolua_var_1 = ((Camera*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInView'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInView(tolua_var_1);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Drawable_IsInView00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetZone of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Drawable_GetZone00
static int tolua_GraphicsLuaAPI_Drawable_GetZone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Drawable* self = (const Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetZone'", NULL);
#endif
 {
  Zone* tolua_ret = (Zone*)  self->GetZone();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Zone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetZone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: worldBoundingBox of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_worldBoundingBox_ref
static int tolua_get_Drawable_worldBoundingBox_ref(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'worldBoundingBox'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetWorldBoundingBox(),"BoundingBox");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawableFlags of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_unsigned_drawableFlags
static int tolua_get_Drawable_unsigned_drawableFlags(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawableFlags'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetDrawableFlags());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_drawDistance
static int tolua_get_Drawable_drawDistance(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetDrawDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: drawDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_drawDistance
static int tolua_set_Drawable_drawDistance(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDrawDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_shadowDistance
static int tolua_get_Drawable_shadowDistance(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowDistance of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_shadowDistance
static int tolua_set_Drawable_shadowDistance(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lodBias of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_lodBias
static int tolua_get_Drawable_lodBias(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lodBias of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_lodBias
static int tolua_set_Drawable_lodBias(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: viewMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_viewMask
static int tolua_get_Drawable_viewMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetViewMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: viewMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_viewMask
static int tolua_set_Drawable_viewMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetViewMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lightMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_lightMask
static int tolua_get_Drawable_lightMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLightMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lightMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_lightMask
static int tolua_set_Drawable_lightMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLightMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_shadowMask
static int tolua_get_Drawable_shadowMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_shadowMask
static int tolua_set_Drawable_shadowMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: zoneMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_zoneMask
static int tolua_get_Drawable_zoneMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoneMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetZoneMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: zoneMask of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_zoneMask
static int tolua_set_Drawable_zoneMask(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoneMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetZoneMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxLights of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_maxLights
static int tolua_get_Drawable_maxLights(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLights'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxLights());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxLights of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_maxLights
static int tolua_set_Drawable_maxLights(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLights'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxLights(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: castShadows of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_castShadows
static int tolua_get_Drawable_castShadows(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'castShadows'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetCastShadows());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: castShadows of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_castShadows
static int tolua_set_Drawable_castShadows(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'castShadows'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCastShadows(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occluder of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_occluder
static int tolua_get_Drawable_occluder(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occluder'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsOccluder());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occluder of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_occluder
static int tolua_set_Drawable_occluder(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occluder'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOccluder(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occludee of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_occludee
static int tolua_get_Drawable_occludee(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occludee'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsOccludee());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occludee of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_set_Drawable_occludee
static int tolua_set_Drawable_occludee(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occludee'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOccludee(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: inView of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_inView
static int tolua_get_Drawable_inView(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'inView'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsInView());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: zone of class  Drawable */
#ifndef TOLUA_DISABLE_tolua_get_Drawable_zone_ptr
static int tolua_get_Drawable_zone_ptr(lua_State* tolua_S)
{
  Drawable* self = (Drawable*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zone'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetZone(),"Zone");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetModel of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_SetModel00
static int tolua_GraphicsLuaAPI_AnimatedModel_SetModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  Model* model = ((Model*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetModel'", NULL);
#endif
 {
  self->SetModel(model);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_AddAnimationState00
static int tolua_GraphicsLuaAPI_AnimatedModel_AddAnimationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->AddAnimationState(animation);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddAnimationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState00
static int tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAnimationState'", NULL);
#endif
 {
  self->RemoveAnimationState(animation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAnimationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState01
static int tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  const String animationName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAnimationState'", NULL);
#endif
 {
  self->RemoveAnimationState(animationName);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState02
static int tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  StringHash animationNameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAnimationState'", NULL);
#endif
 {
  self->RemoveAnimationState(animationNameHash);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState03
static int tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  AnimationState* state = ((AnimationState*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAnimationState'", NULL);
#endif
 {
  self->RemoveAnimationState(state);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState04
static int tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState04(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAnimationState'", NULL);
#endif
 {
  self->RemoveAnimationState(index);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState03(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllAnimationStates of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_RemoveAllAnimationStates00
static int tolua_GraphicsLuaAPI_AnimatedModel_RemoveAllAnimationStates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllAnimationStates'", NULL);
#endif
 {
  self->RemoveAllAnimationStates();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllAnimationStates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAnimationLodBias of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_SetAnimationLodBias00
static int tolua_GraphicsLuaAPI_AnimatedModel_SetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  float bias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAnimationLodBias'", NULL);
#endif
 {
  self->SetAnimationLodBias(bias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUpdateInvisible of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_SetUpdateInvisible00
static int tolua_GraphicsLuaAPI_AnimatedModel_SetUpdateInvisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUpdateInvisible'", NULL);
#endif
 {
  self->SetUpdateInvisible(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUpdateInvisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMorphWeight of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight00
static int tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMorphWeight'", NULL);
#endif
 {
  self->SetMorphWeight(name,weight);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMorphWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMorphWeight of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight01
static int tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMorphWeight'", NULL);
#endif
 {
  self->SetMorphWeight(nameHash,weight);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMorphWeight of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight02
static int tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMorphWeight'", NULL);
#endif
 {
  self->SetMorphWeight(index,weight);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: ResetMorphWeights of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_ResetMorphWeights00
static int tolua_GraphicsLuaAPI_AnimatedModel_ResetMorphWeights00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ResetMorphWeights'", NULL);
#endif
 {
  self->ResetMorphWeights();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ResetMorphWeights'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSkeleton of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetSkeleton00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetSkeleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSkeleton'", NULL);
#endif
 {
  Skeleton& tolua_ret = (Skeleton&)  self->GetSkeleton();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"Skeleton");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSkeleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumAnimationStates of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetNumAnimationStates00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetNumAnimationStates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumAnimationStates'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumAnimationStates();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumAnimationStates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->GetAnimationState(animation);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState01
static int tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  const String animationName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->GetAnimationState(animationName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState02
static int tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  StringHash animationNameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->GetAnimationState(animationNameHash);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationState of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState03
static int tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->GetAnimationState(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationLodBias of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationLodBias00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAnimationLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUpdateInvisible of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetUpdateInvisible00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetUpdateInvisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUpdateInvisible'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetUpdateInvisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUpdateInvisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumMorphs of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetNumMorphs00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetNumMorphs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumMorphs'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumMorphs();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumMorphs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorphWeight of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight00
static int tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorphWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMorphWeight(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMorphWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorphWeight of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight01
static int tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorphWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMorphWeight(nameHash);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorphWeight of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight02
static int tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorphWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMorphWeight(index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsMaster of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_IsMaster00
static int tolua_GraphicsLuaAPI_AnimatedModel_IsMaster00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimatedModel* self = (const AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsMaster'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsMaster();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsMaster'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: UpdateBoneBoundingBox of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimatedModel_UpdateBoneBoundingBox00
static int tolua_GraphicsLuaAPI_AnimatedModel_UpdateBoneBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimatedModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'UpdateBoneBoundingBox'", NULL);
#endif
 {
  self->UpdateBoneBoundingBox();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'UpdateBoneBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: model of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_model_ptr
static int tolua_get_AnimatedModel_model_ptr(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'model'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetModel(),"Model");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: model of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_set_AnimatedModel_model_ptr
static int tolua_set_AnimatedModel_model_ptr(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'model'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Model",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetModel(((Model*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: skeleton of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_skeleton_ref
static int tolua_get_AnimatedModel_skeleton_ref(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'skeleton'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetSkeleton(),"Skeleton");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numAnimationStates of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_numAnimationStates
static int tolua_get_AnimatedModel_numAnimationStates(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numAnimationStates'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumAnimationStates());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animationLodBias of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_animationLodBias
static int tolua_get_AnimatedModel_animationLodBias(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAnimationLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: animationLodBias of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_set_AnimatedModel_animationLodBias
static int tolua_set_AnimatedModel_animationLodBias(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAnimationLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: updateInvisible of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_updateInvisible
static int tolua_get_AnimatedModel_updateInvisible(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateInvisible'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetUpdateInvisible());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: updateInvisible of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_set_AnimatedModel_updateInvisible
static int tolua_set_AnimatedModel_updateInvisible(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateInvisible'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUpdateInvisible(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numMorphs of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_numMorphs
static int tolua_get_AnimatedModel_numMorphs(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numMorphs'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumMorphs());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: master of class  AnimatedModel */
#ifndef TOLUA_DISABLE_tolua_get_AnimatedModel_master
static int tolua_get_AnimatedModel_master(lua_State* tolua_S)
{
  AnimatedModel* self = (AnimatedModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'master'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsMaster());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CHANNEL_POSITION */
#ifndef TOLUA_DISABLE_tolua_get_unsigned_CHANNEL_POSITION
static int tolua_get_unsigned_CHANNEL_POSITION(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)CHANNEL_POSITION);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CHANNEL_ROTATION */
#ifndef TOLUA_DISABLE_tolua_get_unsigned_CHANNEL_ROTATION
static int tolua_get_unsigned_CHANNEL_ROTATION(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)CHANNEL_ROTATION);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: CHANNEL_SCALE */
#ifndef TOLUA_DISABLE_tolua_get_unsigned_CHANNEL_SCALE
static int tolua_get_unsigned_CHANNEL_SCALE(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)CHANNEL_SCALE);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: time_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_get_AnimationKeyFrame_time
static int tolua_get_AnimationKeyFrame_time(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->time_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: time_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_set_AnimationKeyFrame_time
static int tolua_set_AnimationKeyFrame_time(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->time_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: position_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_get_AnimationKeyFrame_position
static int tolua_get_AnimationKeyFrame_position(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->position_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: position_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_set_AnimationKeyFrame_position
static int tolua_set_AnimationKeyFrame_position(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->position_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: rotation_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_get_AnimationKeyFrame_rotation
static int tolua_get_AnimationKeyFrame_rotation(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rotation_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->rotation_,"Quaternion");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: rotation_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_set_AnimationKeyFrame_rotation
static int tolua_set_AnimationKeyFrame_rotation(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rotation_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Quaternion",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->rotation_ = *((Quaternion*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: scale_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_get_AnimationKeyFrame_scale
static int tolua_get_AnimationKeyFrame_scale(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scale_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->scale_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: scale_ of class  AnimationKeyFrame */
#ifndef TOLUA_DISABLE_tolua_set_AnimationKeyFrame_scale
static int tolua_set_AnimationKeyFrame_scale(lua_State* tolua_S)
{
  AnimationKeyFrame* self = (AnimationKeyFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scale_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->scale_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetKeyFrame of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_SetKeyFrame00
static int tolua_GraphicsLuaAPI_AnimationTrack_SetKeyFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationTrack",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const AnimationKeyFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const AnimationKeyFrame* keyFrame = ((const AnimationKeyFrame*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetKeyFrame'", NULL);
#endif
 {
  self->SetKeyFrame(index,*keyFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetKeyFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddKeyFrame of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_AddKeyFrame00
static int tolua_GraphicsLuaAPI_AnimationTrack_AddKeyFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationTrack",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const AnimationKeyFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
  const AnimationKeyFrame* keyFrame = ((const AnimationKeyFrame*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddKeyFrame'", NULL);
#endif
 {
  self->AddKeyFrame(*keyFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddKeyFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: InsertKeyFrame of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_InsertKeyFrame00
static int tolua_GraphicsLuaAPI_AnimationTrack_InsertKeyFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationTrack",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const AnimationKeyFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const AnimationKeyFrame* keyFrame = ((const AnimationKeyFrame*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertKeyFrame'", NULL);
#endif
 {
  self->InsertKeyFrame(index,*keyFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertKeyFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveKeyFrame of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_RemoveKeyFrame00
static int tolua_GraphicsLuaAPI_AnimationTrack_RemoveKeyFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationTrack",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveKeyFrame'", NULL);
#endif
 {
  self->RemoveKeyFrame(index);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveKeyFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllKeyFrames of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_RemoveAllKeyFrames00
static int tolua_GraphicsLuaAPI_AnimationTrack_RemoveAllKeyFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationTrack",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllKeyFrames'", NULL);
#endif
 {
  self->RemoveAllKeyFrames();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllKeyFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetKeyFrame of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_GetKeyFrame00
static int tolua_GraphicsLuaAPI_AnimationTrack_GetKeyFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationTrack",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetKeyFrame'", NULL);
#endif
 {
  AnimationKeyFrame* tolua_ret = (AnimationKeyFrame*)  self->GetKeyFrame(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationKeyFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetKeyFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumKeyFrames of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTrack_GetNumKeyFrames00
static int tolua_GraphicsLuaAPI_AnimationTrack_GetNumKeyFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationTrack",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationTrack* self = (const AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumKeyFrames'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumKeyFrames();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumKeyFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: name_ of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTrack_name
static int tolua_get_AnimationTrack_name(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->name_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: nameHash_ of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTrack_nameHash
static int tolua_get_AnimationTrack_nameHash(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nameHash_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->nameHash_,"const StringHash");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: channelMask_ of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTrack_unsigned_channelMask
static int tolua_get_AnimationTrack_unsigned_channelMask(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'channelMask_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->channelMask_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: channelMask_ of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_set_AnimationTrack_unsigned_channelMask
static int tolua_set_AnimationTrack_unsigned_channelMask(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'channelMask_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->channelMask_ = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: keyFrames_ of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTrack_keyFrames
static int tolua_get_AnimationTrack_keyFrames(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'keyFrames_'",NULL);
#endif
  ToluaPushVector<AnimationKeyFrame>(tolua_S,(void*)&self->keyFrames_,"AnimationKeyFrame");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: keyFrames_ of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_set_AnimationTrack_keyFrames
static int tolua_set_AnimationTrack_keyFrames(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'keyFrames_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !ToluaIsVector<AnimationKeyFrame>(tolua_S,2,"AnimationKeyFrame",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->keyFrames_ = *((Vector<AnimationKeyFrame>*)  ToluaToVector<AnimationKeyFrame>(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numKeyFrames of class  AnimationTrack */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTrack_numKeyFrames
static int tolua_get_AnimationTrack_numKeyFrames(lua_State* tolua_S)
{
  AnimationTrack* self = (AnimationTrack*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numKeyFrames'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumKeyFrames());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  AnimationTriggerPoint */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00
static int tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationTriggerPoint",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  AnimationTriggerPoint* tolua_ret = (AnimationTriggerPoint*)  Mtolua_new((AnimationTriggerPoint)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTriggerPoint");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  AnimationTriggerPoint */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00_local
static int tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationTriggerPoint",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  AnimationTriggerPoint* tolua_ret = (AnimationTriggerPoint*)  Mtolua_new((AnimationTriggerPoint)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTriggerPoint");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: time_ of class  AnimationTriggerPoint */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTriggerPoint_time
static int tolua_get_AnimationTriggerPoint_time(lua_State* tolua_S)
{
  AnimationTriggerPoint* self = (AnimationTriggerPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->time_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: time_ of class  AnimationTriggerPoint */
#ifndef TOLUA_DISABLE_tolua_set_AnimationTriggerPoint_time
static int tolua_set_AnimationTriggerPoint_time(lua_State* tolua_S)
{
  AnimationTriggerPoint* self = (AnimationTriggerPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->time_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: data_ of class  AnimationTriggerPoint */
#ifndef TOLUA_DISABLE_tolua_get_AnimationTriggerPoint_data
static int tolua_get_AnimationTriggerPoint_data(lua_State* tolua_S)
{
  AnimationTriggerPoint* self = (AnimationTriggerPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'data_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->data_,"Variant");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: data_ of class  AnimationTriggerPoint */
#ifndef TOLUA_DISABLE_tolua_set_AnimationTriggerPoint_data
static int tolua_set_AnimationTriggerPoint_data(lua_State* tolua_S)
{
  AnimationTriggerPoint* self = (AnimationTriggerPoint*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'data_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Variant",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->data_ = *((Variant*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_new00
static int tolua_GraphicsLuaAPI_Animation_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Animation* tolua_ret = (Animation*)  Mtolua_new((Animation)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Animation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_new00_local
static int tolua_GraphicsLuaAPI_Animation_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Animation* tolua_ret = (Animation*)  Mtolua_new((Animation)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Animation");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_delete00
static int tolua_GraphicsLuaAPI_Animation_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAnimationName of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_SetAnimationName00
static int tolua_GraphicsLuaAPI_Animation_SetAnimationName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAnimationName'", NULL);
#endif
 {
  self->SetAnimationName(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAnimationName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLength of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_SetLength00
static int tolua_GraphicsLuaAPI_Animation_SetLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  float length = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLength'", NULL);
#endif
 {
  self->SetLength(length);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreateTrack of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_CreateTrack00
static int tolua_GraphicsLuaAPI_Animation_CreateTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreateTrack'", NULL);
#endif
 {
  AnimationTrack* tolua_ret = (AnimationTrack*)  self->CreateTrack(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTrack");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreateTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveTrack of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_RemoveTrack00
static int tolua_GraphicsLuaAPI_Animation_RemoveTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveTrack'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->RemoveTrack(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllTracks of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_RemoveAllTracks00
static int tolua_GraphicsLuaAPI_Animation_RemoveAllTracks00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllTracks'", NULL);
#endif
 {
  self->RemoveAllTracks();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllTracks'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTrigger of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_SetTrigger00
static int tolua_GraphicsLuaAPI_Animation_SetTrigger00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const AnimationTriggerPoint",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const AnimationTriggerPoint* trigger = ((const AnimationTriggerPoint*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTrigger'", NULL);
#endif
 {
  self->SetTrigger(index,*trigger);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTrigger'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTrigger of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_AddTrigger00
static int tolua_GraphicsLuaAPI_Animation_AddTrigger00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const AnimationTriggerPoint",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  const AnimationTriggerPoint* trigger = ((const AnimationTriggerPoint*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTrigger'", NULL);
#endif
 {
  self->AddTrigger(*trigger);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddTrigger'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTrigger of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_AddTrigger01
static int tolua_GraphicsLuaAPI_Animation_AddTrigger01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Variant",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
  bool timeIsNormalized = ((bool)  tolua_toboolean(tolua_S,3,0));
  const Variant* data = ((const Variant*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTrigger'", NULL);
#endif
 {
  self->AddTrigger(time,timeIsNormalized,*data);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Animation_AddTrigger00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveTrigger of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_RemoveTrigger00
static int tolua_GraphicsLuaAPI_Animation_RemoveTrigger00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveTrigger'", NULL);
#endif
 {
  self->RemoveTrigger(index);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveTrigger'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllTriggers of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_RemoveAllTriggers00
static int tolua_GraphicsLuaAPI_Animation_RemoveAllTriggers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllTriggers'", NULL);
#endif
 {
  self->RemoveAllTriggers();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllTriggers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AnimationClone of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_Clone00
static int tolua_GraphicsLuaAPI_Animation_Clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Animation",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Animation* self = (const Animation*)  tolua_tousertype(tolua_S,1,0);
  const String cloneName = ((const String)  tolua_tourho3dstring(tolua_S,2,String::EMPTY));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AnimationClone'", NULL);
#endif
 {
  tolua_outside Animation* tolua_ret = (tolua_outside Animation*)  AnimationClone(self,cloneName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Animation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationName of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetAnimationName00
static int tolua_GraphicsLuaAPI_Animation_GetAnimationName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Animation* self = (const Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetAnimationName();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLength of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetLength00
static int tolua_GraphicsLuaAPI_Animation_GetLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Animation* self = (const Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLength'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLength();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumTracks of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetNumTracks00
static int tolua_GraphicsLuaAPI_Animation_GetNumTracks00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Animation* self = (const Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumTracks'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumTracks();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumTracks'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrack of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetTrack00
static int tolua_GraphicsLuaAPI_Animation_GetTrack00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrack'", NULL);
#endif
 {
  AnimationTrack* tolua_ret = (AnimationTrack*)  self->GetTrack(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTrack");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTrack'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrack of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetTrack01
static int tolua_GraphicsLuaAPI_Animation_GetTrack01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrack'", NULL);
#endif
 {
  AnimationTrack* tolua_ret = (AnimationTrack*)  self->GetTrack(nameHash);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTrack");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Animation_GetTrack00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrack of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetTrack02
static int tolua_GraphicsLuaAPI_Animation_GetTrack02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrack'", NULL);
#endif
 {
  AnimationTrack* tolua_ret = (AnimationTrack*)  self->GetTrack(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTrack");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Animation_GetTrack01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumTriggers of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetNumTriggers00
static int tolua_GraphicsLuaAPI_Animation_GetNumTriggers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Animation* self = (const Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumTriggers'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumTriggers();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumTriggers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrigger of class  Animation */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Animation_GetTrigger00
static int tolua_GraphicsLuaAPI_Animation_GetTrigger00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrigger'", NULL);
#endif
 {
  AnimationTriggerPoint* tolua_ret = (AnimationTriggerPoint*)  self->GetTrigger(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationTriggerPoint");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTrigger'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animationName of class  Animation */
#ifndef TOLUA_DISABLE_tolua_get_Animation_animationName
static int tolua_get_Animation_animationName(lua_State* tolua_S)
{
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationName'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetAnimationName());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: animationName of class  Animation */
#ifndef TOLUA_DISABLE_tolua_set_Animation_animationName
static int tolua_set_Animation_animationName(lua_State* tolua_S)
{
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationName'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAnimationName(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: length of class  Animation */
#ifndef TOLUA_DISABLE_tolua_get_Animation_length
static int tolua_get_Animation_length(lua_State* tolua_S)
{
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'length'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLength());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: length of class  Animation */
#ifndef TOLUA_DISABLE_tolua_set_Animation_length
static int tolua_set_Animation_length(lua_State* tolua_S)
{
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'length'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLength(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numTracks of class  Animation */
#ifndef TOLUA_DISABLE_tolua_get_Animation_numTracks
static int tolua_get_Animation_numTracks(lua_State* tolua_S)
{
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numTracks'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumTracks());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numTriggers of class  Animation */
#ifndef TOLUA_DISABLE_tolua_get_Animation_numTriggers
static int tolua_get_Animation_numTriggers(lua_State* tolua_S)
{
  Animation* self = (Animation*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numTriggers'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumTriggers());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationControl_new00
static int tolua_GraphicsLuaAPI_AnimationControl_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  AnimationControl* tolua_ret = (AnimationControl*)  Mtolua_new((AnimationControl)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationControl");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationControl_new00_local
static int tolua_GraphicsLuaAPI_AnimationControl_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  AnimationControl* tolua_ret = (AnimationControl*)  Mtolua_new((AnimationControl)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationControl");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationControl_delete00
static int tolua_GraphicsLuaAPI_AnimationControl_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationControl",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: name_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_name
static int tolua_get_AnimationControl_name(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->name_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: name_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_name
static int tolua_set_AnimationControl_name(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->name_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: hash_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_hash
static int tolua_get_AnimationControl_hash(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'hash_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->hash_,"StringHash");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: hash_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_hash
static int tolua_set_AnimationControl_hash(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'hash_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->hash_ = *((StringHash*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: speed_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_speed
static int tolua_get_AnimationControl_speed(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'speed_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->speed_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: speed_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_speed
static int tolua_set_AnimationControl_speed(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'speed_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->speed_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: targetWeight_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_targetWeight
static int tolua_get_AnimationControl_targetWeight(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'targetWeight_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->targetWeight_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: targetWeight_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_targetWeight
static int tolua_set_AnimationControl_targetWeight(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'targetWeight_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->targetWeight_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fadeTime_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_fadeTime
static int tolua_get_AnimationControl_fadeTime(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fadeTime_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->fadeTime_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fadeTime_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_fadeTime
static int tolua_set_AnimationControl_fadeTime(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fadeTime_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->fadeTime_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: autoFadeTime_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_autoFadeTime
static int tolua_get_AnimationControl_autoFadeTime(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoFadeTime_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->autoFadeTime_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: autoFadeTime_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_autoFadeTime
static int tolua_set_AnimationControl_autoFadeTime(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoFadeTime_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->autoFadeTime_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: removeOnCompletion_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_get_AnimationControl_removeOnCompletion
static int tolua_get_AnimationControl_removeOnCompletion(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'removeOnCompletion_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->removeOnCompletion_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: removeOnCompletion_ of class  AnimationControl */
#ifndef TOLUA_DISABLE_tolua_set_AnimationControl_removeOnCompletion
static int tolua_set_AnimationControl_removeOnCompletion(lua_State* tolua_S)
{
  AnimationControl* self = (AnimationControl*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'removeOnCompletion_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->removeOnCompletion_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: Play of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_Play00
static int tolua_GraphicsLuaAPI_AnimationController_Play00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  unsigned char layer = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,4,0));
  float fadeInTime = ((float)  tolua_tonumber(tolua_S,5,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Play'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->Play(name,layer,looped,fadeInTime);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Play'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: PlayExclusive of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_PlayExclusive00
static int tolua_GraphicsLuaAPI_AnimationController_PlayExclusive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  unsigned char layer = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
  bool looped = ((bool)  tolua_toboolean(tolua_S,4,0));
  float fadeTime = ((float)  tolua_tonumber(tolua_S,5,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PlayExclusive'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->PlayExclusive(name,layer,looped,fadeTime);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PlayExclusive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Stop of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_Stop00
static int tolua_GraphicsLuaAPI_AnimationController_Stop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float fadeOutTime = ((float)  tolua_tonumber(tolua_S,3,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Stop'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->Stop(name,fadeOutTime);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Stop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: StopLayer of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_StopLayer00
static int tolua_GraphicsLuaAPI_AnimationController_StopLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  unsigned char layer = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
  float fadeOutTime = ((float)  tolua_tonumber(tolua_S,3,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'StopLayer'", NULL);
#endif
 {
  self->StopLayer(layer,fadeOutTime);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'StopLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: StopAll of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_StopAll00
static int tolua_GraphicsLuaAPI_AnimationController_StopAll00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  float fadeTime = ((float)  tolua_tonumber(tolua_S,2,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'StopAll'", NULL);
#endif
 {
  self->StopAll(fadeTime);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'StopAll'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Fade of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_Fade00
static int tolua_GraphicsLuaAPI_AnimationController_Fade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float targetWeight = ((float)  tolua_tonumber(tolua_S,3,0));
  float fadeTime = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Fade'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->Fade(name,targetWeight,fadeTime);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Fade'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: FadeOthers of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_FadeOthers00
static int tolua_GraphicsLuaAPI_AnimationController_FadeOthers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float targetWeight = ((float)  tolua_tonumber(tolua_S,3,0));
  float fadeTime = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'FadeOthers'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->FadeOthers(name,targetWeight,fadeTime);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'FadeOthers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLayer of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetLayer00
static int tolua_GraphicsLuaAPI_AnimationController_SetLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  unsigned char layer = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLayer'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetLayer(name,layer);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetStartBone of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetStartBone00
static int tolua_GraphicsLuaAPI_AnimationController_SetStartBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  const String startBoneName = ((const String)  tolua_tourho3dstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetStartBone'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetStartBone(name,startBoneName);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetStartBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTime of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetTime00
static int tolua_GraphicsLuaAPI_AnimationController_SetTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTime'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetTime(name,time);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWeight of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetWeight00
static int tolua_GraphicsLuaAPI_AnimationController_SetWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWeight'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetWeight(name,weight);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLooped of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetLooped00
static int tolua_GraphicsLuaAPI_AnimationController_SetLooped00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  bool enable = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLooped'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetLooped(name,enable);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLooped'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBlendMode of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetBlendMode00
static int tolua_GraphicsLuaAPI_AnimationController_SetBlendMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  AnimationBlendMode mode = ((AnimationBlendMode) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBlendMode'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetBlendMode(name,mode);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBlendMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSpeed of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetSpeed00
static int tolua_GraphicsLuaAPI_AnimationController_SetSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSpeed'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSpeed(name,speed);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAutoFade of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetAutoFade00
static int tolua_GraphicsLuaAPI_AnimationController_SetAutoFade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float fadeOutTime = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAutoFade'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetAutoFade(name,fadeOutTime);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAutoFade'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRemoveOnCompletion of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_SetRemoveOnCompletion00
static int tolua_GraphicsLuaAPI_AnimationController_SetRemoveOnCompletion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationController* self = (AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  bool removeOnCompletion = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRemoveOnCompletion'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetRemoveOnCompletion(name,removeOnCompletion);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRemoveOnCompletion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsPlaying of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_IsPlaying00
static int tolua_GraphicsLuaAPI_AnimationController_IsPlaying00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsPlaying'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsPlaying(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsPlaying'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsPlaying of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_IsPlaying01
static int tolua_GraphicsLuaAPI_AnimationController_IsPlaying01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  unsigned char layer = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsPlaying'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsPlaying(layer);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationController_IsPlaying00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsFadingIn of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_IsFadingIn00
static int tolua_GraphicsLuaAPI_AnimationController_IsFadingIn00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsFadingIn'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsFadingIn(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsFadingIn'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsFadingOut of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_IsFadingOut00
static int tolua_GraphicsLuaAPI_AnimationController_IsFadingOut00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsFadingOut'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsFadingOut(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsFadingOut'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsAtEnd of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_IsAtEnd00
static int tolua_GraphicsLuaAPI_AnimationController_IsAtEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsAtEnd'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsAtEnd(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsAtEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLayer of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetLayer00
static int tolua_GraphicsLuaAPI_AnimationController_GetLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLayer'", NULL);
#endif
 {
  unsigned char tolua_ret = (unsigned char)  self->GetLayer(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStartBone of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetStartBone00
static int tolua_GraphicsLuaAPI_AnimationController_GetStartBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStartBone'", NULL);
#endif
 {
  Bone* tolua_ret = (Bone*)  self->GetStartBone(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStartBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStartBoneName of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetStartBoneName00
static int tolua_GraphicsLuaAPI_AnimationController_GetStartBoneName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStartBoneName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetStartBoneName(name);
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStartBoneName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTime of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetTime00
static int tolua_GraphicsLuaAPI_AnimationController_GetTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTime'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetTime(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWeight of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetWeight00
static int tolua_GraphicsLuaAPI_AnimationController_GetWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetWeight(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsLooped of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_IsLooped00
static int tolua_GraphicsLuaAPI_AnimationController_IsLooped00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsLooped'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsLooped(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsLooped'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBlendMode of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetBlendMode00
static int tolua_GraphicsLuaAPI_AnimationController_GetBlendMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBlendMode'", NULL);
#endif
 {
  AnimationBlendMode tolua_ret = (AnimationBlendMode)  self->GetBlendMode(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBlendMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLength of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetLength00
static int tolua_GraphicsLuaAPI_AnimationController_GetLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLength'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLength(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSpeed of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetSpeed00
static int tolua_GraphicsLuaAPI_AnimationController_GetSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSpeed'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetSpeed(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFadeTarget of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetFadeTarget00
static int tolua_GraphicsLuaAPI_AnimationController_GetFadeTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFadeTarget'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFadeTarget(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFadeTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFadeTime of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetFadeTime00
static int tolua_GraphicsLuaAPI_AnimationController_GetFadeTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFadeTime'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFadeTime(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFadeTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAutoFade of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetAutoFade00
static int tolua_GraphicsLuaAPI_AnimationController_GetAutoFade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAutoFade'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAutoFade(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAutoFade'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRemoveOnCompletion of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetRemoveOnCompletion00
static int tolua_GraphicsLuaAPI_AnimationController_GetRemoveOnCompletion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRemoveOnCompletion'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetRemoveOnCompletion(name);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRemoveOnCompletion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationState of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetAnimationState00
static int tolua_GraphicsLuaAPI_AnimationController_GetAnimationState00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->GetAnimationState(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationState'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationState of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetAnimationState01
static int tolua_GraphicsLuaAPI_AnimationController_GetAnimationState01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationState'", NULL);
#endif
 {
  AnimationState* tolua_ret = (AnimationState*)  self->GetAnimationState(nameHash);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationController_GetAnimationState00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AnimationControllerGetAnimation of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetAnimation00
static int tolua_GraphicsLuaAPI_AnimationController_GetAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AnimationControllerGetAnimation'", NULL);
#endif
 {
  tolua_outside  const AnimationControl* tolua_ret = (tolua_outside  const AnimationControl*)  AnimationControllerGetAnimation(self,index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"const AnimationControl");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AnimationControllerGetNumAnimations of class  AnimationController */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationController_GetNumAnimations00
static int tolua_GraphicsLuaAPI_AnimationController_GetNumAnimations00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationController",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationController* self = (const AnimationController*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AnimationControllerGetNumAnimations'", NULL);
#endif
 {
  tolua_outside unsigned tolua_ret = (tolua_outside unsigned)  AnimationControllerGetNumAnimations(self);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumAnimations'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_new00
static int tolua_GraphicsLuaAPI_AnimationState_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* model = ((AnimatedModel*)  tolua_tousertype(tolua_S,2,0));
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,3,0));
 {
  AnimationState* tolua_ret = (AnimationState*)  Mtolua_new((AnimationState)(model,animation));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_new00_local
static int tolua_GraphicsLuaAPI_AnimationState_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"AnimatedModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimatedModel* model = ((AnimatedModel*)  tolua_tousertype(tolua_S,2,0));
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,3,0));
 {
  AnimationState* tolua_ret = (AnimationState*)  Mtolua_new((AnimationState)(model,animation));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_new01
static int tolua_GraphicsLuaAPI_AnimationState_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Node",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Node* node = ((Node*)  tolua_tousertype(tolua_S,2,0));
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,3,0));
 {
  AnimationState* tolua_ret = (AnimationState*)  Mtolua_new((AnimationState)(node,animation));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_new01_local
static int tolua_GraphicsLuaAPI_AnimationState_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Node",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Animation",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Node* node = ((Node*)  tolua_tousertype(tolua_S,2,0));
  Animation* animation = ((Animation*)  tolua_tousertype(tolua_S,3,0));
 {
  AnimationState* tolua_ret = (AnimationState*)  Mtolua_new((AnimationState)(node,animation));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"AnimationState");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_delete00
static int tolua_GraphicsLuaAPI_AnimationState_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetStartBone of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetStartBone00
static int tolua_GraphicsLuaAPI_AnimationState_SetStartBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Bone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  Bone* bone = ((Bone*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetStartBone'", NULL);
#endif
 {
  self->SetStartBone(bone);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetStartBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLooped of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetLooped00
static int tolua_GraphicsLuaAPI_AnimationState_SetLooped00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  bool looped = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLooped'", NULL);
#endif
 {
  self->SetLooped(looped);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLooped'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetWeight00
static int tolua_GraphicsLuaAPI_AnimationState_SetWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  float weight = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWeight'", NULL);
#endif
 {
  self->SetWeight(weight);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTime of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetTime00
static int tolua_GraphicsLuaAPI_AnimationState_SetTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTime'", NULL);
#endif
 {
  self->SetTime(time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBoneWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight00
static int tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
  bool recursive = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBoneWeight'", NULL);
#endif
 {
  self->SetBoneWeight(name,weight,recursive);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBoneWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBoneWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight01
static int tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
  bool recursive = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBoneWeight'", NULL);
#endif
 {
  self->SetBoneWeight(nameHash,weight,recursive);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBoneWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight02
static int tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  float weight = ((float)  tolua_tonumber(tolua_S,3,0));
  bool recursive = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBoneWeight'", NULL);
#endif
 {
  self->SetBoneWeight(index,weight,recursive);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_AddWeight00
static int tolua_GraphicsLuaAPI_AnimationState_AddWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  float delta = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddWeight'", NULL);
#endif
 {
  self->AddWeight(delta);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTime of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_AddTime00
static int tolua_GraphicsLuaAPI_AnimationState_AddTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  float delta = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTime'", NULL);
#endif
 {
  self->AddTime(delta);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLayer of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetLayer00
static int tolua_GraphicsLuaAPI_AnimationState_SetLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  unsigned char layer = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLayer'", NULL);
#endif
 {
  self->SetLayer(layer);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBlendMode of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_SetBlendMode00
static int tolua_GraphicsLuaAPI_AnimationState_SetBlendMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
  AnimationBlendMode mode = ((AnimationBlendMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBlendMode'", NULL);
#endif
 {
  self->SetBlendMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBlendMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimation of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetAnimation00
static int tolua_GraphicsLuaAPI_AnimationState_GetAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimation'", NULL);
#endif
 {
  Animation* tolua_ret = (Animation*)  self->GetAnimation();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Animation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStartBone of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetStartBone00
static int tolua_GraphicsLuaAPI_AnimationState_GetStartBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStartBone'", NULL);
#endif
 {
  Bone* tolua_ret = (Bone*)  self->GetStartBone();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStartBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoneWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight00
static int tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoneWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetBoneWeight(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBoneWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoneWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight01
static int tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoneWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetBoneWeight(nameHash);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoneWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight02
static int tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoneWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetBoneWeight(index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrackIndex of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex00
static int tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrackIndex'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetTrackIndex(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTrackIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrackIndex of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex01
static int tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrackIndex'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetTrackIndex(nameHash);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsEnabled of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_IsEnabled00
static int tolua_GraphicsLuaAPI_AnimationState_IsEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsEnabled'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsEnabled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsLooped of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_IsLooped00
static int tolua_GraphicsLuaAPI_AnimationState_IsLooped00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsLooped'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsLooped();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsLooped'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWeight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetWeight00
static int tolua_GraphicsLuaAPI_AnimationState_GetWeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetWeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTime of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetTime00
static int tolua_GraphicsLuaAPI_AnimationState_GetTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTime'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLength of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetLength00
static int tolua_GraphicsLuaAPI_AnimationState_GetLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLength'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLength();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLayer of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetLayer00
static int tolua_GraphicsLuaAPI_AnimationState_GetLayer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLayer'", NULL);
#endif
 {
  unsigned char tolua_ret = (unsigned char)  self->GetLayer();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLayer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBlendMode of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_AnimationState_GetBlendMode00
static int tolua_GraphicsLuaAPI_AnimationState_GetBlendMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const AnimationState",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const AnimationState* self = (const AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBlendMode'", NULL);
#endif
 {
  AnimationBlendMode tolua_ret = (AnimationBlendMode)  self->GetBlendMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBlendMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animation of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_animation_ptr
static int tolua_get_AnimationState_animation_ptr(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animation'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetAnimation(),"Animation");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: startBone of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_startBone_ptr
static int tolua_get_AnimationState_startBone_ptr(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'startBone'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetStartBone(),"Bone");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: startBone of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_set_AnimationState_startBone_ptr
static int tolua_set_AnimationState_startBone_ptr(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'startBone'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Bone",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetStartBone(((Bone*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: enabled of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_enabled
static int tolua_get_AnimationState_enabled(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsEnabled());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: looped of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_looped
static int tolua_get_AnimationState_looped(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'looped'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsLooped());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: looped of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_set_AnimationState_looped
static int tolua_set_AnimationState_looped(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'looped'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLooped(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: weight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_weight
static int tolua_get_AnimationState_weight(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'weight'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetWeight());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: weight of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_set_AnimationState_weight
static int tolua_set_AnimationState_weight(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'weight'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetWeight(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: time of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_time
static int tolua_get_AnimationState_time(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTime());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: time of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_set_AnimationState_time
static int tolua_set_AnimationState_time(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTime(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: length of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_length
static int tolua_get_AnimationState_length(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'length'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLength());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: layer of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_unsigned_layer
static int tolua_get_AnimationState_unsigned_layer(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'layer'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLayer());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: layer of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_set_AnimationState_unsigned_layer
static int tolua_set_AnimationState_unsigned_layer(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'layer'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLayer((( unsigned char)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: blendMode of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_get_AnimationState_blendMode
static int tolua_get_AnimationState_blendMode(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blendMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetBlendMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: blendMode of class  AnimationState */
#ifndef TOLUA_DISABLE_tolua_set_AnimationState_blendMode
static int tolua_set_AnimationState_blendMode(lua_State* tolua_S)
{
  AnimationState* self = (AnimationState*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blendMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBlendMode(((AnimationBlendMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: position_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_get_Billboard_position
static int tolua_get_Billboard_position(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->position_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: position_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_set_Billboard_position
static int tolua_set_Billboard_position(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->position_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: size_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_get_Billboard_size
static int tolua_get_Billboard_size(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'size_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->size_,"Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: size_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_set_Billboard_size
static int tolua_set_Billboard_size(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'size_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->size_ = *((Vector2*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: uv_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_get_Billboard_uv
static int tolua_get_Billboard_uv(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'uv_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->uv_,"Rect");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: uv_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_set_Billboard_uv
static int tolua_set_Billboard_uv(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'uv_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Rect",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->uv_ = *((Rect*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: color_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_get_Billboard_color
static int tolua_get_Billboard_color(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->color_,"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: color_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_set_Billboard_color
static int tolua_set_Billboard_color(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->color_ = *((Color*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: rotation_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_get_Billboard_rotation
static int tolua_get_Billboard_rotation(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rotation_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->rotation_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: rotation_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_set_Billboard_rotation
static int tolua_set_Billboard_rotation(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rotation_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->rotation_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: enabled_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_get_Billboard_enabled
static int tolua_get_Billboard_enabled(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->enabled_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: enabled_ of class  Billboard */
#ifndef TOLUA_DISABLE_tolua_set_Billboard_enabled
static int tolua_set_Billboard_enabled(lua_State* tolua_S)
{
  Billboard* self = (Billboard*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->enabled_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetMaterial00
static int tolua_GraphicsLuaAPI_BillboardSet_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumBillboards of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetNumBillboards00
static int tolua_GraphicsLuaAPI_BillboardSet_SetNumBillboards00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumBillboards'", NULL);
#endif
 {
  self->SetNumBillboards(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumBillboards'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRelative of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetRelative00
static int tolua_GraphicsLuaAPI_BillboardSet_SetRelative00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRelative'", NULL);
#endif
 {
  self->SetRelative(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRelative'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetScaled of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetScaled00
static int tolua_GraphicsLuaAPI_BillboardSet_SetScaled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetScaled'", NULL);
#endif
 {
  self->SetScaled(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetScaled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSorted of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetSorted00
static int tolua_GraphicsLuaAPI_BillboardSet_SetSorted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSorted'", NULL);
#endif
 {
  self->SetSorted(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSorted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFixedScreenSize of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetFixedScreenSize00
static int tolua_GraphicsLuaAPI_BillboardSet_SetFixedScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFixedScreenSize'", NULL);
#endif
 {
  self->SetFixedScreenSize(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFixedScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFaceCameraMode of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetFaceCameraMode00
static int tolua_GraphicsLuaAPI_BillboardSet_SetFaceCameraMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  FaceCameraMode mode = ((FaceCameraMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFaceCameraMode'", NULL);
#endif
 {
  self->SetFaceCameraMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFaceCameraMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinAngle of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetMinAngle00
static int tolua_GraphicsLuaAPI_BillboardSet_SetMinAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  float angle = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinAngle'", NULL);
#endif
 {
  self->SetMinAngle(angle);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAnimationLodBias of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_SetAnimationLodBias00
static int tolua_GraphicsLuaAPI_BillboardSet_SetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  float bias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAnimationLodBias'", NULL);
#endif
 {
  self->SetAnimationLodBias(bias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Commit of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_Commit00
static int tolua_GraphicsLuaAPI_BillboardSet_Commit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Commit'", NULL);
#endif
 {
  self->Commit();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Commit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_GetMaterial00
static int tolua_GraphicsLuaAPI_BillboardSet_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumBillboards of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_GetNumBillboards00
static int tolua_GraphicsLuaAPI_BillboardSet_GetNumBillboards00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumBillboards'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumBillboards();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumBillboards'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBillboard of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_GetBillboard00
static int tolua_GraphicsLuaAPI_BillboardSet_GetBillboard00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BillboardSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBillboard'", NULL);
#endif
 {
  Billboard* tolua_ret = (Billboard*)  self->GetBillboard(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Billboard");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBillboard'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsRelative of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_IsRelative00
static int tolua_GraphicsLuaAPI_BillboardSet_IsRelative00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsRelative'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsRelative();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsRelative'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsScaled of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_IsScaled00
static int tolua_GraphicsLuaAPI_BillboardSet_IsScaled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsScaled'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsScaled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsScaled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsSorted of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_IsSorted00
static int tolua_GraphicsLuaAPI_BillboardSet_IsSorted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsSorted'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsSorted();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsSorted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsFixedScreenSize of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_IsFixedScreenSize00
static int tolua_GraphicsLuaAPI_BillboardSet_IsFixedScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsFixedScreenSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsFixedScreenSize();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsFixedScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFaceCameraMode of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_GetFaceCameraMode00
static int tolua_GraphicsLuaAPI_BillboardSet_GetFaceCameraMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFaceCameraMode'", NULL);
#endif
 {
  FaceCameraMode tolua_ret = (FaceCameraMode)  self->GetFaceCameraMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFaceCameraMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinAngle of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_GetMinAngle00
static int tolua_GraphicsLuaAPI_BillboardSet_GetMinAngle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinAngle'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMinAngle();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinAngle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationLodBias of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BillboardSet_GetAnimationLodBias00
static int tolua_GraphicsLuaAPI_BillboardSet_GetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const BillboardSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const BillboardSet* self = (const BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAnimationLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_material_ptr
static int tolua_get_BillboardSet_material_ptr(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_material_ptr
static int tolua_set_BillboardSet_material_ptr(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numBillboards of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_numBillboards
static int tolua_get_BillboardSet_numBillboards(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numBillboards'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumBillboards());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numBillboards of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_numBillboards
static int tolua_set_BillboardSet_numBillboards(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numBillboards'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumBillboards(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: relative of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_relative
static int tolua_get_BillboardSet_relative(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'relative'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsRelative());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: relative of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_relative
static int tolua_set_BillboardSet_relative(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'relative'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRelative(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: scaled of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_scaled
static int tolua_get_BillboardSet_scaled(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scaled'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsScaled());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: scaled of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_scaled
static int tolua_set_BillboardSet_scaled(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scaled'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetScaled(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sorted of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_sorted
static int tolua_get_BillboardSet_sorted(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sorted'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsSorted());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sorted of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_sorted
static int tolua_set_BillboardSet_sorted(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sorted'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSorted(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fixedScreenSize of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_fixedScreenSize
static int tolua_get_BillboardSet_fixedScreenSize(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fixedScreenSize'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsFixedScreenSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fixedScreenSize of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_fixedScreenSize
static int tolua_set_BillboardSet_fixedScreenSize(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fixedScreenSize'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFixedScreenSize(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: faceCameraMode of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_faceCameraMode
static int tolua_get_BillboardSet_faceCameraMode(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'faceCameraMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFaceCameraMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: faceCameraMode of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_faceCameraMode
static int tolua_set_BillboardSet_faceCameraMode(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'faceCameraMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFaceCameraMode(((FaceCameraMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minAngle of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_minAngle
static int tolua_get_BillboardSet_minAngle(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minAngle'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinAngle());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minAngle of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_minAngle
static int tolua_set_BillboardSet_minAngle(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minAngle'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinAngle(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animationLodBias of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_get_BillboardSet_animationLodBias
static int tolua_get_BillboardSet_animationLodBias(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAnimationLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: animationLodBias of class  BillboardSet */
#ifndef TOLUA_DISABLE_tolua_set_BillboardSet_animationLodBias
static int tolua_set_BillboardSet_animationLodBias(lua_State* tolua_S)
{
  BillboardSet* self = (BillboardSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAnimationLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VO_NONE */
#ifndef TOLUA_DISABLE_tolua_get_VO_NONE
static int tolua_get_VO_NONE(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)VO_NONE);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VO_LOW_MATERIAL_QUALITY */
#ifndef TOLUA_DISABLE_tolua_get_VO_LOW_MATERIAL_QUALITY
static int tolua_get_VO_LOW_MATERIAL_QUALITY(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)VO_LOW_MATERIAL_QUALITY);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VO_DISABLE_SHADOWS */
#ifndef TOLUA_DISABLE_tolua_get_VO_DISABLE_SHADOWS
static int tolua_get_VO_DISABLE_SHADOWS(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)VO_DISABLE_SHADOWS);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VO_DISABLE_OCCLUSION */
#ifndef TOLUA_DISABLE_tolua_get_VO_DISABLE_OCCLUSION
static int tolua_get_VO_DISABLE_OCCLUSION(lua_State* tolua_S)
{
 tolua_pushnumber(tolua_S,(lua_Number)VO_DISABLE_OCCLUSION);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNearClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetNearClip00
static int tolua_GraphicsLuaAPI_Camera_SetNearClip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float nearClip = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNearClip'", NULL);
#endif
 {
  self->SetNearClip(nearClip);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNearClip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFarClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetFarClip00
static int tolua_GraphicsLuaAPI_Camera_SetFarClip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float farClip = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFarClip'", NULL);
#endif
 {
  self->SetFarClip(farClip);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFarClip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFov of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetFov00
static int tolua_GraphicsLuaAPI_Camera_SetFov00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float fov = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFov'", NULL);
#endif
 {
  self->SetFov(fov);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFov'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOrthoSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetOrthoSize00
static int tolua_GraphicsLuaAPI_Camera_SetOrthoSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float orthoSize = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOrthoSize'", NULL);
#endif
 {
  self->SetOrthoSize(orthoSize);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOrthoSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOrthoSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetOrthoSize01
static int tolua_GraphicsLuaAPI_Camera_SetOrthoSize01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* orthoSize = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOrthoSize'", NULL);
#endif
 {
  self->SetOrthoSize(*orthoSize);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Camera_SetOrthoSize00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetAspectRatio00
static int tolua_GraphicsLuaAPI_Camera_SetAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float aspectRatio = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAspectRatio'", NULL);
#endif
 {
  self->SetAspectRatio(aspectRatio);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFillMode of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetFillMode00
static int tolua_GraphicsLuaAPI_Camera_SetFillMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  FillMode mode = ((FillMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFillMode'", NULL);
#endif
 {
  self->SetFillMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFillMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetZoom of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetZoom00
static int tolua_GraphicsLuaAPI_Camera_SetZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float zoom = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetZoom'", NULL);
#endif
 {
  self->SetZoom(zoom);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLodBias of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetLodBias00
static int tolua_GraphicsLuaAPI_Camera_SetLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  float bias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLodBias'", NULL);
#endif
 {
  self->SetLodBias(bias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetViewMask of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetViewMask00
static int tolua_GraphicsLuaAPI_Camera_SetViewMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetViewMask'", NULL);
#endif
 {
  self->SetViewMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetViewMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetViewOverrideFlags of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetViewOverrideFlags00
static int tolua_GraphicsLuaAPI_Camera_SetViewOverrideFlags00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"ViewOverride",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  ViewOverride flags = *((ViewOverride*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetViewOverrideFlags'", NULL);
#endif
 {
  self->SetViewOverrideFlags(flags);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetViewOverrideFlags'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOrthographic of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetOrthographic00
static int tolua_GraphicsLuaAPI_Camera_SetOrthographic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOrthographic'", NULL);
#endif
 {
  self->SetOrthographic(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOrthographic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAutoAspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetAutoAspectRatio00
static int tolua_GraphicsLuaAPI_Camera_SetAutoAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAutoAspectRatio'", NULL);
#endif
 {
  self->SetAutoAspectRatio(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAutoAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetProjectionOffset of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetProjectionOffset00
static int tolua_GraphicsLuaAPI_Camera_SetProjectionOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* offset = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetProjectionOffset'", NULL);
#endif
 {
  self->SetProjectionOffset(*offset);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetProjectionOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUseReflection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetUseReflection00
static int tolua_GraphicsLuaAPI_Camera_SetUseReflection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUseReflection'", NULL);
#endif
 {
  self->SetUseReflection(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUseReflection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetReflectionPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetReflectionPlane00
static int tolua_GraphicsLuaAPI_Camera_SetReflectionPlane00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Plane",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  const Plane* reflectionPlane = ((const Plane*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetReflectionPlane'", NULL);
#endif
 {
  self->SetReflectionPlane(*reflectionPlane);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetReflectionPlane'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUseClipping of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetUseClipping00
static int tolua_GraphicsLuaAPI_Camera_SetUseClipping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUseClipping'", NULL);
#endif
 {
  self->SetUseClipping(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUseClipping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetClipPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetClipPlane00
static int tolua_GraphicsLuaAPI_Camera_SetClipPlane00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Plane",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  const Plane* clipPlane = ((const Plane*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetClipPlane'", NULL);
#endif
 {
  self->SetClipPlane(*clipPlane);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetClipPlane'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetProjection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_SetProjection00
static int tolua_GraphicsLuaAPI_Camera_SetProjection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Matrix4",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
  const Matrix4* projection = ((const Matrix4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetProjection'", NULL);
#endif
 {
  self->SetProjection(*projection);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetProjection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFarClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetFarClip00
static int tolua_GraphicsLuaAPI_Camera_GetFarClip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFarClip'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFarClip();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFarClip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNearClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetNearClip00
static int tolua_GraphicsLuaAPI_Camera_GetNearClip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNearClip'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetNearClip();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNearClip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFov of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetFov00
static int tolua_GraphicsLuaAPI_Camera_GetFov00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFov'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFov();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFov'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOrthoSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetOrthoSize00
static int tolua_GraphicsLuaAPI_Camera_GetOrthoSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOrthoSize'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetOrthoSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOrthoSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetAspectRatio00
static int tolua_GraphicsLuaAPI_Camera_GetAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAspectRatio'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAspectRatio();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetZoom of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetZoom00
static int tolua_GraphicsLuaAPI_Camera_GetZoom00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetZoom'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetZoom();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetZoom'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLodBias of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetLodBias00
static int tolua_GraphicsLuaAPI_Camera_GetLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewMask of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetViewMask00
static int tolua_GraphicsLuaAPI_Camera_GetViewMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetViewMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewOverrideFlags of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetViewOverrideFlags00
static int tolua_GraphicsLuaAPI_Camera_GetViewOverrideFlags00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewOverrideFlags'", NULL);
#endif
 {
  ViewOverride tolua_ret = (ViewOverride)  self->GetViewOverrideFlags();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((ViewOverride)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"ViewOverride");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(ViewOverride));
  tolua_pushusertype(tolua_S,tolua_obj,"ViewOverride");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewOverrideFlags'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFillMode of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetFillMode00
static int tolua_GraphicsLuaAPI_Camera_GetFillMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFillMode'", NULL);
#endif
 {
  FillMode tolua_ret = (FillMode)  self->GetFillMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFillMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOrthographic of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_IsOrthographic00
static int tolua_GraphicsLuaAPI_Camera_IsOrthographic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOrthographic'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsOrthographic();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOrthographic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAutoAspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetAutoAspectRatio00
static int tolua_GraphicsLuaAPI_Camera_GetAutoAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAutoAspectRatio'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetAutoAspectRatio();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAutoAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFrustum of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetFrustum00
static int tolua_GraphicsLuaAPI_Camera_GetFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFrustum'", NULL);
#endif
 {
  const Frustum& tolua_ret = (const Frustum&)  self->GetFrustum();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Frustum");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetProjection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetProjection00
static int tolua_GraphicsLuaAPI_Camera_GetProjection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetProjection'", NULL);
#endif
 {
  Matrix4 tolua_ret = (Matrix4)  self->GetProjection();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Matrix4)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Matrix4));
  tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetProjection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetGPUProjection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetGPUProjection00
static int tolua_GraphicsLuaAPI_Camera_GetGPUProjection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetGPUProjection'", NULL);
#endif
 {
  Matrix4 tolua_ret = (Matrix4)  self->GetGPUProjection();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Matrix4)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Matrix4));
  tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGPUProjection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetView of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetView00
static int tolua_GraphicsLuaAPI_Camera_GetView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetView'", NULL);
#endif
 {
  const Matrix3x4& tolua_ret = (const Matrix3x4&)  self->GetView();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Matrix3x4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFrustumSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetFrustumSize00
static int tolua_GraphicsLuaAPI_Camera_GetFrustumSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  Vector3* near = ((Vector3*)  tolua_tousertype(tolua_S,2,0));
  Vector3* far = ((Vector3*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFrustumSize'", NULL);
#endif
 {
  self->GetFrustumSize(*near,*far);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFrustumSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHalfViewSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetHalfViewSize00
static int tolua_GraphicsLuaAPI_Camera_GetHalfViewSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHalfViewSize'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetHalfViewSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHalfViewSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSplitFrustum of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetSplitFrustum00
static int tolua_GraphicsLuaAPI_Camera_GetSplitFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  float nearClip = ((float)  tolua_tonumber(tolua_S,2,0));
  float farClip = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSplitFrustum'", NULL);
#endif
 {
  Frustum tolua_ret = (Frustum)  self->GetSplitFrustum(nearClip,farClip);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Frustum)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Frustum));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSplitFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewSpaceFrustum of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetViewSpaceFrustum00
static int tolua_GraphicsLuaAPI_Camera_GetViewSpaceFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewSpaceFrustum'", NULL);
#endif
 {
  Frustum tolua_ret = (Frustum)  self->GetViewSpaceFrustum();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Frustum)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Frustum));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewSpaceFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewSpaceSplitFrustum of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetViewSpaceSplitFrustum00
static int tolua_GraphicsLuaAPI_Camera_GetViewSpaceSplitFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  float nearClip = ((float)  tolua_tonumber(tolua_S,2,0));
  float farClip = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewSpaceSplitFrustum'", NULL);
#endif
 {
  Frustum tolua_ret = (Frustum)  self->GetViewSpaceSplitFrustum(nearClip,farClip);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Frustum)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Frustum));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewSpaceSplitFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetScreenRay of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetScreenRay00
static int tolua_GraphicsLuaAPI_Camera_GetScreenRay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  float x = ((float)  tolua_tonumber(tolua_S,2,0));
  float y = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetScreenRay'", NULL);
#endif
 {
  Ray tolua_ret = (Ray)  self->GetScreenRay(x,y);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Ray)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Ray");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Ray));
  tolua_pushusertype(tolua_S,tolua_obj,"Ray");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetScreenRay'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WorldToScreenPoint of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_WorldToScreenPoint00
static int tolua_GraphicsLuaAPI_Camera_WorldToScreenPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPos = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WorldToScreenPoint'", NULL);
#endif
 {
  Vector2 tolua_ret = (Vector2)  self->WorldToScreenPoint(*worldPos);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector2));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WorldToScreenPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ScreenToWorldPoint of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_ScreenToWorldPoint00
static int tolua_GraphicsLuaAPI_Camera_ScreenToWorldPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* screenPos = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScreenToWorldPoint'", NULL);
#endif
 {
  Vector3 tolua_ret = (Vector3)  self->ScreenToWorldPoint(*screenPos);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector3)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector3));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScreenToWorldPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetProjectionOffset of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetProjectionOffset00
static int tolua_GraphicsLuaAPI_Camera_GetProjectionOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetProjectionOffset'", NULL);
#endif
 {
  const Vector2& tolua_ret = (const Vector2&)  self->GetProjectionOffset();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector2");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetProjectionOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUseReflection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetUseReflection00
static int tolua_GraphicsLuaAPI_Camera_GetUseReflection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUseReflection'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetUseReflection();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUseReflection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetReflectionPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetReflectionPlane00
static int tolua_GraphicsLuaAPI_Camera_GetReflectionPlane00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetReflectionPlane'", NULL);
#endif
 {
  const Plane& tolua_ret = (const Plane&)  self->GetReflectionPlane();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Plane");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetReflectionPlane'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUseClipping of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetUseClipping00
static int tolua_GraphicsLuaAPI_Camera_GetUseClipping00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUseClipping'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetUseClipping();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUseClipping'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetClipPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetClipPlane00
static int tolua_GraphicsLuaAPI_Camera_GetClipPlane00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetClipPlane'", NULL);
#endif
 {
  const Plane& tolua_ret = (const Plane&)  self->GetClipPlane();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Plane");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetClipPlane'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDistance of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetDistance00
static int tolua_GraphicsLuaAPI_Camera_GetDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPos = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetDistance(*worldPos);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDistanceSquared of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetDistanceSquared00
static int tolua_GraphicsLuaAPI_Camera_GetDistanceSquared00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPos = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDistanceSquared'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetDistanceSquared(*worldPos);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDistanceSquared'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLodDistance of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetLodDistance00
static int tolua_GraphicsLuaAPI_Camera_GetLodDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
  float scale = ((float)  tolua_tonumber(tolua_S,3,0));
  float bias = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLodDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLodDistance(distance,scale,bias);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLodDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsProjectionValid of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_IsProjectionValid00
static int tolua_GraphicsLuaAPI_Camera_IsProjectionValid00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsProjectionValid'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsProjectionValid();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsProjectionValid'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEffectiveWorldTransform of class  Camera */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Camera_GetEffectiveWorldTransform00
static int tolua_GraphicsLuaAPI_Camera_GetEffectiveWorldTransform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Camera* self = (const Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEffectiveWorldTransform'", NULL);
#endif
 {
  Matrix3x4 tolua_ret = (Matrix3x4)  self->GetEffectiveWorldTransform();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Matrix3x4)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Matrix3x4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Matrix3x4));
  tolua_pushusertype(tolua_S,tolua_obj,"Matrix3x4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEffectiveWorldTransform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: farClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_farClip
static int tolua_get_Camera_farClip(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'farClip'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFarClip());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: farClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_farClip
static int tolua_set_Camera_farClip(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'farClip'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFarClip(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: nearClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_nearClip
static int tolua_get_Camera_nearClip(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nearClip'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNearClip());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: nearClip of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_nearClip
static int tolua_set_Camera_nearClip(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nearClip'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNearClip(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fov of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_fov
static int tolua_get_Camera_fov(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fov'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFov());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fov of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_fov
static int tolua_set_Camera_fov(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fov'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFov(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: orthoSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_orthoSize
static int tolua_get_Camera_orthoSize(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'orthoSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetOrthoSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: orthoSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_orthoSize
static int tolua_set_Camera_orthoSize(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'orthoSize'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOrthoSize(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: aspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_aspectRatio
static int tolua_get_Camera_aspectRatio(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'aspectRatio'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAspectRatio());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: aspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_aspectRatio
static int tolua_set_Camera_aspectRatio(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'aspectRatio'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAspectRatio(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: zoom of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_zoom
static int tolua_get_Camera_zoom(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoom'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetZoom());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: zoom of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_zoom
static int tolua_set_Camera_zoom(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoom'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetZoom(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lodBias of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_lodBias
static int tolua_get_Camera_lodBias(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lodBias of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_lodBias
static int tolua_set_Camera_lodBias(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: viewMask of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_viewMask
static int tolua_get_Camera_viewMask(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetViewMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: viewMask of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_viewMask
static int tolua_set_Camera_viewMask(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetViewMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: viewOverrideFlags of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_viewOverrideFlags
static int tolua_get_Camera_viewOverrideFlags(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewOverrideFlags'",NULL);
#endif
 ViewOverride tolua_ret = (ViewOverride)self->GetViewOverrideFlags();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((ViewOverride)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"ViewOverride");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(ViewOverride));
 tolua_pushusertype(tolua_S,tolua_obj,"ViewOverride");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: viewOverrideFlags of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_viewOverrideFlags
static int tolua_set_Camera_viewOverrideFlags(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewOverrideFlags'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"ViewOverride",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetViewOverrideFlags(*((ViewOverride*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fillMode of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_fillMode
static int tolua_get_Camera_fillMode(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fillMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFillMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fillMode of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_fillMode
static int tolua_set_Camera_fillMode(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fillMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFillMode(((FillMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: orthographic of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_orthographic
static int tolua_get_Camera_orthographic(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'orthographic'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsOrthographic());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: orthographic of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_orthographic
static int tolua_set_Camera_orthographic(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'orthographic'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOrthographic(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: autoAspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_autoAspectRatio
static int tolua_get_Camera_autoAspectRatio(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoAspectRatio'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetAutoAspectRatio());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: autoAspectRatio of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_autoAspectRatio
static int tolua_set_Camera_autoAspectRatio(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoAspectRatio'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAutoAspectRatio(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: frustum of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_frustum_ref
static int tolua_get_Camera_frustum_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'frustum'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetFrustum(),"Frustum");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: projection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_projection
static int tolua_get_Camera_projection(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'projection'",NULL);
#endif
 Matrix4 tolua_ret = (Matrix4)self->GetProjection();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Matrix4)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Matrix4));
 tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: GPUProjection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_GPUProjection
static int tolua_get_Camera_GPUProjection(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'GPUProjection'",NULL);
#endif
 Matrix4 tolua_ret = (Matrix4)self->GetGPUProjection();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Matrix4)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Matrix4));
 tolua_pushusertype(tolua_S,tolua_obj,"Matrix4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: view of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_view_ref
static int tolua_get_Camera_view_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'view'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetView(),"Matrix3x4");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: halfViewSize of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_halfViewSize
static int tolua_get_Camera_halfViewSize(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'halfViewSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetHalfViewSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: viewSpaceFrustum of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_viewSpaceFrustum
static int tolua_get_Camera_viewSpaceFrustum(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewSpaceFrustum'",NULL);
#endif
 Frustum tolua_ret = (Frustum)self->GetViewSpaceFrustum();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Frustum)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Frustum));
 tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: projectionOffset of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_projectionOffset_ref
static int tolua_get_Camera_projectionOffset_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'projectionOffset'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetProjectionOffset(),"Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: projectionOffset of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_projectionOffset_ref
static int tolua_set_Camera_projectionOffset_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'projectionOffset'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetProjectionOffset((*(Vector2*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: useReflection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_useReflection
static int tolua_get_Camera_useReflection(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useReflection'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetUseReflection());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: useReflection of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_useReflection
static int tolua_set_Camera_useReflection(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useReflection'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUseReflection(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: reflectionPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_reflectionPlane_ref
static int tolua_get_Camera_reflectionPlane_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'reflectionPlane'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetReflectionPlane(),"Plane");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: reflectionPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_reflectionPlane_ref
static int tolua_set_Camera_reflectionPlane_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'reflectionPlane'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Plane",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetReflectionPlane((*(Plane*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: useClipping of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_useClipping
static int tolua_get_Camera_useClipping(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useClipping'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetUseClipping());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: useClipping of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_useClipping
static int tolua_set_Camera_useClipping(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useClipping'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUseClipping(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: clipPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_clipPlane_ref
static int tolua_get_Camera_clipPlane_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clipPlane'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetClipPlane(),"Plane");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: clipPlane of class  Camera */
#ifndef TOLUA_DISABLE_tolua_set_Camera_clipPlane_ref
static int tolua_set_Camera_clipPlane_ref(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clipPlane'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Plane",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetClipPlane((*(Plane*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: projectionValid of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_projectionValid
static int tolua_get_Camera_projectionValid(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'projectionValid'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsProjectionValid());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: effectiveWorldTransform of class  Camera */
#ifndef TOLUA_DISABLE_tolua_get_Camera_effectiveWorldTransform
static int tolua_get_Camera_effectiveWorldTransform(lua_State* tolua_S)
{
  Camera* self = (Camera*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'effectiveWorldTransform'",NULL);
#endif
 Matrix3x4 tolua_ret = (Matrix3x4)self->GetEffectiveWorldTransform();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Matrix3x4)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Matrix3x4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Matrix3x4));
 tolua_pushusertype(tolua_S,tolua_obj,"Matrix3x4");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: position_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometryVertex_position
static int tolua_get_CustomGeometryVertex_position(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->position_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: position_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometryVertex_position
static int tolua_set_CustomGeometryVertex_position(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->position_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: normal_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometryVertex_normal
static int tolua_get_CustomGeometryVertex_normal(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'normal_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->normal_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: normal_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometryVertex_normal
static int tolua_set_CustomGeometryVertex_normal(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'normal_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->normal_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: color_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometryVertex_color
static int tolua_get_CustomGeometryVertex_color(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->color_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: color_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometryVertex_color
static int tolua_set_CustomGeometryVertex_color(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->color_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: texCoord_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometryVertex_texCoord
static int tolua_get_CustomGeometryVertex_texCoord(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'texCoord_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->texCoord_,"Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: texCoord_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometryVertex_texCoord
static int tolua_set_CustomGeometryVertex_texCoord(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'texCoord_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->texCoord_ = *((Vector2*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: tangent_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometryVertex_tangent
static int tolua_get_CustomGeometryVertex_tangent(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tangent_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->tangent_,"Vector4");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: tangent_ of class  CustomGeometryVertex */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometryVertex_tangent
static int tolua_set_CustomGeometryVertex_tangent(lua_State* tolua_S)
{
  CustomGeometryVertex* self = (CustomGeometryVertex*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tangent_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector4",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->tangent_ = *((Vector4*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: Clear of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_Clear00
static int tolua_GraphicsLuaAPI_CustomGeometry_Clear00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Clear'", NULL);
#endif
 {
  self->Clear();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clear'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumGeometries of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_SetNumGeometries00
static int tolua_GraphicsLuaAPI_CustomGeometry_SetNumGeometries00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumGeometries'", NULL);
#endif
 {
  self->SetNumGeometries(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumGeometries'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDynamic of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_SetDynamic00
static int tolua_GraphicsLuaAPI_CustomGeometry_SetDynamic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDynamic'", NULL);
#endif
 {
  self->SetDynamic(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDynamic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BeginGeometry of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_BeginGeometry00
static int tolua_GraphicsLuaAPI_CustomGeometry_BeginGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  PrimitiveType type = ((PrimitiveType) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BeginGeometry'", NULL);
#endif
 {
  self->BeginGeometry(index,type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BeginGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DefineVertex of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_DefineVertex00
static int tolua_GraphicsLuaAPI_CustomGeometry_DefineVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* position = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefineVertex'", NULL);
#endif
 {
  self->DefineVertex(*position);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefineVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DefineNormal of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_DefineNormal00
static int tolua_GraphicsLuaAPI_CustomGeometry_DefineNormal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* normal = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefineNormal'", NULL);
#endif
 {
  self->DefineNormal(*normal);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefineNormal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DefineTangent of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_DefineTangent00
static int tolua_GraphicsLuaAPI_CustomGeometry_DefineTangent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector4",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  const Vector4* tangent = ((const Vector4*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefineTangent'", NULL);
#endif
 {
  self->DefineTangent(*tangent);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefineTangent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DefineColor of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_DefineColor00
static int tolua_GraphicsLuaAPI_CustomGeometry_DefineColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefineColor'", NULL);
#endif
 {
  self->DefineColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefineColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DefineTexCoord of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_DefineTexCoord00
static int tolua_GraphicsLuaAPI_CustomGeometry_DefineTexCoord00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* texCoord = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefineTexCoord'", NULL);
#endif
 {
  self->DefineTexCoord(*texCoord);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefineTexCoord'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DefineGeometry of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_DefineGeometry00
static int tolua_GraphicsLuaAPI_CustomGeometry_DefineGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,8,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,9,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  PrimitiveType type = ((PrimitiveType) (int)  tolua_tonumber(tolua_S,3,0));
  unsigned numVertices = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  bool hasNormals = ((bool)  tolua_toboolean(tolua_S,5,0));
  bool hasColors = ((bool)  tolua_toboolean(tolua_S,6,0));
  bool hasTexCoords = ((bool)  tolua_toboolean(tolua_S,7,0));
  bool hasTangents = ((bool)  tolua_toboolean(tolua_S,8,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DefineGeometry'", NULL);
#endif
 {
  self->DefineGeometry(index,type,numVertices,hasNormals,hasColors,hasTexCoords,hasTangents);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DefineGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Commit of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_Commit00
static int tolua_GraphicsLuaAPI_CustomGeometry_Commit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Commit'", NULL);
#endif
 {
  self->Commit();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Commit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial00
static int tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial01
static int tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  Material* material = ((Material*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetMaterial(index,material);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumGeometries of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_GetNumGeometries00
static int tolua_GraphicsLuaAPI_CustomGeometry_GetNumGeometries00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const CustomGeometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const CustomGeometry* self = (const CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumGeometries'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumGeometries();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumGeometries'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumVertices of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_GetNumVertices00
static int tolua_GraphicsLuaAPI_CustomGeometry_GetNumVertices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const CustomGeometry* self = (const CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumVertices'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumVertices(index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumVertices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsDynamic of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_IsDynamic00
static int tolua_GraphicsLuaAPI_CustomGeometry_IsDynamic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const CustomGeometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const CustomGeometry* self = (const CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsDynamic'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsDynamic();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsDynamic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_GetMaterial00
static int tolua_GraphicsLuaAPI_CustomGeometry_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertex of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CustomGeometry_GetVertex00
static int tolua_GraphicsLuaAPI_CustomGeometry_GetVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CustomGeometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned geometryIndex = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned vertexNum = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertex'", NULL);
#endif
 {
  CustomGeometryVertex* tolua_ret = (CustomGeometryVertex*)  self->GetVertex(geometryIndex,vertexNum);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"CustomGeometryVertex");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometry_material_ptr
static int tolua_get_CustomGeometry_material_ptr(lua_State* tolua_S)
{
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometry_material_ptr
static int tolua_set_CustomGeometry_material_ptr(lua_State* tolua_S)
{
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numGeometries of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometry_numGeometries
static int tolua_get_CustomGeometry_numGeometries(lua_State* tolua_S)
{
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numGeometries'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumGeometries());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numGeometries of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometry_numGeometries
static int tolua_set_CustomGeometry_numGeometries(lua_State* tolua_S)
{
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numGeometries'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumGeometries(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dynamic of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_get_CustomGeometry_dynamic
static int tolua_get_CustomGeometry_dynamic(lua_State* tolua_S)
{
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dynamic'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsDynamic());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: dynamic of class  CustomGeometry */
#ifndef TOLUA_DISABLE_tolua_set_CustomGeometry_dynamic
static int tolua_set_CustomGeometry_dynamic(lua_State* tolua_S)
{
  CustomGeometry* self = (CustomGeometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dynamic'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDynamic(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLineAntiAlias of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_SetLineAntiAlias00
static int tolua_GraphicsLuaAPI_DebugRenderer_SetLineAntiAlias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLineAntiAlias'", NULL);
#endif
 {
  self->SetLineAntiAlias(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLineAntiAlias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetView of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_SetView00
static int tolua_GraphicsLuaAPI_DebugRenderer_SetView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetView'", NULL);
#endif
 {
  self->SetView(camera);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddLine of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddLine00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddLine00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* start = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* end = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,4,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,5,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddLine'", NULL);
#endif
 {
  self->AddLine(*start,*end,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddLine'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddLine of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddLine01
static int tolua_GraphicsLuaAPI_DebugRenderer_AddLine01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* start = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* end = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  unsigned color = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,5,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddLine'", NULL);
#endif
 {
  self->AddLine(*start,*end,color,depthTest);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_DebugRenderer_AddLine00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTriangle of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* v1 = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* v2 = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  const Vector3* v3 = ((const Vector3*)  tolua_tousertype(tolua_S,4,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,5,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,6,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTriangle'", NULL);
#endif
 {
  self->AddTriangle(*v1,*v2,*v3,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddTriangle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTriangle of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle01
static int tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* v1 = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* v2 = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  const Vector3* v3 = ((const Vector3*)  tolua_tousertype(tolua_S,4,0));
  unsigned color = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,6,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTriangle'", NULL);
#endif
 {
  self->AddTriangle(*v1,*v2,*v3,color,depthTest);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddPolygon of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* v1 = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* v2 = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  const Vector3* v3 = ((const Vector3*)  tolua_tousertype(tolua_S,4,0));
  const Vector3* v4 = ((const Vector3*)  tolua_tousertype(tolua_S,5,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,6,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddPolygon'", NULL);
#endif
 {
  self->AddPolygon(*v1,*v2,*v3,*v4,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddPolygon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddPolygon of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon01
static int tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* v1 = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* v2 = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  const Vector3* v3 = ((const Vector3*)  tolua_tousertype(tolua_S,4,0));
  const Vector3* v4 = ((const Vector3*)  tolua_tousertype(tolua_S,5,0));
  unsigned color = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddPolygon'", NULL);
#endif
 {
  self->AddPolygon(*v1,*v2,*v3,*v4,color,depthTest);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddNode of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddNode00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Node",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  Node* node = ((Node*)  tolua_tousertype(tolua_S,2,0));
  float scale = ((float)  tolua_tonumber(tolua_S,3,1.0f));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddNode'", NULL);
#endif
 {
  self->AddNode(node,scale,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddBoundingBox of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,3,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,4,true));
  bool solid = ((bool)  tolua_toboolean(tolua_S,5,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddBoundingBox'", NULL);
#endif
 {
  self->AddBoundingBox(*box,*color,depthTest,solid);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddBoundingBox of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox01
static int tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Matrix3x4",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
  const Matrix3x4* transform = ((const Matrix3x4*)  tolua_tousertype(tolua_S,3,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,4,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,5,true));
  bool solid = ((bool)  tolua_toboolean(tolua_S,6,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddBoundingBox'", NULL);
#endif
 {
  self->AddBoundingBox(*box,*transform,*color,depthTest,solid);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddFrustum of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddFrustum00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Frustum",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Frustum* frustum = ((const Frustum*)  tolua_tousertype(tolua_S,2,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,3,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddFrustum'", NULL);
#endif
 {
  self->AddFrustum(*frustum,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddPolyhedron of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddPolyhedron00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddPolyhedron00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Polyhedron",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Polyhedron* poly = ((const Polyhedron*)  tolua_tousertype(tolua_S,2,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,3,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddPolyhedron'", NULL);
#endif
 {
  self->AddPolyhedron(*poly,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddPolyhedron'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSphere of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddSphere00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddSphere00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Sphere",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Sphere* sphere = ((const Sphere*)  tolua_tousertype(tolua_S,2,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,3,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSphere'", NULL);
#endif
 {
  self->AddSphere(*sphere,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddSphere'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSphereSector of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddSphereSector00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddSphereSector00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Sphere",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Quaternion",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,6,&tolua_err) || !tolua_isusertype(tolua_S,6,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Sphere* sphere = ((const Sphere*)  tolua_tousertype(tolua_S,2,0));
  const Quaternion* rotation = ((const Quaternion*)  tolua_tousertype(tolua_S,3,0));
  float angle = ((float)  tolua_tonumber(tolua_S,4,0));
  bool drawLines = ((bool)  tolua_toboolean(tolua_S,5,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,6,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSphereSector'", NULL);
#endif
 {
  self->AddSphereSector(*sphere,*rotation,angle,drawLines,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddSphereSector'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddSkeleton of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddSkeleton00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddSkeleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Skeleton",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Skeleton* skeleton = ((const Skeleton*)  tolua_tousertype(tolua_S,2,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,3,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,4,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddSkeleton'", NULL);
#endif
 {
  self->AddSkeleton(*skeleton,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddSkeleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTriangleMesh of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isuserdata(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const Matrix3x4",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,9,&tolua_err) || !tolua_isusertype(tolua_S,9,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,10,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,11,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const void* vertexData = ((const void*)  tolua_touserdata(tolua_S,2,0));
  unsigned vertexSize = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  const void* indexData = ((const void*)  tolua_touserdata(tolua_S,4,0));
  unsigned indexSize = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  unsigned indexStart = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  unsigned indexCount = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  const Matrix3x4* transform = ((const Matrix3x4*)  tolua_tousertype(tolua_S,8,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,9,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,10,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTriangleMesh'", NULL);
#endif
 {
  self->AddTriangleMesh(vertexData,vertexSize,indexData,indexSize,indexStart,indexCount,*transform,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddTriangleMesh'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTriangleMesh of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh01
static int tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 !tolua_isuserdata(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isuserdata(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,8,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,9,&tolua_err) || !tolua_isusertype(tolua_S,9,"const Matrix3x4",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,10,&tolua_err) || !tolua_isusertype(tolua_S,10,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,11,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,12,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const void* vertexData = ((const void*)  tolua_touserdata(tolua_S,2,0));
  unsigned vertexSize = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned vertexStart = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  const void* indexData = ((const void*)  tolua_touserdata(tolua_S,5,0));
  unsigned indexSize = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  unsigned indexStart = ((unsigned)  tolua_tonumber(tolua_S,7,0));
  unsigned indexCount = ((unsigned)  tolua_tonumber(tolua_S,8,0));
  const Matrix3x4* transform = ((const Matrix3x4*)  tolua_tousertype(tolua_S,9,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,10,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,11,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTriangleMesh'", NULL);
#endif
 {
  self->AddTriangleMesh(vertexData,vertexSize,vertexStart,indexData,indexSize,indexStart,indexCount,*transform,*color,depthTest);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCircle of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddCircle00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddCircle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const Color",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* center = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* normal = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  float radius = ((float)  tolua_tonumber(tolua_S,4,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,5,0));
  int steps = ((int)  tolua_tonumber(tolua_S,6,64));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCircle'", NULL);
#endif
 {
  self->AddCircle(*center,*normal,radius,*color,steps,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCircle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCross of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddCross00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddCross00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* center = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  float size = ((float)  tolua_tonumber(tolua_S,3,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,4,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,5,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCross'", NULL);
#endif
 {
  self->AddCross(*center,size,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCross'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddQuad of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_AddQuad00
static int tolua_GraphicsLuaAPI_DebugRenderer_AddQuad00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,5,&tolua_err) || !tolua_isusertype(tolua_S,5,"const Color",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* center = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  float width = ((float)  tolua_tonumber(tolua_S,3,0));
  float height = ((float)  tolua_tonumber(tolua_S,4,0));
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,5,0));
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,6,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddQuad'", NULL);
#endif
 {
  self->AddQuad(*center,width,height,*color,depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddQuad'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Render of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_Render00
static int tolua_GraphicsLuaAPI_DebugRenderer_Render00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DebugRenderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Render'", NULL);
#endif
 {
  self->Render();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Render'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLineAntiAlias of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_GetLineAntiAlias00
static int tolua_GraphicsLuaAPI_DebugRenderer_GetLineAntiAlias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DebugRenderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DebugRenderer* self = (const DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLineAntiAlias'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetLineAntiAlias();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLineAntiAlias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetView of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_GetView00
static int tolua_GraphicsLuaAPI_DebugRenderer_GetView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DebugRenderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DebugRenderer* self = (const DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetView'", NULL);
#endif
 {
  const Matrix3x4& tolua_ret = (const Matrix3x4&)  self->GetView();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Matrix3x4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetProjection of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_GetProjection00
static int tolua_GraphicsLuaAPI_DebugRenderer_GetProjection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DebugRenderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DebugRenderer* self = (const DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetProjection'", NULL);
#endif
 {
  const Matrix4& tolua_ret = (const Matrix4&)  self->GetProjection();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Matrix4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetProjection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFrustum of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_GetFrustum00
static int tolua_GraphicsLuaAPI_DebugRenderer_GetFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DebugRenderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DebugRenderer* self = (const DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFrustum'", NULL);
#endif
 {
  const Frustum& tolua_ret = (const Frustum&)  self->GetFrustum();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Frustum");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInside of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DebugRenderer_IsInside00
static int tolua_GraphicsLuaAPI_DebugRenderer_IsInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DebugRenderer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DebugRenderer* self = (const DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInside'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInside(*box);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lineAntiAlias of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_get_DebugRenderer_lineAntiAlias
static int tolua_get_DebugRenderer_lineAntiAlias(lua_State* tolua_S)
{
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lineAntiAlias'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetLineAntiAlias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lineAntiAlias of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_set_DebugRenderer_lineAntiAlias
static int tolua_set_DebugRenderer_lineAntiAlias(lua_State* tolua_S)
{
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lineAntiAlias'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLineAntiAlias(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: view of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_get_DebugRenderer_view_ref
static int tolua_get_DebugRenderer_view_ref(lua_State* tolua_S)
{
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'view'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetView(),"Matrix3x4");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: projection of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_get_DebugRenderer_projection_ref
static int tolua_get_DebugRenderer_projection_ref(lua_State* tolua_S)
{
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'projection'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetProjection(),"Matrix4");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: frustum of class  DebugRenderer */
#ifndef TOLUA_DISABLE_tolua_get_DebugRenderer_frustum_ref
static int tolua_get_DebugRenderer_frustum_ref(lua_State* tolua_S)
{
  DebugRenderer* self = (DebugRenderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'frustum'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetFrustum(),"Frustum");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_SetMaterial00
static int tolua_GraphicsLuaAPI_DecalSet_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxVertices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_SetMaxVertices00
static int tolua_GraphicsLuaAPI_DecalSet_SetMaxVertices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxVertices'", NULL);
#endif
 {
  self->SetMaxVertices(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxVertices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxIndices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_SetMaxIndices00
static int tolua_GraphicsLuaAPI_DecalSet_SetMaxIndices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxIndices'", NULL);
#endif
 {
  self->SetMaxIndices(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxIndices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOptimizeBufferSize of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_SetOptimizeBufferSize00
static int tolua_GraphicsLuaAPI_DecalSet_SetOptimizeBufferSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOptimizeBufferSize'", NULL);
#endif
 {
  self->SetOptimizeBufferSize(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOptimizeBufferSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddDecal of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_AddDecal00
static int tolua_GraphicsLuaAPI_DecalSet_AddDecal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Drawable",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Quaternion",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,8,&tolua_err) || !tolua_isusertype(tolua_S,8,"const Vector2",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,9,&tolua_err) || !tolua_isusertype(tolua_S,9,"const Vector2",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,10,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,11,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,12,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,13,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
  Drawable* target = ((Drawable*)  tolua_tousertype(tolua_S,2,0));
  const Vector3* worldPosition = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
  const Quaternion* worldRotation = ((const Quaternion*)  tolua_tousertype(tolua_S,4,0));
  float size = ((float)  tolua_tonumber(tolua_S,5,0));
  float aspectRatio = ((float)  tolua_tonumber(tolua_S,6,0));
  float depth = ((float)  tolua_tonumber(tolua_S,7,0));
  const Vector2* topLeftUV = ((const Vector2*)  tolua_tousertype(tolua_S,8,0));
  const Vector2* bottomRightUV = ((const Vector2*)  tolua_tousertype(tolua_S,9,0));
  float timeToLive = ((float)  tolua_tonumber(tolua_S,10,0.0f));
  float normalCutoff = ((float)  tolua_tonumber(tolua_S,11,0.1f));
  unsigned subGeometry = ((unsigned)  tolua_tonumber(tolua_S,12,M_MAX_UNSIGNED));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddDecal'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->AddDecal(target,*worldPosition,*worldRotation,size,aspectRatio,depth,*topLeftUV,*bottomRightUV,timeToLive,normalCutoff,subGeometry);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddDecal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveDecals of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_RemoveDecals00
static int tolua_GraphicsLuaAPI_DecalSet_RemoveDecals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveDecals'", NULL);
#endif
 {
  self->RemoveDecals(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveDecals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllDecals of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_RemoveAllDecals00
static int tolua_GraphicsLuaAPI_DecalSet_RemoveAllDecals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllDecals'", NULL);
#endif
 {
  self->RemoveAllDecals();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllDecals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetMaterial00
static int tolua_GraphicsLuaAPI_DecalSet_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumDecals of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetNumDecals00
static int tolua_GraphicsLuaAPI_DecalSet_GetNumDecals00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumDecals'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumDecals();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumDecals'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumVertices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetNumVertices00
static int tolua_GraphicsLuaAPI_DecalSet_GetNumVertices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumVertices'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumVertices();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumVertices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumIndices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetNumIndices00
static int tolua_GraphicsLuaAPI_DecalSet_GetNumIndices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumIndices'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumIndices();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumIndices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxVertices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetMaxVertices00
static int tolua_GraphicsLuaAPI_DecalSet_GetMaxVertices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxVertices'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMaxVertices();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxVertices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxIndices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetMaxIndices00
static int tolua_GraphicsLuaAPI_DecalSet_GetMaxIndices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxIndices'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMaxIndices();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxIndices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOptimizeBufferSize of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_DecalSet_GetOptimizeBufferSize00
static int tolua_GraphicsLuaAPI_DecalSet_GetOptimizeBufferSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const DecalSet",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const DecalSet* self = (const DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOptimizeBufferSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetOptimizeBufferSize();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOptimizeBufferSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_material_ptr
static int tolua_get_DecalSet_material_ptr(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_set_DecalSet_material_ptr
static int tolua_set_DecalSet_material_ptr(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numDecals of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_numDecals
static int tolua_get_DecalSet_numDecals(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numDecals'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumDecals());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numVertices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_numVertices
static int tolua_get_DecalSet_numVertices(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numVertices'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumVertices());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numIndices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_numIndices
static int tolua_get_DecalSet_numIndices(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numIndices'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumIndices());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxVertices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_maxVertices
static int tolua_get_DecalSet_maxVertices(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxVertices'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxVertices());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxVertices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_set_DecalSet_maxVertices
static int tolua_set_DecalSet_maxVertices(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxVertices'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxVertices(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxIndices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_maxIndices
static int tolua_get_DecalSet_maxIndices(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxIndices'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxIndices());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxIndices of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_set_DecalSet_maxIndices
static int tolua_set_DecalSet_maxIndices(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxIndices'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxIndices(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: optimizeBufferSize of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_get_DecalSet_optimizeBufferSize
static int tolua_get_DecalSet_optimizeBufferSize(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'optimizeBufferSize'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetOptimizeBufferSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: optimizeBufferSize of class  DecalSet */
#ifndef TOLUA_DISABLE_tolua_set_DecalSet_optimizeBufferSize
static int tolua_set_DecalSet_optimizeBufferSize(lua_State* tolua_S)
{
  DecalSet* self = (DecalSet*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'optimizeBufferSize'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOptimizeBufferSize(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWindowTitle of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetWindowTitle00
static int tolua_GraphicsLuaAPI_Graphics_SetWindowTitle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  const String windowTitle = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWindowTitle'", NULL);
#endif
 {
  self->SetWindowTitle(windowTitle);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWindowTitle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWindowIcon of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetWindowIcon00
static int tolua_GraphicsLuaAPI_Graphics_SetWindowIcon00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Image",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  Image* windowIcon = ((Image*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWindowIcon'", NULL);
#endif
 {
  self->SetWindowIcon(windowIcon);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWindowIcon'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWindowPosition of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetWindowPosition00
static int tolua_GraphicsLuaAPI_Graphics_SetWindowPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const IntVector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  const IntVector2* position = ((const IntVector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWindowPosition'", NULL);
#endif
 {
  self->SetWindowPosition(*position);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWindowPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWindowPosition of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetWindowPosition01
static int tolua_GraphicsLuaAPI_Graphics_SetWindowPosition01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWindowPosition'", NULL);
#endif
 {
  self->SetWindowPosition(x,y);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Graphics_SetWindowPosition00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMode of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetMode00
static int tolua_GraphicsLuaAPI_Graphics_SetMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,6,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,8,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,9,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,10,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,11,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,12,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,13,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
  bool fullscreen = ((bool)  tolua_toboolean(tolua_S,4,0));
  bool borderless = ((bool)  tolua_toboolean(tolua_S,5,0));
  bool resizable = ((bool)  tolua_toboolean(tolua_S,6,0));
  bool highDPI = ((bool)  tolua_toboolean(tolua_S,7,0));
  bool vsync = ((bool)  tolua_toboolean(tolua_S,8,0));
  bool tripleBuffer = ((bool)  tolua_toboolean(tolua_S,9,0));
  int multiSample = ((int)  tolua_tonumber(tolua_S,10,0));
  int monitor = ((int)  tolua_tonumber(tolua_S,11,0));
  int refreshRate = ((int)  tolua_tonumber(tolua_S,12,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMode'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetMode(width,height,fullscreen,borderless,resizable,highDPI,vsync,tripleBuffer,multiSample,monitor,refreshRate);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMode of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetMode01
static int tolua_GraphicsLuaAPI_Graphics_SetMode01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMode'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetMode(width,height);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Graphics_SetMode00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSRGB of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetSRGB00
static int tolua_GraphicsLuaAPI_Graphics_SetSRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSRGB'", NULL);
#endif
 {
  self->SetSRGB(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDither of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetDither00
static int tolua_GraphicsLuaAPI_Graphics_SetDither00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDither'", NULL);
#endif
 {
  self->SetDither(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDither'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFlushGPU of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetFlushGPU00
static int tolua_GraphicsLuaAPI_Graphics_SetFlushGPU00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFlushGPU'", NULL);
#endif
 {
  self->SetFlushGPU(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFlushGPU'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOrientations of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetOrientations00
static int tolua_GraphicsLuaAPI_Graphics_SetOrientations00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  const String orientations = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOrientations'", NULL);
#endif
 {
  self->SetOrientations(orientations);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOrientations'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ToggleFullscreen of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_ToggleFullscreen00
static int tolua_GraphicsLuaAPI_Graphics_ToggleFullscreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ToggleFullscreen'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->ToggleFullscreen();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ToggleFullscreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Maximize of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_Maximize00
static int tolua_GraphicsLuaAPI_Graphics_Maximize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Maximize'", NULL);
#endif
 {
  self->Maximize();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Maximize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Minimize of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_Minimize00
static int tolua_GraphicsLuaAPI_Graphics_Minimize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Minimize'", NULL);
#endif
 {
  self->Minimize();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Minimize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Raise of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_Raise00
static int tolua_GraphicsLuaAPI_Graphics_Raise00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Raise'", NULL);
#endif
 {
  self->Raise();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Raise'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Close of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_Close00
static int tolua_GraphicsLuaAPI_Graphics_Close00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Close'", NULL);
#endif
 {
  self->Close();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Close'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: TakeScreenShot of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_TakeScreenShot00
static int tolua_GraphicsLuaAPI_Graphics_TakeScreenShot00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Image",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  Image* destImage = ((Image*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TakeScreenShot'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->TakeScreenShot(*destImage);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'TakeScreenShot'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: BeginDumpShaders of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_BeginDumpShaders00
static int tolua_GraphicsLuaAPI_Graphics_BeginDumpShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  const String fileName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'BeginDumpShaders'", NULL);
#endif
 {
  self->BeginDumpShaders(fileName);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'BeginDumpShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: EndDumpShaders of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_EndDumpShaders00
static int tolua_GraphicsLuaAPI_Graphics_EndDumpShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'EndDumpShaders'", NULL);
#endif
 {
  self->EndDumpShaders();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'EndDumpShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: PrecacheShaders of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_PrecacheShaders00
static int tolua_GraphicsLuaAPI_Graphics_PrecacheShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Deserializer",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  Deserializer* source = ((Deserializer*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'PrecacheShaders'", NULL);
#endif
 {
  self->PrecacheShaders(*source);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'PrecacheShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GraphicsPrecacheShaders of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_PrecacheShaders01
static int tolua_GraphicsLuaAPI_Graphics_PrecacheShaders01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  const String fileName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GraphicsPrecacheShaders'", NULL);
#endif
 {
  GraphicsPrecacheShaders(self,fileName);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Graphics_PrecacheShaders00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderCacheDir of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_SetShaderCacheDir00
static int tolua_GraphicsLuaAPI_Graphics_SetShaderCacheDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
  const String path = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderCacheDir'", NULL);
#endif
 {
  self->SetShaderCacheDir(path);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderCacheDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInitialized of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_IsInitialized00
static int tolua_GraphicsLuaAPI_Graphics_IsInitialized00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInitialized'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInitialized();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsInitialized'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetExternalWindow of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetExternalWindow00
static int tolua_GraphicsLuaAPI_Graphics_GetExternalWindow00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetExternalWindow'", NULL);
#endif
 {
  void* tolua_ret = (void*)  self->GetExternalWindow();
 tolua_pushuserdata(tolua_S,(void*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetExternalWindow'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWindowTitle of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetWindowTitle00
static int tolua_GraphicsLuaAPI_Graphics_GetWindowTitle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWindowTitle'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetWindowTitle();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWindowTitle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetApiName of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetApiName00
static int tolua_GraphicsLuaAPI_Graphics_GetApiName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetApiName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetApiName();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetApiName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWindowPosition of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetWindowPosition00
static int tolua_GraphicsLuaAPI_Graphics_GetWindowPosition00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWindowPosition'", NULL);
#endif
 {
  IntVector2 tolua_ret = (IntVector2)  self->GetWindowPosition();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((IntVector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWindowPosition'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWidth of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetWidth00
static int tolua_GraphicsLuaAPI_Graphics_GetWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWidth'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeight of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetHeight00
static int tolua_GraphicsLuaAPI_Graphics_GetHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeight'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMultiSample of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetMultiSample00
static int tolua_GraphicsLuaAPI_Graphics_GetMultiSample00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMultiSample'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMultiSample();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMultiSample'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSize of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetSize00
static int tolua_GraphicsLuaAPI_Graphics_GetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSize'", NULL);
#endif
 {
  IntVector2 tolua_ret = (IntVector2)  self->GetSize();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((IntVector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFullscreen of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetFullscreen00
static int tolua_GraphicsLuaAPI_Graphics_GetFullscreen00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFullscreen'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetFullscreen();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFullscreen'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetResizable of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetResizable00
static int tolua_GraphicsLuaAPI_Graphics_GetResizable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetResizable'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetResizable();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetResizable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBorderless of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetBorderless00
static int tolua_GraphicsLuaAPI_Graphics_GetBorderless00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBorderless'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetBorderless();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBorderless'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVSync of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetVSync00
static int tolua_GraphicsLuaAPI_Graphics_GetVSync00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVSync'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetVSync();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVSync'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMonitor of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetMonitor00
static int tolua_GraphicsLuaAPI_Graphics_GetMonitor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMonitor'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMonitor();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMonitor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRefreshRate of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRefreshRate00
static int tolua_GraphicsLuaAPI_Graphics_GetRefreshRate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRefreshRate'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetRefreshRate();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRefreshRate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTripleBuffer of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetTripleBuffer00
static int tolua_GraphicsLuaAPI_Graphics_GetTripleBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTripleBuffer'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetTripleBuffer();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTripleBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSRGB of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetSRGB00
static int tolua_GraphicsLuaAPI_Graphics_GetSRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSRGB'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSRGB();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDither of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetDither00
static int tolua_GraphicsLuaAPI_Graphics_GetDither00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDither'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetDither();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDither'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFlushGPU of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetFlushGPU00
static int tolua_GraphicsLuaAPI_Graphics_GetFlushGPU00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFlushGPU'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetFlushGPU();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFlushGPU'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOrientations of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetOrientations00
static int tolua_GraphicsLuaAPI_Graphics_GetOrientations00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOrientations'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetOrientations();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOrientations'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsDeviceLost of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_IsDeviceLost00
static int tolua_GraphicsLuaAPI_Graphics_IsDeviceLost00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsDeviceLost'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsDeviceLost();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsDeviceLost'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumPrimitives of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetNumPrimitives00
static int tolua_GraphicsLuaAPI_Graphics_GetNumPrimitives00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumPrimitives'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumPrimitives();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumPrimitives'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumBatches of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetNumBatches00
static int tolua_GraphicsLuaAPI_Graphics_GetNumBatches00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumBatches'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumBatches();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumBatches'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDummyColorFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetDummyColorFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetDummyColorFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDummyColorFormat'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetDummyColorFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDummyColorFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowMapFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetShadowMapFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetShadowMapFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowMapFormat'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetShadowMapFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowMapFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHiresShadowMapFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetHiresShadowMapFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetHiresShadowMapFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHiresShadowMapFormat'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetHiresShadowMapFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHiresShadowMapFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetInstancingSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetInstancingSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetInstancingSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetInstancingSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetInstancingSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInstancingSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLightPrepassSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetLightPrepassSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetLightPrepassSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLightPrepassSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetLightPrepassSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLightPrepassSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDeferredSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetDeferredSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetDeferredSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDeferredSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetDeferredSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDeferredSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHardwareShadowSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetHardwareShadowSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetHardwareShadowSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHardwareShadowSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetHardwareShadowSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHardwareShadowSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetReadableDepthSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetReadableDepthSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetReadableDepthSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetReadableDepthSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetReadableDepthSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetReadableDepthSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSRGBSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetSRGBSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetSRGBSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSRGBSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSRGBSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSRGBSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSRGBWriteSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetSRGBWriteSupport00
static int tolua_GraphicsLuaAPI_Graphics_GetSRGBWriteSupport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSRGBWriteSupport'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSRGBWriteSupport();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSRGBWriteSupport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDesktopResolution of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetDesktopResolution00
static int tolua_GraphicsLuaAPI_Graphics_GetDesktopResolution00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
  int monitor = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDesktopResolution'", NULL);
#endif
 {
  IntVector2 tolua_ret = (IntVector2)  self->GetDesktopResolution(monitor);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((IntVector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDesktopResolution'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMonitorCount of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetMonitorCount00
static int tolua_GraphicsLuaAPI_Graphics_GetMonitorCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMonitorCount'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMonitorCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMonitorCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShaderCacheDir of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetShaderCacheDir00
static int tolua_GraphicsLuaAPI_Graphics_GetShaderCacheDir00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShaderCacheDir'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetShaderCacheDir();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShaderCacheDir'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCurrentMonitor of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetCurrentMonitor00
static int tolua_GraphicsLuaAPI_Graphics_GetCurrentMonitor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCurrentMonitor'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetCurrentMonitor();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCurrentMonitor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaximized of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetMaximized00
static int tolua_GraphicsLuaAPI_Graphics_GetMaximized00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaximized'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetMaximized();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaximized'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Raise of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_Raise01
static int tolua_GraphicsLuaAPI_Graphics_Raise01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Raise'", NULL);
#endif
 {
  self->Raise();
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Graphics_Raise00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDisplayDPI of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetDisplayDPI00
static int tolua_GraphicsLuaAPI_Graphics_GetDisplayDPI00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Graphics",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Graphics* self = (const Graphics*)  tolua_tousertype(tolua_S,1,0);
  int monitor = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDisplayDPI'", NULL);
#endif
 {
  Vector3 tolua_ret = (Vector3)  self->GetDisplayDPI(monitor);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector3)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector3));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDisplayDPI'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAlphaFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetAlphaFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetAlphaFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetAlphaFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAlphaFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLuminanceFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetLuminanceFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetLuminanceFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetLuminanceFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLuminanceFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLuminanceAlphaFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetLuminanceAlphaFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetLuminanceAlphaFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetLuminanceAlphaFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLuminanceAlphaFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGBFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGBFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetRGBFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGBFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGBFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGBAFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGBAFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetRGBAFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGBAFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGBAFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGBA16Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGBA16Format00
static int tolua_GraphicsLuaAPI_Graphics_GetRGBA16Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGBA16Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGBA16Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGBAFloat16Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGBAFloat16Format00
static int tolua_GraphicsLuaAPI_Graphics_GetRGBAFloat16Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGBAFloat16Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGBAFloat16Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGBAFloat32Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGBAFloat32Format00
static int tolua_GraphicsLuaAPI_Graphics_GetRGBAFloat32Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGBAFloat32Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGBAFloat32Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRG16Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRG16Format00
static int tolua_GraphicsLuaAPI_Graphics_GetRG16Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRG16Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRG16Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGFloat16Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGFloat16Format00
static int tolua_GraphicsLuaAPI_Graphics_GetRGFloat16Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGFloat16Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGFloat16Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRGFloat32Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetRGFloat32Format00
static int tolua_GraphicsLuaAPI_Graphics_GetRGFloat32Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetRGFloat32Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRGFloat32Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFloat16Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetFloat16Format00
static int tolua_GraphicsLuaAPI_Graphics_GetFloat16Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetFloat16Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFloat16Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFloat32Format of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetFloat32Format00
static int tolua_GraphicsLuaAPI_Graphics_GetFloat32Format00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetFloat32Format();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFloat32Format'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLinearDepthFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetLinearDepthFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetLinearDepthFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetLinearDepthFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLinearDepthFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDepthStencilFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetDepthStencilFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetDepthStencilFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetDepthStencilFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDepthStencilFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetReadableDepthFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetReadableDepthFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetReadableDepthFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetReadableDepthFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetReadableDepthFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetFormat00
static int tolua_GraphicsLuaAPI_Graphics_GetFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const String formatName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetFormat(formatName);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxBones of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Graphics_GetMaxBones00
static int tolua_GraphicsLuaAPI_Graphics_GetMaxBones00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Graphics",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  unsigned tolua_ret = (unsigned)  Graphics::GetMaxBones();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxBones'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: initialized of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_initialized
static int tolua_get_Graphics_initialized(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialized'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsInitialized());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: windowTitle of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_windowTitle
static int tolua_get_Graphics_windowTitle(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'windowTitle'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetWindowTitle());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: windowTitle of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_windowTitle
static int tolua_set_Graphics_windowTitle(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'windowTitle'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetWindowTitle(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: apiName of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_apiName
static int tolua_get_Graphics_apiName(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'apiName'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetApiName());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: windowPosition of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_windowPosition
static int tolua_get_Graphics_windowPosition(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'windowPosition'",NULL);
#endif
 IntVector2 tolua_ret = (IntVector2)self->GetWindowPosition();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((IntVector2)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
 tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: windowPosition of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_windowPosition
static int tolua_set_Graphics_windowPosition(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'windowPosition'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"IntVector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetWindowPosition(*((IntVector2*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: width of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_width
static int tolua_get_Graphics_width(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetWidth());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: height of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_height
static int tolua_get_Graphics_height(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'height'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetHeight());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: multiSample of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_multiSample
static int tolua_get_Graphics_multiSample(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'multiSample'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMultiSample());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: size of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_size
static int tolua_get_Graphics_size(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'size'",NULL);
#endif
 IntVector2 tolua_ret = (IntVector2)self->GetSize();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((IntVector2)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
 tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fullscreen of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_fullscreen
static int tolua_get_Graphics_fullscreen(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fullscreen'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetFullscreen());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: resizable of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_resizable
static int tolua_get_Graphics_resizable(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'resizable'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetResizable());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: borderless of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_borderless
static int tolua_get_Graphics_borderless(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'borderless'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetBorderless());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vSync of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_vSync
static int tolua_get_Graphics_vSync(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vSync'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetVSync());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: refreshRate of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_refreshRate
static int tolua_get_Graphics_refreshRate(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'refreshRate'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetRefreshRate());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: monitor of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_monitor
static int tolua_get_Graphics_monitor(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'monitor'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMonitor());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: tripleBuffer of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_tripleBuffer
static int tolua_get_Graphics_tripleBuffer(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tripleBuffer'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetTripleBuffer());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sRGB of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_sRGB
static int tolua_get_Graphics_sRGB(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGB'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSRGB());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sRGB of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_sRGB
static int tolua_set_Graphics_sRGB(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGB'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSRGB(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dither of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_dither
static int tolua_get_Graphics_dither(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dither'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetDither());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: dither of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_dither
static int tolua_set_Graphics_dither(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dither'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDither(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: flushGPU of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_flushGPU
static int tolua_get_Graphics_flushGPU(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'flushGPU'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetFlushGPU());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: flushGPU of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_flushGPU
static int tolua_set_Graphics_flushGPU(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'flushGPU'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFlushGPU(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: orientations of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_orientations
static int tolua_get_Graphics_orientations(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'orientations'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetOrientations());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: orientations of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_orientations
static int tolua_set_Graphics_orientations(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'orientations'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOrientations(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: deviceLost of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_deviceLost
static int tolua_get_Graphics_deviceLost(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'deviceLost'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsDeviceLost());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numPrimitives of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_numPrimitives
static int tolua_get_Graphics_numPrimitives(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numPrimitives'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumPrimitives());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numBatches of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_numBatches
static int tolua_get_Graphics_numBatches(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numBatches'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumBatches());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dummyColorFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_dummyColorFormat
static int tolua_get_Graphics_dummyColorFormat(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dummyColorFormat'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetDummyColorFormat());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowMapFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_shadowMapFormat
static int tolua_get_Graphics_shadowMapFormat(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMapFormat'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowMapFormat());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: hiresShadowMapFormat of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_hiresShadowMapFormat
static int tolua_get_Graphics_hiresShadowMapFormat(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'hiresShadowMapFormat'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetHiresShadowMapFormat());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: instancingSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_instancingSupport
static int tolua_get_Graphics_instancingSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'instancingSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetInstancingSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lightPrepassSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_lightPrepassSupport
static int tolua_get_Graphics_lightPrepassSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightPrepassSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetLightPrepassSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: deferredSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_deferredSupport
static int tolua_get_Graphics_deferredSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'deferredSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetDeferredSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: hardwareShadowSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_hardwareShadowSupport
static int tolua_get_Graphics_hardwareShadowSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'hardwareShadowSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetHardwareShadowSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: readableDepthSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_readableDepthSupport
static int tolua_get_Graphics_readableDepthSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'readableDepthSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetReadableDepthSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sRGBSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_sRGBSupport
static int tolua_get_Graphics_sRGBSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGBSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSRGBSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sRGBWriteSupport of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_sRGBWriteSupport
static int tolua_get_Graphics_sRGBWriteSupport(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGBWriteSupport'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSRGBWriteSupport());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: monitorCount of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_monitorCount
static int tolua_get_Graphics_monitorCount(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'monitorCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMonitorCount());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shaderCacheDir of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_get_Graphics_shaderCacheDir
static int tolua_get_Graphics_shaderCacheDir(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shaderCacheDir'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetShaderCacheDir());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shaderCacheDir of class  Graphics */
#ifndef TOLUA_DISABLE_tolua_set_Graphics_shaderCacheDir
static int tolua_set_Graphics_shaderCacheDir(lua_State* tolua_S)
{
  Graphics* self = (Graphics*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shaderCacheDir'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShaderCacheDir(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* function: GetGraphics */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_GetGraphics00
static int tolua_GraphicsLuaAPI_GetGraphics00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Graphics* tolua_ret = (Graphics*)  GetGraphics();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Graphics");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGraphics'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: graphics */
#ifndef TOLUA_DISABLE_tolua_get_graphics_ptr
static int tolua_get_graphics_ptr(lua_State* tolua_S)
{
  tolua_pushusertype(tolua_S,(void*)GetGraphics(),"Graphics");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BiasParameters_new00
static int tolua_GraphicsLuaAPI_BiasParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"BiasParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  BiasParameters* tolua_ret = (BiasParameters*)  Mtolua_new((BiasParameters)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"BiasParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BiasParameters_new00_local
static int tolua_GraphicsLuaAPI_BiasParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"BiasParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  BiasParameters* tolua_ret = (BiasParameters*)  Mtolua_new((BiasParameters)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"BiasParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BiasParameters_new01
static int tolua_GraphicsLuaAPI_BiasParameters_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"BiasParameters",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float constantBias = ((float)  tolua_tonumber(tolua_S,2,0));
  float slopeScaledBias = ((float)  tolua_tonumber(tolua_S,3,0));
  float normalOffset = ((float)  tolua_tonumber(tolua_S,4,0.0f));
 {
  BiasParameters* tolua_ret = (BiasParameters*)  Mtolua_new((BiasParameters)(constantBias,slopeScaledBias,normalOffset));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"BiasParameters");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_BiasParameters_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BiasParameters_new01_local
static int tolua_GraphicsLuaAPI_BiasParameters_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"BiasParameters",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float constantBias = ((float)  tolua_tonumber(tolua_S,2,0));
  float slopeScaledBias = ((float)  tolua_tonumber(tolua_S,3,0));
  float normalOffset = ((float)  tolua_tonumber(tolua_S,4,0.0f));
 {
  BiasParameters* tolua_ret = (BiasParameters*)  Mtolua_new((BiasParameters)(constantBias,slopeScaledBias,normalOffset));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"BiasParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_BiasParameters_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_BiasParameters_delete00
static int tolua_GraphicsLuaAPI_BiasParameters_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"BiasParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: constantBias_ of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_get_BiasParameters_constantBias
static int tolua_get_BiasParameters_constantBias(lua_State* tolua_S)
{
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'constantBias_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->constantBias_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: constantBias_ of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_set_BiasParameters_constantBias
static int tolua_set_BiasParameters_constantBias(lua_State* tolua_S)
{
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'constantBias_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->constantBias_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: slopeScaledBias_ of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_get_BiasParameters_slopeScaledBias
static int tolua_get_BiasParameters_slopeScaledBias(lua_State* tolua_S)
{
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'slopeScaledBias_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->slopeScaledBias_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: slopeScaledBias_ of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_set_BiasParameters_slopeScaledBias
static int tolua_set_BiasParameters_slopeScaledBias(lua_State* tolua_S)
{
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'slopeScaledBias_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->slopeScaledBias_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: normalOffset_ of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_get_BiasParameters_normalOffset
static int tolua_get_BiasParameters_normalOffset(lua_State* tolua_S)
{
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'normalOffset_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->normalOffset_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: normalOffset_ of class  BiasParameters */
#ifndef TOLUA_DISABLE_tolua_set_BiasParameters_normalOffset
static int tolua_set_BiasParameters_normalOffset(lua_State* tolua_S)
{
  BiasParameters* self = (BiasParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'normalOffset_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->normalOffset_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CascadeParameters_new00
static int tolua_GraphicsLuaAPI_CascadeParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"CascadeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  CascadeParameters* tolua_ret = (CascadeParameters*)  Mtolua_new((CascadeParameters)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"CascadeParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CascadeParameters_new00_local
static int tolua_GraphicsLuaAPI_CascadeParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"CascadeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  CascadeParameters* tolua_ret = (CascadeParameters*)  Mtolua_new((CascadeParameters)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"CascadeParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CascadeParameters_new01
static int tolua_GraphicsLuaAPI_CascadeParameters_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"CascadeParameters",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float split1 = ((float)  tolua_tonumber(tolua_S,2,0));
  float split2 = ((float)  tolua_tonumber(tolua_S,3,0));
  float split3 = ((float)  tolua_tonumber(tolua_S,4,0));
  float split4 = ((float)  tolua_tonumber(tolua_S,5,0));
  float fadeStart = ((float)  tolua_tonumber(tolua_S,6,0));
  float biasAutoAdjust = ((float)  tolua_tonumber(tolua_S,7,1.0f));
 {
  CascadeParameters* tolua_ret = (CascadeParameters*)  Mtolua_new((CascadeParameters)(split1,split2,split3,split4,fadeStart,biasAutoAdjust));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"CascadeParameters");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_CascadeParameters_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CascadeParameters_new01_local
static int tolua_GraphicsLuaAPI_CascadeParameters_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"CascadeParameters",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  float split1 = ((float)  tolua_tonumber(tolua_S,2,0));
  float split2 = ((float)  tolua_tonumber(tolua_S,3,0));
  float split3 = ((float)  tolua_tonumber(tolua_S,4,0));
  float split4 = ((float)  tolua_tonumber(tolua_S,5,0));
  float fadeStart = ((float)  tolua_tonumber(tolua_S,6,0));
  float biasAutoAdjust = ((float)  tolua_tonumber(tolua_S,7,1.0f));
 {
  CascadeParameters* tolua_ret = (CascadeParameters*)  Mtolua_new((CascadeParameters)(split1,split2,split3,split4,fadeStart,biasAutoAdjust));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"CascadeParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_CascadeParameters_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_CascadeParameters_delete00
static int tolua_GraphicsLuaAPI_CascadeParameters_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"CascadeParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  CascadeParameters* self = (CascadeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fadeStart_ of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_get_CascadeParameters_fadeStart
static int tolua_get_CascadeParameters_fadeStart(lua_State* tolua_S)
{
  CascadeParameters* self = (CascadeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fadeStart_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->fadeStart_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fadeStart_ of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_set_CascadeParameters_fadeStart
static int tolua_set_CascadeParameters_fadeStart(lua_State* tolua_S)
{
  CascadeParameters* self = (CascadeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fadeStart_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->fadeStart_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: biasAutoAdjust_ of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_get_CascadeParameters_biasAutoAdjust
static int tolua_get_CascadeParameters_biasAutoAdjust(lua_State* tolua_S)
{
  CascadeParameters* self = (CascadeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'biasAutoAdjust_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->biasAutoAdjust_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: biasAutoAdjust_ of class  CascadeParameters */
#ifndef TOLUA_DISABLE_tolua_set_CascadeParameters_biasAutoAdjust
static int tolua_set_CascadeParameters_biasAutoAdjust(lua_State* tolua_S)
{
  CascadeParameters* self = (CascadeParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'biasAutoAdjust_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->biasAutoAdjust_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_FocusParameters_new00
static int tolua_GraphicsLuaAPI_FocusParameters_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"FocusParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  FocusParameters* tolua_ret = (FocusParameters*)  Mtolua_new((FocusParameters)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"FocusParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_FocusParameters_new00_local
static int tolua_GraphicsLuaAPI_FocusParameters_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"FocusParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  FocusParameters* tolua_ret = (FocusParameters*)  Mtolua_new((FocusParameters)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"FocusParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_FocusParameters_new01
static int tolua_GraphicsLuaAPI_FocusParameters_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"FocusParameters",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  bool focus = ((bool)  tolua_toboolean(tolua_S,2,0));
  bool nonUniform = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool autoSize = ((bool)  tolua_toboolean(tolua_S,4,0));
  float quantize = ((float)  tolua_tonumber(tolua_S,5,0));
  float minView = ((float)  tolua_tonumber(tolua_S,6,0));
 {
  FocusParameters* tolua_ret = (FocusParameters*)  Mtolua_new((FocusParameters)(focus,nonUniform,autoSize,quantize,minView));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"FocusParameters");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_FocusParameters_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_FocusParameters_new01_local
static int tolua_GraphicsLuaAPI_FocusParameters_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"FocusParameters",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  bool focus = ((bool)  tolua_toboolean(tolua_S,2,0));
  bool nonUniform = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool autoSize = ((bool)  tolua_toboolean(tolua_S,4,0));
  float quantize = ((float)  tolua_tonumber(tolua_S,5,0));
  float minView = ((float)  tolua_tonumber(tolua_S,6,0));
 {
  FocusParameters* tolua_ret = (FocusParameters*)  Mtolua_new((FocusParameters)(focus,nonUniform,autoSize,quantize,minView));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"FocusParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_FocusParameters_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_FocusParameters_delete00
static int tolua_GraphicsLuaAPI_FocusParameters_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"FocusParameters",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: focus_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_get_FocusParameters_focus
static int tolua_get_FocusParameters_focus(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'focus_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->focus_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: focus_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_set_FocusParameters_focus
static int tolua_set_FocusParameters_focus(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'focus_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->focus_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: nonUniform_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_get_FocusParameters_nonUniform
static int tolua_get_FocusParameters_nonUniform(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nonUniform_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->nonUniform_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: nonUniform_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_set_FocusParameters_nonUniform
static int tolua_set_FocusParameters_nonUniform(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nonUniform_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->nonUniform_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: autoSize_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_get_FocusParameters_autoSize
static int tolua_get_FocusParameters_autoSize(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoSize_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->autoSize_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: autoSize_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_set_FocusParameters_autoSize
static int tolua_set_FocusParameters_autoSize(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoSize_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->autoSize_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: quantize_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_get_FocusParameters_quantize
static int tolua_get_FocusParameters_quantize(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'quantize_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->quantize_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: quantize_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_set_FocusParameters_quantize
static int tolua_set_FocusParameters_quantize(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'quantize_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->quantize_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minView_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_get_FocusParameters_minView
static int tolua_get_FocusParameters_minView(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minView_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->minView_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minView_ of class  FocusParameters */
#ifndef TOLUA_DISABLE_tolua_set_FocusParameters_minView
static int tolua_set_FocusParameters_minView(lua_State* tolua_S)
{
  FocusParameters* self = (FocusParameters*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minView_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->minView_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLightType of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetLightType00
static int tolua_GraphicsLuaAPI_Light_SetLightType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  LightType type = ((LightType) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLightType'", NULL);
#endif
 {
  self->SetLightType(type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLightType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPerVertex of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetPerVertex00
static int tolua_GraphicsLuaAPI_Light_SetPerVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPerVertex'", NULL);
#endif
 {
  self->SetPerVertex(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPerVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetColor of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetColor00
static int tolua_GraphicsLuaAPI_Light_SetColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetColor'", NULL);
#endif
 {
  self->SetColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTemperature of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetTemperature00
static int tolua_GraphicsLuaAPI_Light_SetTemperature00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float temperature = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTemperature'", NULL);
#endif
 {
  self->SetTemperature(temperature);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTemperature'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRadius of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetRadius00
static int tolua_GraphicsLuaAPI_Light_SetRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float redius = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRadius'", NULL);
#endif
 {
  self->SetRadius(redius);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLength of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetLength00
static int tolua_GraphicsLuaAPI_Light_SetLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float length = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLength'", NULL);
#endif
 {
  self->SetLength(length);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUsePhysicalValues of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetUsePhysicalValues00
static int tolua_GraphicsLuaAPI_Light_SetUsePhysicalValues00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUsePhysicalValues'", NULL);
#endif
 {
  self->SetUsePhysicalValues(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUsePhysicalValues'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSpecularIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetSpecularIntensity00
static int tolua_GraphicsLuaAPI_Light_SetSpecularIntensity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float intensity = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSpecularIntensity'", NULL);
#endif
 {
  self->SetSpecularIntensity(intensity);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSpecularIntensity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBrightness of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetBrightness00
static int tolua_GraphicsLuaAPI_Light_SetBrightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float brightness = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBrightness'", NULL);
#endif
 {
  self->SetBrightness(brightness);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBrightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRange of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetRange00
static int tolua_GraphicsLuaAPI_Light_SetRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float range = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRange'", NULL);
#endif
 {
  self->SetRange(range);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFov of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetFov00
static int tolua_GraphicsLuaAPI_Light_SetFov00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float fov = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFov'", NULL);
#endif
 {
  self->SetFov(fov);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFov'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAspectRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetAspectRatio00
static int tolua_GraphicsLuaAPI_Light_SetAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float aspectRatio = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAspectRatio'", NULL);
#endif
 {
  self->SetAspectRatio(aspectRatio);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetFadeDistance00
static int tolua_GraphicsLuaAPI_Light_SetFadeDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFadeDistance'", NULL);
#endif
 {
  self->SetFadeDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFadeDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowFadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowFadeDistance00
static int tolua_GraphicsLuaAPI_Light_SetShadowFadeDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowFadeDistance'", NULL);
#endif
 {
  self->SetShadowFadeDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowFadeDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowBias of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowBias00
static int tolua_GraphicsLuaAPI_Light_SetShadowBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BiasParameters",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  const BiasParameters* parameters = ((const BiasParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowBias'", NULL);
#endif
 {
  self->SetShadowBias(*parameters);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowCascade of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowCascade00
static int tolua_GraphicsLuaAPI_Light_SetShadowCascade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const CascadeParameters",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  const CascadeParameters* parameters = ((const CascadeParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowCascade'", NULL);
#endif
 {
  self->SetShadowCascade(*parameters);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowCascade'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowFocus of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowFocus00
static int tolua_GraphicsLuaAPI_Light_SetShadowFocus00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const FocusParameters",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  const FocusParameters* parameters = ((const FocusParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowFocus'", NULL);
#endif
 {
  self->SetShadowFocus(*parameters);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowFocus'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowIntensity00
static int tolua_GraphicsLuaAPI_Light_SetShadowIntensity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float intensity = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowIntensity'", NULL);
#endif
 {
  self->SetShadowIntensity(intensity);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowIntensity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowResolution of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowResolution00
static int tolua_GraphicsLuaAPI_Light_SetShadowResolution00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float resolution = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowResolution'", NULL);
#endif
 {
  self->SetShadowResolution(resolution);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowResolution'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowNearFarRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowNearFarRatio00
static int tolua_GraphicsLuaAPI_Light_SetShadowNearFarRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float nearFarRatio = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowNearFarRatio'", NULL);
#endif
 {
  self->SetShadowNearFarRatio(nearFarRatio);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowNearFarRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowMaxExtrusion of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShadowMaxExtrusion00
static int tolua_GraphicsLuaAPI_Light_SetShadowMaxExtrusion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  float extrusion = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowMaxExtrusion'", NULL);
#endif
 {
  self->SetShadowMaxExtrusion(extrusion);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowMaxExtrusion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRampTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetRampTexture00
static int tolua_GraphicsLuaAPI_Light_SetRampTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  Texture* texture = ((Texture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRampTexture'", NULL);
#endif
 {
  self->SetRampTexture(texture);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRampTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShapeTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_SetShapeTexture00
static int tolua_GraphicsLuaAPI_Light_SetShapeTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Light",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
  Texture* texture = ((Texture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShapeTexture'", NULL);
#endif
 {
  self->SetShapeTexture(texture);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShapeTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLightType of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetLightType00
static int tolua_GraphicsLuaAPI_Light_GetLightType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLightType'", NULL);
#endif
 {
  LightType tolua_ret = (LightType)  self->GetLightType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLightType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPerVertex of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetPerVertex00
static int tolua_GraphicsLuaAPI_Light_GetPerVertex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPerVertex'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetPerVertex();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPerVertex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetColor of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetColor00
static int tolua_GraphicsLuaAPI_Light_GetColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTemperature of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetTemperature00
static int tolua_GraphicsLuaAPI_Light_GetTemperature00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTemperature'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetTemperature();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTemperature'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRadius of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetRadius00
static int tolua_GraphicsLuaAPI_Light_GetRadius00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRadius'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetRadius();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRadius'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLength of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetLength00
static int tolua_GraphicsLuaAPI_Light_GetLength00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLength'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLength();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLength'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSpecularIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetSpecularIntensity00
static int tolua_GraphicsLuaAPI_Light_GetSpecularIntensity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSpecularIntensity'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetSpecularIntensity();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSpecularIntensity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBrightness of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetBrightness00
static int tolua_GraphicsLuaAPI_Light_GetBrightness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBrightness'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetBrightness();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBrightness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEffectiveColor of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetEffectiveColor00
static int tolua_GraphicsLuaAPI_Light_GetEffectiveColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEffectiveColor'", NULL);
#endif
 {
  Color tolua_ret = (Color)  self->GetEffectiveColor();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Color)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Color));
  tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEffectiveColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetColorFromTemperature of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetColorFromTemperature00
static int tolua_GraphicsLuaAPI_Light_GetColorFromTemperature00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetColorFromTemperature'", NULL);
#endif
 {
  Color tolua_ret = (Color)  self->GetColorFromTemperature();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Color)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Color));
  tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetColorFromTemperature'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUsePhysicalValues of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetUsePhysicalValues00
static int tolua_GraphicsLuaAPI_Light_GetUsePhysicalValues00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUsePhysicalValues'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetUsePhysicalValues();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUsePhysicalValues'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEffectiveSpecularIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetEffectiveSpecularIntensity00
static int tolua_GraphicsLuaAPI_Light_GetEffectiveSpecularIntensity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEffectiveSpecularIntensity'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetEffectiveSpecularIntensity();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEffectiveSpecularIntensity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRange of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetRange00
static int tolua_GraphicsLuaAPI_Light_GetRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRange'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetRange();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFov of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetFov00
static int tolua_GraphicsLuaAPI_Light_GetFov00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFov'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFov();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFov'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAspectRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetAspectRatio00
static int tolua_GraphicsLuaAPI_Light_GetAspectRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAspectRatio'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAspectRatio();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAspectRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetFadeDistance00
static int tolua_GraphicsLuaAPI_Light_GetFadeDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFadeDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFadeDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFadeDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowFadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowFadeDistance00
static int tolua_GraphicsLuaAPI_Light_GetShadowFadeDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowFadeDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowFadeDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowFadeDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowBias of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowBias00
static int tolua_GraphicsLuaAPI_Light_GetShadowBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowBias'", NULL);
#endif
 {
  const BiasParameters& tolua_ret = (const BiasParameters&)  self->GetShadowBias();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const BiasParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowCascade of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowCascade00
static int tolua_GraphicsLuaAPI_Light_GetShadowCascade00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowCascade'", NULL);
#endif
 {
  const CascadeParameters& tolua_ret = (const CascadeParameters&)  self->GetShadowCascade();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const CascadeParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowCascade'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowFocus of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowFocus00
static int tolua_GraphicsLuaAPI_Light_GetShadowFocus00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowFocus'", NULL);
#endif
 {
  const FocusParameters& tolua_ret = (const FocusParameters&)  self->GetShadowFocus();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const FocusParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowFocus'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowIntensity00
static int tolua_GraphicsLuaAPI_Light_GetShadowIntensity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowIntensity'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowIntensity();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowIntensity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowResolution of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowResolution00
static int tolua_GraphicsLuaAPI_Light_GetShadowResolution00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowResolution'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowResolution();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowResolution'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowNearFarRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowNearFarRatio00
static int tolua_GraphicsLuaAPI_Light_GetShadowNearFarRatio00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowNearFarRatio'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowNearFarRatio();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowNearFarRatio'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowMaxExtrusion of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShadowMaxExtrusion00
static int tolua_GraphicsLuaAPI_Light_GetShadowMaxExtrusion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowMaxExtrusion'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowMaxExtrusion();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowMaxExtrusion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRampTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetRampTexture00
static int tolua_GraphicsLuaAPI_Light_GetRampTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRampTexture'", NULL);
#endif
 {
  Texture* tolua_ret = (Texture*)  self->GetRampTexture();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRampTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShapeTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetShapeTexture00
static int tolua_GraphicsLuaAPI_Light_GetShapeTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShapeTexture'", NULL);
#endif
 {
  Texture* tolua_ret = (Texture*)  self->GetShapeTexture();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShapeTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFrustum of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetFrustum00
static int tolua_GraphicsLuaAPI_Light_GetFrustum00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFrustum'", NULL);
#endif
 {
  Frustum tolua_ret = (Frustum)  self->GetFrustum();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Frustum)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Frustum));
  tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFrustum'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumShadowSplits of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_GetNumShadowSplits00
static int tolua_GraphicsLuaAPI_Light_GetNumShadowSplits00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumShadowSplits'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetNumShadowSplits();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumShadowSplits'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsNegative of class  Light */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Light_IsNegative00
static int tolua_GraphicsLuaAPI_Light_IsNegative00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Light",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Light* self = (const Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsNegative'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsNegative();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsNegative'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lightType of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_lightType
static int tolua_get_Light_lightType(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLightType());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lightType of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_lightType
static int tolua_set_Light_lightType(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightType'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLightType(((LightType) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: perVertex of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_perVertex
static int tolua_get_Light_perVertex(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'perVertex'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetPerVertex());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: perVertex of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_perVertex
static int tolua_set_Light_perVertex(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'perVertex'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPerVertex(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: color of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_color_ref
static int tolua_get_Light_color_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: color of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_color_ref
static int tolua_set_Light_color_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetColor((*(Color*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: temperature of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_temperature
static int tolua_get_Light_temperature(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'temperature'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTemperature());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: temperature of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_temperature
static int tolua_set_Light_temperature(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'temperature'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTemperature(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: radius of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_radius
static int tolua_get_Light_radius(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'radius'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetRadius());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: radius of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_radius
static int tolua_set_Light_radius(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'radius'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRadius(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: length of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_length
static int tolua_get_Light_length(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'length'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLength());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: length of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_length
static int tolua_set_Light_length(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'length'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLength(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: usePhysicalValues of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_usePhysicalValues
static int tolua_get_Light_usePhysicalValues(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'usePhysicalValues'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetUsePhysicalValues());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: usePhysicalValues of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_usePhysicalValues
static int tolua_set_Light_usePhysicalValues(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'usePhysicalValues'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUsePhysicalValues(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: specularIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_specularIntensity
static int tolua_get_Light_specularIntensity(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'specularIntensity'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetSpecularIntensity());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: specularIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_specularIntensity
static int tolua_set_Light_specularIntensity(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'specularIntensity'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSpecularIntensity(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: brightness of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_brightness
static int tolua_get_Light_brightness(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'brightness'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetBrightness());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: brightness of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_brightness
static int tolua_set_Light_brightness(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'brightness'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBrightness(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: range of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_range
static int tolua_get_Light_range(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'range'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetRange());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: range of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_range
static int tolua_set_Light_range(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'range'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRange(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fov of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_fov
static int tolua_get_Light_fov(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fov'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFov());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fov of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_fov
static int tolua_set_Light_fov(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fov'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFov(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: aspectRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_aspectRatio
static int tolua_get_Light_aspectRatio(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'aspectRatio'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAspectRatio());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: aspectRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_aspectRatio
static int tolua_set_Light_aspectRatio(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'aspectRatio'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAspectRatio(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_fadeDistance
static int tolua_get_Light_fadeDistance(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fadeDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFadeDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_fadeDistance
static int tolua_set_Light_fadeDistance(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fadeDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFadeDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowFadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowFadeDistance
static int tolua_get_Light_shadowFadeDistance(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowFadeDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowFadeDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowFadeDistance of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowFadeDistance
static int tolua_set_Light_shadowFadeDistance(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowFadeDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowFadeDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowBias of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowBias_ref
static int tolua_get_Light_shadowBias_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowBias'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetShadowBias(),"BiasParameters");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowBias of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowBias_ref
static int tolua_set_Light_shadowBias_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowBias'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"BiasParameters",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowBias((*(BiasParameters*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowCascade of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowCascade_ref
static int tolua_get_Light_shadowCascade_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowCascade'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetShadowCascade(),"CascadeParameters");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowCascade of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowCascade_ref
static int tolua_set_Light_shadowCascade_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowCascade'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"CascadeParameters",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowCascade((*(CascadeParameters*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowFocus of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowFocus_ref
static int tolua_get_Light_shadowFocus_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowFocus'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetShadowFocus(),"FocusParameters");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowFocus of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowFocus_ref
static int tolua_set_Light_shadowFocus_ref(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowFocus'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"FocusParameters",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowFocus((*(FocusParameters*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowIntensity
static int tolua_get_Light_shadowIntensity(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowIntensity'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowIntensity());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowIntensity
static int tolua_set_Light_shadowIntensity(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowIntensity'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowIntensity(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowResolution of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowResolution
static int tolua_get_Light_shadowResolution(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowResolution'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowResolution());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowResolution of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowResolution
static int tolua_set_Light_shadowResolution(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowResolution'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowResolution(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowNearFarRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowNearFarRatio
static int tolua_get_Light_shadowNearFarRatio(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowNearFarRatio'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowNearFarRatio());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowNearFarRatio of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowNearFarRatio
static int tolua_set_Light_shadowNearFarRatio(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowNearFarRatio'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowNearFarRatio(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowMaxExtrusion of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shadowMaxExtrusion
static int tolua_get_Light_shadowMaxExtrusion(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMaxExtrusion'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowMaxExtrusion());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowMaxExtrusion of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shadowMaxExtrusion
static int tolua_set_Light_shadowMaxExtrusion(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMaxExtrusion'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowMaxExtrusion(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: rampTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_rampTexture_ptr
static int tolua_get_Light_rampTexture_ptr(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rampTexture'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetRampTexture(),"Texture");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: rampTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_rampTexture_ptr
static int tolua_set_Light_rampTexture_ptr(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rampTexture'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRampTexture(((Texture*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shapeTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_shapeTexture_ptr
static int tolua_get_Light_shapeTexture_ptr(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shapeTexture'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetShapeTexture(),"Texture");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shapeTexture of class  Light */
#ifndef TOLUA_DISABLE_tolua_set_Light_shapeTexture_ptr
static int tolua_set_Light_shapeTexture_ptr(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shapeTexture'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShapeTexture(((Texture*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: frustum of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_frustum
static int tolua_get_Light_frustum(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'frustum'",NULL);
#endif
 Frustum tolua_ret = (Frustum)self->GetFrustum();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Frustum)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Frustum));
 tolua_pushusertype(tolua_S,tolua_obj,"Frustum");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numShadowSplits of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_numShadowSplits
static int tolua_get_Light_numShadowSplits(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numShadowSplits'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumShadowSplits());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: negative of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_negative
static int tolua_get_Light_negative(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'negative'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsNegative());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: effectiveColor of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_effectiveColor
static int tolua_get_Light_effectiveColor(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'effectiveColor'",NULL);
#endif
 Color tolua_ret = (Color)self->GetEffectiveColor();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Color)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Color));
 tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: effectiveSpecularIntensity of class  Light */
#ifndef TOLUA_DISABLE_tolua_get_Light_effectiveSpecularIntensity
static int tolua_get_Light_effectiveSpecularIntensity(lua_State* tolua_S)
{
  Light* self = (Light*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'effectiveSpecularIntensity'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetEffectiveSpecularIntensity());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_new00
static int tolua_GraphicsLuaAPI_Material_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Material* tolua_ret = (Material*)  Mtolua_new((Material)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_new00_local
static int tolua_GraphicsLuaAPI_Material_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Material* tolua_ret = (Material*)  Mtolua_new((Material)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_delete00
static int tolua_GraphicsLuaAPI_Material_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumTechniques of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetNumTechniques00
static int tolua_GraphicsLuaAPI_Material_SetNumTechniques00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumTechniques'", NULL);
#endif
 {
  self->SetNumTechniques(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumTechniques'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTechnique of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetTechnique00
static int tolua_GraphicsLuaAPI_Material_SetTechnique00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Technique",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  Technique* tech = ((Technique*)  tolua_tousertype(tolua_S,3,0));
  MaterialQuality qualityLevel = ((MaterialQuality) (int)  tolua_tonumber(tolua_S,4,0));
  float lodDistance = ((float)  tolua_tonumber(tolua_S,5,0.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTechnique'", NULL);
#endif
 {
  self->SetTechnique(index,tech,qualityLevel,lodDistance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTechnique'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetVertexShaderDefines00
static int tolua_GraphicsLuaAPI_Material_SetVertexShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String defines = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexShaderDefines'", NULL);
#endif
 {
  self->SetVertexShaderDefines(defines);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPixelShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetPixelShaderDefines00
static int tolua_GraphicsLuaAPI_Material_SetPixelShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String defines = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPixelShaderDefines'", NULL);
#endif
 {
  self->SetPixelShaderDefines(defines);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPixelShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderParameter of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetShaderParameter00
static int tolua_GraphicsLuaAPI_Material_SetShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Variant",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  const Variant* value = ((const Variant*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderParameter'", NULL);
#endif
 {
  self->SetShaderParameter(name,*value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderParameterAnimation of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimation00
static int tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"ValueAnimation",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  ValueAnimation* animation = ((ValueAnimation*)  tolua_tousertype(tolua_S,3,0));
  WrapMode wrapMode = ((WrapMode) (int)  tolua_tonumber(tolua_S,4,WM_LOOP));
  float speed = ((float)  tolua_tonumber(tolua_S,5,1.0f));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderParameterAnimation'", NULL);
#endif
 {
  self->SetShaderParameterAnimation(name,animation,wrapMode,speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderParameterAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderParameterAnimationWrapMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimationWrapMode00
static int tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimationWrapMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  WrapMode wrapMode = ((WrapMode) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderParameterAnimationWrapMode'", NULL);
#endif
 {
  self->SetShaderParameterAnimationWrapMode(name,wrapMode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderParameterAnimationWrapMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderParameterAnimationSpeed of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimationSpeed00
static int tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  float speed = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderParameterAnimationSpeed'", NULL);
#endif
 {
  self->SetShaderParameterAnimationSpeed(name,speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderParameterAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTexture of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetTexture00
static int tolua_GraphicsLuaAPI_Material_SetTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  TextureUnit unit = ((TextureUnit) (int)  tolua_tonumber(tolua_S,2,0));
  Texture* texture = ((Texture*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTexture'", NULL);
#endif
 {
  self->SetTexture(unit,texture);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUVTransform of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetUVTransform00
static int tolua_GraphicsLuaAPI_Material_SetUVTransform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const Vector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* offset = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
  float rotation = ((float)  tolua_tonumber(tolua_S,3,0));
  const Vector2* repeat = ((const Vector2*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUVTransform'", NULL);
#endif
 {
  self->SetUVTransform(*offset,rotation,*repeat);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUVTransform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUVTransform of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetUVTransform01
static int tolua_GraphicsLuaAPI_Material_SetUVTransform01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* offset = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
  float rotation = ((float)  tolua_tonumber(tolua_S,3,0));
  float repeat = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUVTransform'", NULL);
#endif
 {
  self->SetUVTransform(*offset,rotation,repeat);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Material_SetUVTransform00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetCullMode00
static int tolua_GraphicsLuaAPI_Material_SetCullMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  CullMode mode = ((CullMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCullMode'", NULL);
#endif
 {
  self->SetCullMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCullMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowCullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetShadowCullMode00
static int tolua_GraphicsLuaAPI_Material_SetShadowCullMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  CullMode mode = ((CullMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowCullMode'", NULL);
#endif
 {
  self->SetShadowCullMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowCullMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFillMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetFillMode00
static int tolua_GraphicsLuaAPI_Material_SetFillMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  FillMode mode = ((FillMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFillMode'", NULL);
#endif
 {
  self->SetFillMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFillMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDepthBias of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetDepthBias00
static int tolua_GraphicsLuaAPI_Material_SetDepthBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BiasParameters",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const BiasParameters* parameters = ((const BiasParameters*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDepthBias'", NULL);
#endif
 {
  self->SetDepthBias(*parameters);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDepthBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAlphaToCoverage of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetAlphaToCoverage00
static int tolua_GraphicsLuaAPI_Material_SetAlphaToCoverage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAlphaToCoverage'", NULL);
#endif
 {
  self->SetAlphaToCoverage(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAlphaToCoverage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLineAntiAlias of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetLineAntiAlias00
static int tolua_GraphicsLuaAPI_Material_SetLineAntiAlias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLineAntiAlias'", NULL);
#endif
 {
  self->SetLineAntiAlias(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLineAntiAlias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRenderOrder of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetRenderOrder00
static int tolua_GraphicsLuaAPI_Material_SetRenderOrder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  unsigned char renderOrder = ((unsigned char)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRenderOrder'", NULL);
#endif
 {
  self->SetRenderOrder(renderOrder);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRenderOrder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOcclusion of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetOcclusion00
static int tolua_GraphicsLuaAPI_Material_SetOcclusion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOcclusion'", NULL);
#endif
 {
  self->SetOcclusion(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOcclusion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetScene of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SetScene00
static int tolua_GraphicsLuaAPI_Material_SetScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetScene'", NULL);
#endif
 {
  self->SetScene(scene);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveShaderParameter of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_RemoveShaderParameter00
static int tolua_GraphicsLuaAPI_Material_RemoveShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveShaderParameter'", NULL);
#endif
 {
  self->RemoveShaderParameter(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReleaseShaders of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_ReleaseShaders00
static int tolua_GraphicsLuaAPI_Material_ReleaseShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReleaseShaders'", NULL);
#endif
 {
  self->ReleaseShaders();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReleaseShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: MaterialClone of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_Clone00
static int tolua_GraphicsLuaAPI_Material_Clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  const String cloneName = ((const String)  tolua_tourho3dstring(tolua_S,2,String::EMPTY));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MaterialClone'", NULL);
#endif
 {
  tolua_outside Material* tolua_ret = (tolua_outside Material*)  MaterialClone(self,cloneName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SortTechniques of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_SortTechniques00
static int tolua_GraphicsLuaAPI_Material_SortTechniques00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SortTechniques'", NULL);
#endif
 {
  self->SortTechniques();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SortTechniques'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: MarkForAuxView of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_MarkForAuxView00
static int tolua_GraphicsLuaAPI_Material_MarkForAuxView00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
  unsigned frameNumber = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'MarkForAuxView'", NULL);
#endif
 {
  self->MarkForAuxView(frameNumber);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'MarkForAuxView'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumTechniques of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetNumTechniques00
static int tolua_GraphicsLuaAPI_Material_GetNumTechniques00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumTechniques'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumTechniques();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumTechniques'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTechnique of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetTechnique00
static int tolua_GraphicsLuaAPI_Material_GetTechnique00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTechnique'", NULL);
#endif
 {
  Technique* tolua_ret = (Technique*)  self->GetTechnique(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Technique");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTechnique'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPass of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetPass00
static int tolua_GraphicsLuaAPI_Material_GetPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const String passName = ((const String)  tolua_tourho3dstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPass'", NULL);
#endif
 {
  Pass* tolua_ret = (Pass*)  self->GetPass(index,passName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Pass");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTexture of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetTexture00
static int tolua_GraphicsLuaAPI_Material_GetTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  TextureUnit unit = ((TextureUnit) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTexture'", NULL);
#endif
 {
  Texture* tolua_ret = (Texture*)  self->GetTexture(unit);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetVertexShaderDefines00
static int tolua_GraphicsLuaAPI_Material_GetVertexShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexShaderDefines'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetVertexShaderDefines();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPixelShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetPixelShaderDefines00
static int tolua_GraphicsLuaAPI_Material_GetPixelShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPixelShaderDefines'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetPixelShaderDefines();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPixelShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShaderParameterAnimation of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimation00
static int tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShaderParameterAnimation'", NULL);
#endif
 {
  ValueAnimation* tolua_ret = (ValueAnimation*)  self->GetShaderParameterAnimation(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ValueAnimation");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShaderParameterAnimation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShaderParameterAnimationWrapMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimationWrapMode00
static int tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimationWrapMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShaderParameterAnimationWrapMode'", NULL);
#endif
 {
  WrapMode tolua_ret = (WrapMode)  self->GetShaderParameterAnimationWrapMode(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShaderParameterAnimationWrapMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShaderParameterAnimationSpeed of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimationSpeed00
static int tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShaderParameterAnimationSpeed'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShaderParameterAnimationSpeed(name);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShaderParameterAnimationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetCullMode00
static int tolua_GraphicsLuaAPI_Material_GetCullMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCullMode'", NULL);
#endif
 {
  CullMode tolua_ret = (CullMode)  self->GetCullMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCullMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowCullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetShadowCullMode00
static int tolua_GraphicsLuaAPI_Material_GetShadowCullMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowCullMode'", NULL);
#endif
 {
  CullMode tolua_ret = (CullMode)  self->GetShadowCullMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowCullMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFillMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetFillMode00
static int tolua_GraphicsLuaAPI_Material_GetFillMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFillMode'", NULL);
#endif
 {
  FillMode tolua_ret = (FillMode)  self->GetFillMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFillMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDepthBias of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetDepthBias00
static int tolua_GraphicsLuaAPI_Material_GetDepthBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDepthBias'", NULL);
#endif
 {
  const BiasParameters& tolua_ret = (const BiasParameters&)  self->GetDepthBias();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const BiasParameters");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDepthBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAlphaToCoverage of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetAlphaToCoverage00
static int tolua_GraphicsLuaAPI_Material_GetAlphaToCoverage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAlphaToCoverage'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetAlphaToCoverage();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAlphaToCoverage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLineAntiAlias of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetLineAntiAlias00
static int tolua_GraphicsLuaAPI_Material_GetLineAntiAlias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLineAntiAlias'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetLineAntiAlias();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLineAntiAlias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRenderOrder of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetRenderOrder00
static int tolua_GraphicsLuaAPI_Material_GetRenderOrder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRenderOrder'", NULL);
#endif
 {
  unsigned char tolua_ret = (unsigned char)  self->GetRenderOrder();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRenderOrder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOcclusion of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetOcclusion00
static int tolua_GraphicsLuaAPI_Material_GetOcclusion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOcclusion'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetOcclusion();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOcclusion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSpecular of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetSpecular00
static int tolua_GraphicsLuaAPI_Material_GetSpecular00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSpecular'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSpecular();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSpecular'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetScene of class  Material */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Material_GetScene00
static int tolua_GraphicsLuaAPI_Material_GetScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Material* self = (const Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetScene'", NULL);
#endif
 {
  Scene* tolua_ret = (Scene*)  self->GetScene();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Scene");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_vertexShaderDefines
static int tolua_get_Material_vertexShaderDefines(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefines'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetVertexShaderDefines());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_vertexShaderDefines
static int tolua_set_Material_vertexShaderDefines(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefines'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetVertexShaderDefines(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pixelShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_pixelShaderDefines
static int tolua_get_Material_pixelShaderDefines(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefines'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetPixelShaderDefines());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pixelShaderDefines of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_pixelShaderDefines
static int tolua_set_Material_pixelShaderDefines(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefines'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPixelShaderDefines(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: cullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_cullMode
static int tolua_get_Material_cullMode(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cullMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetCullMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: cullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_cullMode
static int tolua_set_Material_cullMode(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cullMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCullMode(((CullMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowCullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_shadowCullMode
static int tolua_get_Material_shadowCullMode(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowCullMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowCullMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowCullMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_shadowCullMode
static int tolua_set_Material_shadowCullMode(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowCullMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowCullMode(((CullMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fillMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_fillMode
static int tolua_get_Material_fillMode(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fillMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFillMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fillMode of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_fillMode
static int tolua_set_Material_fillMode(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fillMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFillMode(((FillMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: depthBias of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_depthBias
static int tolua_get_Material_depthBias(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'depthBias'",NULL);
#endif
 BiasParameters tolua_ret = (BiasParameters)self->GetDepthBias();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((BiasParameters)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"BiasParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(BiasParameters));
 tolua_pushusertype(tolua_S,tolua_obj,"BiasParameters");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: depthBias of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_depthBias
static int tolua_set_Material_depthBias(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'depthBias'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"BiasParameters",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDepthBias(*((BiasParameters*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: alphaToCoverage of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_alphaToCoverage
static int tolua_get_Material_alphaToCoverage(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'alphaToCoverage'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetAlphaToCoverage());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: alphaToCoverage of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_alphaToCoverage
static int tolua_set_Material_alphaToCoverage(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'alphaToCoverage'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAlphaToCoverage(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lineAntiAlias of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_lineAntiAlias
static int tolua_get_Material_lineAntiAlias(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lineAntiAlias'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetLineAntiAlias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lineAntiAlias of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_lineAntiAlias
static int tolua_set_Material_lineAntiAlias(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lineAntiAlias'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLineAntiAlias(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: renderOrder of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_unsigned_renderOrder
static int tolua_get_Material_unsigned_renderOrder(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'renderOrder'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetRenderOrder());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: renderOrder of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_unsigned_renderOrder
static int tolua_set_Material_unsigned_renderOrder(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'renderOrder'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRenderOrder((( unsigned char)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occlusion of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_occlusion
static int tolua_get_Material_occlusion(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusion'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetOcclusion());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occlusion of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_occlusion
static int tolua_set_Material_occlusion(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusion'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOcclusion(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: specular of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_specular
static int tolua_get_Material_specular(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'specular'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSpecular());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: scene of class  Material */
#ifndef TOLUA_DISABLE_tolua_get_Material_scene_ptr
static int tolua_get_Material_scene_ptr(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scene'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetScene(),"Scene");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: scene of class  Material */
#ifndef TOLUA_DISABLE_tolua_set_Material_scene_ptr
static int tolua_set_Material_scene_ptr(lua_State* tolua_S)
{
  Material* self = (Material*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scene'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetScene(((Scene*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_new00
static int tolua_GraphicsLuaAPI_VertexBuffer_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  VertexBuffer* tolua_ret = (VertexBuffer*)  Mtolua_new((VertexBuffer)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_new00_local
static int tolua_GraphicsLuaAPI_VertexBuffer_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  VertexBuffer* tolua_ret = (VertexBuffer*)  Mtolua_new((VertexBuffer)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexBuffer");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_delete00
static int tolua_GraphicsLuaAPI_VertexBuffer_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowed of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_SetShadowed00
static int tolua_GraphicsLuaAPI_VertexBuffer_SetShadowed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowed'", NULL);
#endif
 {
  self->SetShadowed(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_SetSize00
static int tolua_GraphicsLuaAPI_VertexBuffer_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !ToluaIsPODVector<VertexElement>(tolua_S,3,"VertexElement",0,&tolua_err)) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  unsigned vertexCount = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const PODVector<VertexElement>* elements = ((const PODVector<VertexElement>*)  ToluaToPODVector<VertexElement>(tolua_S,3,0));
  bool dynamic = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(vertexCount,*elements,dynamic);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_SetSize01
static int tolua_GraphicsLuaAPI_VertexBuffer_SetSize01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  unsigned vertexCount = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned elementMask = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  bool dynamic = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(vertexCount,elementMask,dynamic);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_VertexBuffer_SetSize00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: VertexBufferSetData of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_SetData00
static int tolua_GraphicsLuaAPI_VertexBuffer_SetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"VectorBuffer",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VectorBuffer* data = ((VectorBuffer*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'VertexBufferSetData'", NULL);
#endif
 {
  tolua_outside bool tolua_ret = (tolua_outside bool)  VertexBufferSetData(self,*data);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: VertexBufferSetDataRange of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_SetDataRange00
static int tolua_GraphicsLuaAPI_VertexBuffer_SetDataRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"VectorBuffer",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VectorBuffer* data = ((VectorBuffer*)  tolua_tousertype(tolua_S,2,0));
  unsigned start = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned count = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  bool discard = ((bool)  tolua_toboolean(tolua_S,5,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'VertexBufferSetDataRange'", NULL);
#endif
 {
  tolua_outside bool tolua_ret = (tolua_outside bool)  VertexBufferSetDataRange(self,*data,start,count,discard);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDataRange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: VertexBufferGetData of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetData00
static int tolua_GraphicsLuaAPI_VertexBuffer_GetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'VertexBufferGetData'", NULL);
#endif
 {
  tolua_outside VectorBuffer tolua_ret = (tolua_outside VectorBuffer)  VertexBufferGetData(self);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((VectorBuffer)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"VectorBuffer");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(VectorBuffer));
  tolua_pushusertype(tolua_S,tolua_obj,"VectorBuffer");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsShadowed of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_IsShadowed00
static int tolua_GraphicsLuaAPI_VertexBuffer_IsShadowed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsShadowed'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsShadowed();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsShadowed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsDynamic of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_IsDynamic00
static int tolua_GraphicsLuaAPI_VertexBuffer_IsDynamic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsDynamic'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsDynamic();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsDynamic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexCount of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetVertexCount00
static int tolua_GraphicsLuaAPI_VertexBuffer_GetVertexCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexCount'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetVertexCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexSize of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetVertexSize00
static int tolua_GraphicsLuaAPI_VertexBuffer_GetVertexSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexSize'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetVertexSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: VertexBufferGetElements of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetElements00
static int tolua_GraphicsLuaAPI_VertexBuffer_GetElements00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'VertexBufferGetElements'", NULL);
#endif
 {
  tolua_outside  const PODVector<VertexElement>& tolua_ret = (tolua_outside  const PODVector<VertexElement>&)  VertexBufferGetElements(self);
  ToluaPushPODVector<VertexElement>(tolua_S,(void*)&tolua_ret,"VertexElement");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetElements'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: HasElement of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_HasElement00
static int tolua_GraphicsLuaAPI_VertexBuffer_HasElement00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VertexElementSemantic semantic = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,2,0));
  unsigned char index = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasElement'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->HasElement(semantic,index);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasElement'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: HasElement of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_HasElement01
static int tolua_GraphicsLuaAPI_VertexBuffer_HasElement01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VertexElementType type = ((VertexElementType) (int)  tolua_tonumber(tolua_S,2,0));
  VertexElementSemantic semantic = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,3,0));
  unsigned char index = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasElement'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->HasElement(type,semantic,index);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_VertexBuffer_HasElement00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetElementOffset of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset00
static int tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VertexElementSemantic semantic = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,2,0));
  unsigned char index = ((unsigned char)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetElementOffset'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetElementOffset(semantic,index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetElementOffset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetElementOffset of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset01
static int tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VertexElementType type = ((VertexElementType) (int)  tolua_tonumber(tolua_S,2,0));
  VertexElementSemantic semantic = ((VertexElementSemantic) (int)  tolua_tonumber(tolua_S,3,0));
  unsigned char index = ((unsigned char)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetElementOffset'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetElementOffset(type,semantic,index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetElementMask of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_VertexBuffer_GetElementMask00
static int tolua_GraphicsLuaAPI_VertexBuffer_GetElementMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const VertexBuffer* self = (const VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetElementMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetElementMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetElementMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowed of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_VertexBuffer_shadowed
static int tolua_get_VertexBuffer_shadowed(lua_State* tolua_S)
{
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowed'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsShadowed());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowed of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_set_VertexBuffer_shadowed
static int tolua_set_VertexBuffer_shadowed(lua_State* tolua_S)
{
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowed'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowed(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dynamic of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_VertexBuffer_dynamic
static int tolua_get_VertexBuffer_dynamic(lua_State* tolua_S)
{
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dynamic'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsDynamic());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexCount of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_VertexBuffer_vertexCount
static int tolua_get_VertexBuffer_vertexCount(lua_State* tolua_S)
{
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetVertexCount());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexSize of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_VertexBuffer_vertexSize
static int tolua_get_VertexBuffer_vertexSize(lua_State* tolua_S)
{
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetVertexSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: elementMask of class  VertexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_VertexBuffer_elementMask
static int tolua_get_VertexBuffer_elementMask(lua_State* tolua_S)
{
  VertexBuffer* self = (VertexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'elementMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetElementMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_new00
static int tolua_GraphicsLuaAPI_IndexBuffer_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  IndexBuffer* tolua_ret = (IndexBuffer*)  Mtolua_new((IndexBuffer)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"IndexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_new00_local
static int tolua_GraphicsLuaAPI_IndexBuffer_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  IndexBuffer* tolua_ret = (IndexBuffer*)  Mtolua_new((IndexBuffer)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"IndexBuffer");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_delete00
static int tolua_GraphicsLuaAPI_IndexBuffer_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowed of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_SetShadowed00
static int tolua_GraphicsLuaAPI_IndexBuffer_SetShadowed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowed'", NULL);
#endif
 {
  self->SetShadowed(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_SetSize00
static int tolua_GraphicsLuaAPI_IndexBuffer_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
  unsigned indexCount = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  bool largeIndices = ((bool)  tolua_toboolean(tolua_S,3,0));
  bool dynamic = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(indexCount,largeIndices,dynamic);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IndexBufferSetData of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_SetData00
static int tolua_GraphicsLuaAPI_IndexBuffer_SetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"VectorBuffer",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VectorBuffer* data = ((VectorBuffer*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexBufferSetData'", NULL);
#endif
 {
  tolua_outside bool tolua_ret = (tolua_outside bool)  IndexBufferSetData(self,*data);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IndexBufferSetDataRange of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_SetDataRange00
static int tolua_GraphicsLuaAPI_IndexBuffer_SetDataRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"VectorBuffer",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
  VectorBuffer* data = ((VectorBuffer*)  tolua_tousertype(tolua_S,2,0));
  unsigned start = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned count = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  bool discard = ((bool)  tolua_toboolean(tolua_S,5,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexBufferSetDataRange'", NULL);
#endif
 {
  tolua_outside bool tolua_ret = (tolua_outside bool)  IndexBufferSetDataRange(self,*data,start,count,discard);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDataRange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IndexBufferGetData of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_GetData00
static int tolua_GraphicsLuaAPI_IndexBuffer_GetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IndexBufferGetData'", NULL);
#endif
 {
  tolua_outside VectorBuffer tolua_ret = (tolua_outside VectorBuffer)  IndexBufferGetData(self);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((VectorBuffer)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"VectorBuffer");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(VectorBuffer));
  tolua_pushusertype(tolua_S,tolua_obj,"VectorBuffer");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsShadowed of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_IsShadowed00
static int tolua_GraphicsLuaAPI_IndexBuffer_IsShadowed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const IndexBuffer* self = (const IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsShadowed'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsShadowed();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsShadowed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsDynamic of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_IsDynamic00
static int tolua_GraphicsLuaAPI_IndexBuffer_IsDynamic00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const IndexBuffer* self = (const IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsDynamic'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsDynamic();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsDynamic'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetIndexCount of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_GetIndexCount00
static int tolua_GraphicsLuaAPI_IndexBuffer_GetIndexCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const IndexBuffer* self = (const IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIndexCount'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetIndexCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIndexCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetIndexSize of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_IndexBuffer_GetIndexSize00
static int tolua_GraphicsLuaAPI_IndexBuffer_GetIndexSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const IndexBuffer* self = (const IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIndexSize'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetIndexSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIndexSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowed of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_IndexBuffer_shadowed
static int tolua_get_IndexBuffer_shadowed(lua_State* tolua_S)
{
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowed'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsShadowed());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowed of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_set_IndexBuffer_shadowed
static int tolua_set_IndexBuffer_shadowed(lua_State* tolua_S)
{
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowed'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowed(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dynamic of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_IndexBuffer_dynamic
static int tolua_get_IndexBuffer_dynamic(lua_State* tolua_S)
{
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dynamic'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsDynamic());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: indexCount of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_IndexBuffer_indexCount
static int tolua_get_IndexBuffer_indexCount(lua_State* tolua_S)
{
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'indexCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetIndexCount());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: indexSize of class  IndexBuffer */
#ifndef TOLUA_DISABLE_tolua_get_IndexBuffer_indexSize
static int tolua_get_IndexBuffer_indexSize(lua_State* tolua_S)
{
  IndexBuffer* self = (IndexBuffer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'indexSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetIndexSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_new00
static int tolua_GraphicsLuaAPI_Geometry_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Geometry* tolua_ret = (Geometry*)  Mtolua_new((Geometry)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Geometry");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_new00_local
static int tolua_GraphicsLuaAPI_Geometry_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Geometry* tolua_ret = (Geometry*)  Mtolua_new((Geometry)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Geometry");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_delete00
static int tolua_GraphicsLuaAPI_Geometry_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumVertexBuffers of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_SetNumVertexBuffers00
static int tolua_GraphicsLuaAPI_Geometry_SetNumVertexBuffers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumVertexBuffers'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetNumVertexBuffers(num);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumVertexBuffers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexBuffer of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_SetVertexBuffer00
static int tolua_GraphicsLuaAPI_Geometry_SetVertexBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"VertexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  VertexBuffer* buffer = ((VertexBuffer*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexBuffer'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetVertexBuffer(index,buffer);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetIndexBuffer of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_SetIndexBuffer00
static int tolua_GraphicsLuaAPI_Geometry_SetIndexBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"IndexBuffer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
  IndexBuffer* buffer = ((IndexBuffer*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetIndexBuffer'", NULL);
#endif
 {
  self->SetIndexBuffer(buffer);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetIndexBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDrawRange of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_SetDrawRange00
static int tolua_GraphicsLuaAPI_Geometry_SetDrawRange00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
  PrimitiveType type = ((PrimitiveType) (int)  tolua_tonumber(tolua_S,2,0));
  unsigned indexStart = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned indexCount = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  bool getUsedVertexRange = ((bool)  tolua_toboolean(tolua_S,5,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDrawRange'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetDrawRange(type,indexStart,indexCount,getUsedVertexRange);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDrawRange'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDrawRange of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_SetDrawRange01
static int tolua_GraphicsLuaAPI_Geometry_SetDrawRange01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
  PrimitiveType type = ((PrimitiveType) (int)  tolua_tonumber(tolua_S,2,0));
  unsigned indexStart = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  unsigned indexCount = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  unsigned vertexStart = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  unsigned vertexCount = ((unsigned)  tolua_tonumber(tolua_S,6,0));
  bool checkIllegal = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDrawRange'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetDrawRange(type,indexStart,indexCount,vertexStart,vertexCount,checkIllegal);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Geometry_SetDrawRange00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLodDistance of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_SetLodDistance00
static int tolua_GraphicsLuaAPI_Geometry_SetLodDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLodDistance'", NULL);
#endif
 {
  self->SetLodDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLodDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumVertexBuffers of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetNumVertexBuffers00
static int tolua_GraphicsLuaAPI_Geometry_GetNumVertexBuffers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumVertexBuffers'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumVertexBuffers();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumVertexBuffers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexBuffer of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetVertexBuffer00
static int tolua_GraphicsLuaAPI_Geometry_GetVertexBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexBuffer'", NULL);
#endif
 {
  VertexBuffer* tolua_ret = (VertexBuffer*)  self->GetVertexBuffer(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetIndexBuffer of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetIndexBuffer00
static int tolua_GraphicsLuaAPI_Geometry_GetIndexBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIndexBuffer'", NULL);
#endif
 {
  IndexBuffer* tolua_ret = (IndexBuffer*)  self->GetIndexBuffer();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"IndexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIndexBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPrimitiveType of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetPrimitiveType00
static int tolua_GraphicsLuaAPI_Geometry_GetPrimitiveType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPrimitiveType'", NULL);
#endif
 {
  PrimitiveType tolua_ret = (PrimitiveType)  self->GetPrimitiveType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPrimitiveType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetIndexStart of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetIndexStart00
static int tolua_GraphicsLuaAPI_Geometry_GetIndexStart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIndexStart'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetIndexStart();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIndexStart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetIndexCount of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetIndexCount00
static int tolua_GraphicsLuaAPI_Geometry_GetIndexCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIndexCount'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetIndexCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIndexCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexStart of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetVertexStart00
static int tolua_GraphicsLuaAPI_Geometry_GetVertexStart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexStart'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetVertexStart();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexStart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexCount of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetVertexCount00
static int tolua_GraphicsLuaAPI_Geometry_GetVertexCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexCount'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetVertexCount();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLodDistance of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_GetLodDistance00
static int tolua_GraphicsLuaAPI_Geometry_GetLodDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLodDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLodDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLodDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsEmpty of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Geometry_IsEmpty00
static int tolua_GraphicsLuaAPI_Geometry_IsEmpty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Geometry* self = (const Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsEmpty'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsEmpty();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsEmpty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numVertexBuffers of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_numVertexBuffers
static int tolua_get_Geometry_numVertexBuffers(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numVertexBuffers'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumVertexBuffers());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numVertexBuffers of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_set_Geometry_numVertexBuffers
static int tolua_set_Geometry_numVertexBuffers(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numVertexBuffers'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumVertexBuffers(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: indexBuffer of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_indexBuffer_ptr
static int tolua_get_Geometry_indexBuffer_ptr(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'indexBuffer'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetIndexBuffer(),"IndexBuffer");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: indexBuffer of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_set_Geometry_indexBuffer_ptr
static int tolua_set_Geometry_indexBuffer_ptr(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'indexBuffer'",NULL);
 if (!tolua_isusertype(tolua_S,2,"IndexBuffer",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetIndexBuffer(((IndexBuffer*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: primitiveType of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_primitiveType
static int tolua_get_Geometry_primitiveType(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'primitiveType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetPrimitiveType());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: indexStart of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_indexStart
static int tolua_get_Geometry_indexStart(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'indexStart'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetIndexStart());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: indexCount of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_indexCount
static int tolua_get_Geometry_indexCount(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'indexCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetIndexCount());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexStart of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_vertexStart
static int tolua_get_Geometry_vertexStart(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexStart'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetVertexStart());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexCount of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_vertexCount
static int tolua_get_Geometry_vertexCount(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexCount'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetVertexCount());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lodDistance of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_lodDistance
static int tolua_get_Geometry_lodDistance(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLodDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lodDistance of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_set_Geometry_lodDistance
static int tolua_set_Geometry_lodDistance(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLodDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: empty of class  Geometry */
#ifndef TOLUA_DISABLE_tolua_get_Geometry_empty
static int tolua_get_Geometry_empty(lua_State* tolua_S)
{
  Geometry* self = (Geometry*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'empty'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsEmpty());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_new00
static int tolua_GraphicsLuaAPI_Model_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Model* tolua_ret = (Model*)  Mtolua_new((Model)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Model");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_new00_local
static int tolua_GraphicsLuaAPI_Model_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Model* tolua_ret = (Model*)  Mtolua_new((Model)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Model");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_delete00
static int tolua_GraphicsLuaAPI_Model_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ModelClone of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_Clone00
static int tolua_GraphicsLuaAPI_Model_Clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  const String cloneName = ((const String)  tolua_tourho3dstring(tolua_S,2,String::EMPTY));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ModelClone'", NULL);
#endif
 {
  tolua_outside Model* tolua_ret = (tolua_outside Model*)  ModelClone(self,cloneName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Model");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBoundingBox of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetBoundingBox00
static int tolua_GraphicsLuaAPI_Model_SetBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBoundingBox'", NULL);
#endif
 {
  self->SetBoundingBox(*box);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexBuffers of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetVertexBuffers00
static int tolua_GraphicsLuaAPI_Model_SetVertexBuffers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !ToluaIsVector<SharedPtr<VertexBuffer> >(tolua_S,2,"const Vector<SharedPtr<VertexBuffer> >",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !ToluaIsPODVector<unsigned>(0.f,tolua_S,3,"unsigned",0,&tolua_err)) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !ToluaIsPODVector<unsigned>(0.f,tolua_S,4,"unsigned",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  const Vector<SharedPtr<VertexBuffer> >* buffers = ((const Vector<SharedPtr<VertexBuffer> >*)  ToluaToVector<SharedPtr<VertexBuffer> >(tolua_S,2,0));
  const PODVector<unsigned>* morphRangeStarts = ((const PODVector<unsigned>*)  ToluaToPODVector<unsigned>(0.f,tolua_S,3,0));
  const PODVector<unsigned>* morphRangeCounts = ((const PODVector<unsigned>*)  ToluaToPODVector<unsigned>(0.f,tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexBuffers'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetVertexBuffers(*buffers,*morphRangeStarts,*morphRangeCounts);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexBuffers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetIndexBuffers of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetIndexBuffers00
static int tolua_GraphicsLuaAPI_Model_SetIndexBuffers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !ToluaIsVector<SharedPtr<IndexBuffer> >(tolua_S,2,"const Vector<SharedPtr<IndexBuffer> >",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  const Vector<SharedPtr<IndexBuffer> >* buffers = ((const Vector<SharedPtr<IndexBuffer> >*)  ToluaToVector<SharedPtr<IndexBuffer> >(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetIndexBuffers'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetIndexBuffers(*buffers);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetIndexBuffers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumGeometries of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetNumGeometries00
static int tolua_GraphicsLuaAPI_Model_SetNumGeometries00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumGeometries'", NULL);
#endif
 {
  self->SetNumGeometries(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumGeometries'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumGeometryLodLevels of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetNumGeometryLodLevels00
static int tolua_GraphicsLuaAPI_Model_SetNumGeometryLodLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumGeometryLodLevels'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetNumGeometryLodLevels(index,num);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumGeometryLodLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetGeometry of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetGeometry00
static int tolua_GraphicsLuaAPI_Model_SetGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"Geometry",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned lodLevel = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  Geometry* geometry = ((Geometry*)  tolua_tousertype(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetGeometry'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetGeometry(index,lodLevel,geometry);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetGeometryCenter of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_SetGeometryCenter00
static int tolua_GraphicsLuaAPI_Model_SetGeometryCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const Vector3* center = ((const Vector3*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetGeometryCenter'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetGeometryCenter(index,*center);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetGeometryCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoundingBox of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetBoundingBox00
static int tolua_GraphicsLuaAPI_Model_GetBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoundingBox'", NULL);
#endif
 {
  const BoundingBox& tolua_ret = (const BoundingBox&)  self->GetBoundingBox();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const BoundingBox");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSkeleton of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetSkeleton00
static int tolua_GraphicsLuaAPI_Model_GetSkeleton00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSkeleton'", NULL);
#endif
 {
  Skeleton& tolua_ret = (Skeleton&)  self->GetSkeleton();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"Skeleton");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSkeleton'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumGeometries of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetNumGeometries00
static int tolua_GraphicsLuaAPI_Model_GetNumGeometries00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumGeometries'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumGeometries();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumGeometries'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumGeometryLodLevels of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetNumGeometryLodLevels00
static int tolua_GraphicsLuaAPI_Model_GetNumGeometryLodLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumGeometryLodLevels'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumGeometryLodLevels(index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumGeometryLodLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetGeometry of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetGeometry00
static int tolua_GraphicsLuaAPI_Model_GetGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  unsigned lodLevel = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetGeometry'", NULL);
#endif
 {
  Geometry* tolua_ret = (Geometry*)  self->GetGeometry(index,lodLevel);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Geometry");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetGeometryCenter of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetGeometryCenter00
static int tolua_GraphicsLuaAPI_Model_GetGeometryCenter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetGeometryCenter'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetGeometryCenter(index);
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGeometryCenter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumMorphs of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetNumMorphs00
static int tolua_GraphicsLuaAPI_Model_GetNumMorphs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumMorphs'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumMorphs();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumMorphs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorph of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetMorph00
static int tolua_GraphicsLuaAPI_Model_GetMorph00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorph'", NULL);
#endif
 {
  const ModelMorph* tolua_ret = (const ModelMorph*)  self->GetMorph(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"const ModelMorph");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMorph'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorph of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetMorph01
static int tolua_GraphicsLuaAPI_Model_GetMorph01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  StringHash nameHash = *((StringHash*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorph'", NULL);
#endif
 {
  const ModelMorph* tolua_ret = (const ModelMorph*)  self->GetMorph(nameHash);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"const ModelMorph");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Model_GetMorph00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorph of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetMorph02
static int tolua_GraphicsLuaAPI_Model_GetMorph02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorph'", NULL);
#endif
 {
  const ModelMorph* tolua_ret = (const ModelMorph*)  self->GetMorph(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"const ModelMorph");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Model_GetMorph01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorphRangeStart of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetMorphRangeStart00
static int tolua_GraphicsLuaAPI_Model_GetMorphRangeStart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned bufferIndex = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorphRangeStart'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMorphRangeStart(bufferIndex);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMorphRangeStart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMorphRangeCount of class  Model */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Model_GetMorphRangeCount00
static int tolua_GraphicsLuaAPI_Model_GetMorphRangeCount00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Model",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Model* self = (const Model*)  tolua_tousertype(tolua_S,1,0);
  unsigned bufferIndex = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMorphRangeCount'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMorphRangeCount(bufferIndex);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMorphRangeCount'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: boundingBox of class  Model */
#ifndef TOLUA_DISABLE_tolua_get_Model_boundingBox_ref
static int tolua_get_Model_boundingBox_ref(lua_State* tolua_S)
{
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetBoundingBox(),"BoundingBox");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: boundingBox of class  Model */
#ifndef TOLUA_DISABLE_tolua_set_Model_boundingBox_ref
static int tolua_set_Model_boundingBox_ref(lua_State* tolua_S)
{
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"BoundingBox",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBoundingBox((*(BoundingBox*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: skeleton of class  Model */
#ifndef TOLUA_DISABLE_tolua_get_Model_skeleton
static int tolua_get_Model_skeleton(lua_State* tolua_S)
{
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'skeleton'",NULL);
#endif
 Skeleton tolua_ret = (Skeleton)self->GetSkeleton();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Skeleton)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Skeleton");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Skeleton));
 tolua_pushusertype(tolua_S,tolua_obj,"Skeleton");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numGeometries of class  Model */
#ifndef TOLUA_DISABLE_tolua_get_Model_numGeometries
static int tolua_get_Model_numGeometries(lua_State* tolua_S)
{
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numGeometries'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumGeometries());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numGeometries of class  Model */
#ifndef TOLUA_DISABLE_tolua_set_Model_numGeometries
static int tolua_set_Model_numGeometries(lua_State* tolua_S)
{
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numGeometries'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumGeometries(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numMorphs of class  Model */
#ifndef TOLUA_DISABLE_tolua_get_Model_numMorphs
static int tolua_get_Model_numMorphs(lua_State* tolua_S)
{
  Model* self = (Model*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numMorphs'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumMorphs());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_SetSize00
static int tolua_GraphicsLuaAPI_Octree_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
  unsigned numLevels = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  self->SetSize(*box,numLevels);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Update of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_Update00
static int tolua_GraphicsLuaAPI_Octree_Update00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const FrameInfo",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
  const FrameInfo* frame = ((const FrameInfo*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Update'", NULL);
#endif
 {
  self->Update(*frame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Update'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddManualDrawable of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_AddManualDrawable00
static int tolua_GraphicsLuaAPI_Octree_AddManualDrawable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Octree",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
  Drawable* drawable = ((Drawable*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddManualDrawable'", NULL);
#endif
 {
  self->AddManualDrawable(drawable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddManualDrawable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveManualDrawable of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_RemoveManualDrawable00
static int tolua_GraphicsLuaAPI_Octree_RemoveManualDrawable00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Octree",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
  Drawable* drawable = ((Drawable*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveManualDrawable'", NULL);
#endif
 {
  self->RemoveManualDrawable(drawable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveManualDrawable'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeGetDrawablesPoint of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_GetDrawables00
static int tolua_GraphicsLuaAPI_Octree_GetDrawables00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* point = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,3,DRAWABLE_ANY));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,4,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeGetDrawablesPoint'", NULL);
#endif
 {
  tolua_outside  const PODVector<OctreeQueryResult>& tolua_ret = (tolua_outside  const PODVector<OctreeQueryResult>&)  OctreeGetDrawablesPoint(self,*point,drawableFlags,viewMask);
  ToluaPushPODVector<OctreeQueryResult>(tolua_S,(void*)&tolua_ret,"OctreeQueryResult");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDrawables'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeGetDrawablesBoundingBox of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_GetDrawables01
static int tolua_GraphicsLuaAPI_Octree_GetDrawables01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,3,DRAWABLE_ANY));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,4,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeGetDrawablesBoundingBox'", NULL);
#endif
 {
  tolua_outside  const PODVector<OctreeQueryResult>& tolua_ret = (tolua_outside  const PODVector<OctreeQueryResult>&)  OctreeGetDrawablesBoundingBox(self,*box,drawableFlags,viewMask);
  ToluaPushPODVector<OctreeQueryResult>(tolua_S,(void*)&tolua_ret,"OctreeQueryResult");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Octree_GetDrawables00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeGetDrawablesFrustum of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_GetDrawables02
static int tolua_GraphicsLuaAPI_Octree_GetDrawables02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Frustum",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  const Frustum* frustum = ((const Frustum*)  tolua_tousertype(tolua_S,2,0));
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,3,DRAWABLE_ANY));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,4,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeGetDrawablesFrustum'", NULL);
#endif
 {
  tolua_outside  const PODVector<OctreeQueryResult>& tolua_ret = (tolua_outside  const PODVector<OctreeQueryResult>&)  OctreeGetDrawablesFrustum(self,*frustum,drawableFlags,viewMask);
  ToluaPushPODVector<OctreeQueryResult>(tolua_S,(void*)&tolua_ret,"OctreeQueryResult");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Octree_GetDrawables01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeGetDrawablesSphere of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_GetDrawables03
static int tolua_GraphicsLuaAPI_Octree_GetDrawables03(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Sphere",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  const Sphere* sphere = ((const Sphere*)  tolua_tousertype(tolua_S,2,0));
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,3,DRAWABLE_ANY));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,4,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeGetDrawablesSphere'", NULL);
#endif
 {
  tolua_outside  const PODVector<OctreeQueryResult>& tolua_ret = (tolua_outside  const PODVector<OctreeQueryResult>&)  OctreeGetDrawablesSphere(self,*sphere,drawableFlags,viewMask);
  ToluaPushPODVector<OctreeQueryResult>(tolua_S,(void*)&tolua_ret,"OctreeQueryResult");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Octree_GetDrawables02(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeGetAllDrawables of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_GetAllDrawables00
static int tolua_GraphicsLuaAPI_Octree_GetAllDrawables00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,2,DRAWABLE_ANY));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,3,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeGetAllDrawables'", NULL);
#endif
 {
  tolua_outside  const PODVector<OctreeQueryResult>& tolua_ret = (tolua_outside  const PODVector<OctreeQueryResult>&)  OctreeGetAllDrawables(self,drawableFlags,viewMask);
  ToluaPushPODVector<OctreeQueryResult>(tolua_S,(void*)&tolua_ret,"OctreeQueryResult");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAllDrawables'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeRaycast of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_Raycast00
static int tolua_GraphicsLuaAPI_Octree_Raycast00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Ray",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  const Ray* ray = ((const Ray*)  tolua_tousertype(tolua_S,2,0));
  RayQueryLevel level = ((RayQueryLevel) (int)  tolua_tonumber(tolua_S,3,0));
  float maxDistance = ((float)  tolua_tonumber(tolua_S,4,0));
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,5,0));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,6,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeRaycast'", NULL);
#endif
 {
  tolua_outside  const PODVector<RayQueryResult>& tolua_ret = (tolua_outside  const PODVector<RayQueryResult>&)  OctreeRaycast(self,*ray,level,maxDistance,drawableFlags,viewMask);
  ToluaPushPODVector<RayQueryResult>(tolua_S,(void*)&tolua_ret,"RayQueryResult");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Raycast'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: OctreeRaycastSingle of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_RaycastSingle00
static int tolua_GraphicsLuaAPI_Octree_RaycastSingle00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Ray",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
  const Ray* ray = ((const Ray*)  tolua_tousertype(tolua_S,2,0));
  RayQueryLevel level = ((RayQueryLevel) (int)  tolua_tonumber(tolua_S,3,0));
  float maxDistance = ((float)  tolua_tonumber(tolua_S,4,0));
  unsigned char drawableFlags = ((unsigned char)  tolua_tonumber(tolua_S,5,0));
  unsigned viewMask = ((unsigned)  tolua_tonumber(tolua_S,6,DEFAULT_VIEWMASK));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'OctreeRaycastSingle'", NULL);
#endif
 {
  tolua_outside RayQueryResult tolua_ret = (tolua_outside RayQueryResult)  OctreeRaycastSingle(self,*ray,level,maxDistance,drawableFlags,viewMask);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((RayQueryResult)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"RayQueryResult");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(RayQueryResult));
  tolua_pushusertype(tolua_S,tolua_obj,"RayQueryResult");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RaycastSingle'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumLevels of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_GetNumLevels00
static int tolua_GraphicsLuaAPI_Octree_GetNumLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Octree",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Octree* self = (const Octree*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumLevels'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumLevels();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: QueueUpdate of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_QueueUpdate00
static int tolua_GraphicsLuaAPI_Octree_QueueUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Octree",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Drawable",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
  Drawable* drawable = ((Drawable*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'QueueUpdate'", NULL);
#endif
 {
  self->QueueUpdate(drawable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'QueueUpdate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DrawDebugGeometry of class  Octree */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Octree_DrawDebugGeometry00
static int tolua_GraphicsLuaAPI_Octree_DrawDebugGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Octree",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawDebugGeometry'", NULL);
#endif
 {
  self->DrawDebugGeometry(depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DrawDebugGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numLevels of class  Octree */
#ifndef TOLUA_DISABLE_tolua_get_Octree_numLevels
static int tolua_get_Octree_numLevels(lua_State* tolua_S)
{
  Octree* self = (Octree*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numLevels'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumLevels());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_OctreeQueryResult_new00
static int tolua_GraphicsLuaAPI_OctreeQueryResult_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"OctreeQueryResult",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  OctreeQueryResult* tolua_ret = (OctreeQueryResult*)  Mtolua_new((OctreeQueryResult)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"OctreeQueryResult");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_OctreeQueryResult_new00_local
static int tolua_GraphicsLuaAPI_OctreeQueryResult_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"OctreeQueryResult",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  OctreeQueryResult* tolua_ret = (OctreeQueryResult*)  Mtolua_new((OctreeQueryResult)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"OctreeQueryResult");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_OctreeQueryResult_delete00
static int tolua_GraphicsLuaAPI_OctreeQueryResult_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"OctreeQueryResult",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  OctreeQueryResult* self = (OctreeQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawable_ of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_OctreeQueryResult_drawable_ptr
static int tolua_get_OctreeQueryResult_drawable_ptr(lua_State* tolua_S)
{
  OctreeQueryResult* self = (OctreeQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawable_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->drawable_,"Drawable");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: drawable_ of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_OctreeQueryResult_drawable_ptr
static int tolua_set_OctreeQueryResult_drawable_ptr(lua_State* tolua_S)
{
  OctreeQueryResult* self = (OctreeQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawable_'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Drawable",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->drawable_ = ((Drawable*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: node_ of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_OctreeQueryResult_node_ptr
static int tolua_get_OctreeQueryResult_node_ptr(lua_State* tolua_S)
{
  OctreeQueryResult* self = (OctreeQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'node_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->node_,"Node");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: node_ of class  OctreeQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_OctreeQueryResult_node_ptr
static int tolua_set_OctreeQueryResult_node_ptr(lua_State* tolua_S)
{
  OctreeQueryResult* self = (OctreeQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'node_'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->node_ = ((Node*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RayQueryResult_new00
static int tolua_GraphicsLuaAPI_RayQueryResult_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RayQueryResult",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  RayQueryResult* tolua_ret = (RayQueryResult*)  Mtolua_new((RayQueryResult)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RayQueryResult");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RayQueryResult_new00_local
static int tolua_GraphicsLuaAPI_RayQueryResult_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RayQueryResult",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  RayQueryResult* tolua_ret = (RayQueryResult*)  Mtolua_new((RayQueryResult)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RayQueryResult");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RayQueryResult_delete00
static int tolua_GraphicsLuaAPI_RayQueryResult_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RayQueryResult",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: position_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_position
static int tolua_get_RayQueryResult_position(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->position_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: position_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_position
static int tolua_set_RayQueryResult_position(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'position_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->position_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: normal_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_normal
static int tolua_get_RayQueryResult_normal(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'normal_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->normal_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: normal_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_normal
static int tolua_set_RayQueryResult_normal(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'normal_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->normal_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: textureUV_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_textureUV
static int tolua_get_RayQueryResult_textureUV(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureUV_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->textureUV_,"Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: textureUV_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_textureUV
static int tolua_set_RayQueryResult_textureUV(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureUV_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->textureUV_ = *((Vector2*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: distance_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_distance
static int tolua_get_RayQueryResult_distance(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'distance_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->distance_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: distance_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_distance
static int tolua_set_RayQueryResult_distance(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'distance_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->distance_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawable_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_drawable_ptr
static int tolua_get_RayQueryResult_drawable_ptr(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawable_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->drawable_,"Drawable");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: drawable_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_drawable_ptr
static int tolua_set_RayQueryResult_drawable_ptr(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawable_'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Drawable",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->drawable_ = ((Drawable*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: node_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_node_ptr
static int tolua_get_RayQueryResult_node_ptr(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'node_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->node_,"Node");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: node_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_node_ptr
static int tolua_set_RayQueryResult_node_ptr(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'node_'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->node_ = ((Node*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: subObject_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_get_RayQueryResult_subObject
static int tolua_get_RayQueryResult_subObject(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'subObject_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->subObject_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: subObject_ of class  RayQueryResult */
#ifndef TOLUA_DISABLE_tolua_set_RayQueryResult_subObject
static int tolua_set_RayQueryResult_subObject(lua_State* tolua_S)
{
  RayQueryResult* self = (RayQueryResult*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'subObject_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->subObject_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_new00
static int tolua_GraphicsLuaAPI_ColorFrame_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  ColorFrame* tolua_ret = (ColorFrame*)  Mtolua_new((ColorFrame)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ColorFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_new00_local
static int tolua_GraphicsLuaAPI_ColorFrame_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  ColorFrame* tolua_ret = (ColorFrame*)  Mtolua_new((ColorFrame)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ColorFrame");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_new01
static int tolua_GraphicsLuaAPI_ColorFrame_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
 {
  ColorFrame* tolua_ret = (ColorFrame*)  Mtolua_new((ColorFrame)(*color));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ColorFrame");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_ColorFrame_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_new01_local
static int tolua_GraphicsLuaAPI_ColorFrame_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
 {
  ColorFrame* tolua_ret = (ColorFrame*)  Mtolua_new((ColorFrame)(*color));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ColorFrame");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_ColorFrame_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_new02
static int tolua_GraphicsLuaAPI_ColorFrame_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  ColorFrame* tolua_ret = (ColorFrame*)  Mtolua_new((ColorFrame)(*color,time));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ColorFrame");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_ColorFrame_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_new02_local
static int tolua_GraphicsLuaAPI_ColorFrame_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
 {
  ColorFrame* tolua_ret = (ColorFrame*)  Mtolua_new((ColorFrame)(*color,time));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ColorFrame");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_ColorFrame_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_delete00
static int tolua_GraphicsLuaAPI_ColorFrame_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ColorFrame* self = (ColorFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Interpolate of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ColorFrame_Interpolate00
static int tolua_GraphicsLuaAPI_ColorFrame_Interpolate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ColorFrame",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ColorFrame",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ColorFrame* self = (ColorFrame*)  tolua_tousertype(tolua_S,1,0);
  const ColorFrame* next = ((const ColorFrame*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Interpolate'", NULL);
#endif
 {
  Color tolua_ret = (Color)  self->Interpolate(*next,time);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Color)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Color));
  tolua_pushusertype(tolua_S,tolua_obj,"Color");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Interpolate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: color_ of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_get_ColorFrame_color
static int tolua_get_ColorFrame_color(lua_State* tolua_S)
{
  ColorFrame* self = (ColorFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->color_,"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: color_ of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_set_ColorFrame_color
static int tolua_set_ColorFrame_color(lua_State* tolua_S)
{
  ColorFrame* self = (ColorFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'color_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->color_ = *((Color*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: time_ of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_get_ColorFrame_time
static int tolua_get_ColorFrame_time(lua_State* tolua_S)
{
  ColorFrame* self = (ColorFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->time_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: time_ of class  ColorFrame */
#ifndef TOLUA_DISABLE_tolua_set_ColorFrame_time
static int tolua_set_ColorFrame_time(lua_State* tolua_S)
{
  ColorFrame* self = (ColorFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->time_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureFrame_new00
static int tolua_GraphicsLuaAPI_TextureFrame_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"TextureFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  TextureFrame* tolua_ret = (TextureFrame*)  Mtolua_new((TextureFrame)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TextureFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureFrame_new00_local
static int tolua_GraphicsLuaAPI_TextureFrame_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"TextureFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  TextureFrame* tolua_ret = (TextureFrame*)  Mtolua_new((TextureFrame)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TextureFrame");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureFrame_delete00
static int tolua_GraphicsLuaAPI_TextureFrame_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TextureFrame",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TextureFrame* self = (TextureFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: uv_ of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_get_TextureFrame_uv
static int tolua_get_TextureFrame_uv(lua_State* tolua_S)
{
  TextureFrame* self = (TextureFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'uv_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->uv_,"Rect");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: uv_ of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_set_TextureFrame_uv
static int tolua_set_TextureFrame_uv(lua_State* tolua_S)
{
  TextureFrame* self = (TextureFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'uv_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Rect",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->uv_ = *((Rect*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: time_ of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_get_TextureFrame_time
static int tolua_get_TextureFrame_time(lua_State* tolua_S)
{
  TextureFrame* self = (TextureFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->time_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: time_ of class  TextureFrame */
#ifndef TOLUA_DISABLE_tolua_set_TextureFrame_time
static int tolua_set_TextureFrame_time(lua_State* tolua_S)
{
  TextureFrame* self = (TextureFrame*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'time_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->time_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_new00
static int tolua_GraphicsLuaAPI_ParticleEffect_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  ParticleEffect* tolua_ret = (ParticleEffect*)  Mtolua_new((ParticleEffect)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ParticleEffect");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_new00_local
static int tolua_GraphicsLuaAPI_ParticleEffect_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  ParticleEffect* tolua_ret = (ParticleEffect*)  Mtolua_new((ParticleEffect)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ParticleEffect");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_delete00
static int tolua_GraphicsLuaAPI_ParticleEffect_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaterial00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumParticles of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetNumParticles00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetNumParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumParticles'", NULL);
#endif
 {
  self->SetNumParticles(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUpdateInvisible of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetUpdateInvisible00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetUpdateInvisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUpdateInvisible'", NULL);
#endif
 {
  self->SetUpdateInvisible(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUpdateInvisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRelative of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetRelative00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetRelative00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRelative'", NULL);
#endif
 {
  self->SetRelative(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRelative'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetScaled of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetScaled00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetScaled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetScaled'", NULL);
#endif
 {
  self->SetScaled(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetScaled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSorted of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetSorted00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetSorted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSorted'", NULL);
#endif
 {
  self->SetSorted(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSorted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFixedScreenSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetFixedScreenSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetFixedScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFixedScreenSize'", NULL);
#endif
 {
  self->SetFixedScreenSize(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFixedScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAnimationLodBias of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetAnimationLodBias00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float lodBias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAnimationLodBias'", NULL);
#endif
 {
  self->SetAnimationLodBias(lodBias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEmitterType of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetEmitterType00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetEmitterType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  EmitterType type = ((EmitterType) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEmitterType'", NULL);
#endif
 {
  self->SetEmitterType(type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEmitterType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEmitterSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetEmitterSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetEmitterSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* size = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEmitterSize'", NULL);
#endif
 {
  self->SetEmitterSize(*size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEmitterSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinDirection of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinDirection00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* direction = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinDirection'", NULL);
#endif
 {
  self->SetMinDirection(*direction);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxDirection of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxDirection00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* direction = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxDirection'", NULL);
#endif
 {
  self->SetMaxDirection(*direction);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetConstantForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetConstantForce00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetConstantForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* force = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetConstantForce'", NULL);
#endif
 {
  self->SetConstantForce(*force);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetConstantForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDampingForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetDampingForce00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetDampingForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float force = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDampingForce'", NULL);
#endif
 {
  self->SetDampingForce(force);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDampingForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetActiveTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetActiveTime00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetActiveTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetActiveTime'", NULL);
#endif
 {
  self->SetActiveTime(time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetActiveTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetInactiveTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetInactiveTime00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetInactiveTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetInactiveTime'", NULL);
#endif
 {
  self->SetInactiveTime(time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetInactiveTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinEmissionRate00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinEmissionRate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float rate = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinEmissionRate'", NULL);
#endif
 {
  self->SetMinEmissionRate(rate);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinEmissionRate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxEmissionRate00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxEmissionRate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float rate = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxEmissionRate'", NULL);
#endif
 {
  self->SetMaxEmissionRate(rate);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxEmissionRate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinParticleSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinParticleSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* size = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinParticleSize'", NULL);
#endif
 {
  self->SetMinParticleSize(*size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxParticleSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxParticleSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Vector2* size = ((const Vector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxParticleSize'", NULL);
#endif
 {
  self->SetMaxParticleSize(*size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinTimeToLive00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinTimeToLive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinTimeToLive'", NULL);
#endif
 {
  self->SetMinTimeToLive(time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinTimeToLive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxTimeToLive00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxTimeToLive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxTimeToLive'", NULL);
#endif
 {
  self->SetMaxTimeToLive(time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxTimeToLive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinVelocity00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float velocity = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinVelocity'", NULL);
#endif
 {
  self->SetMinVelocity(velocity);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxVelocity00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float velocity = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxVelocity'", NULL);
#endif
 {
  self->SetMaxVelocity(velocity);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinRotation00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float rotation = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinRotation'", NULL);
#endif
 {
  self->SetMinRotation(rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxRotation00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float rotation = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxRotation'", NULL);
#endif
 {
  self->SetMaxRotation(rotation);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMinRotationSpeed00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMinRotationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinRotationSpeed'", NULL);
#endif
 {
  self->SetMinRotationSpeed(speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinRotationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetMaxRotationSpeed00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetMaxRotationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float speed = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxRotationSpeed'", NULL);
#endif
 {
  self->SetMaxRotationSpeed(speed);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxRotationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSizeAdd of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetSizeAdd00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetSizeAdd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float sizeAdd = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSizeAdd'", NULL);
#endif
 {
  self->SetSizeAdd(sizeAdd);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSizeAdd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSizeMul of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetSizeMul00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetSizeMul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  float sizeMul = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSizeMul'", NULL);
#endif
 {
  self->SetSizeMul(sizeMul);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSizeMul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddColorTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_AddColorTime00
static int tolua_GraphicsLuaAPI_ParticleEffect_AddColorTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddColorTime'", NULL);
#endif
 {
  self->AddColorTime(*color,time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddColorTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddColorFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_AddColorFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_AddColorFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const ColorFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const ColorFrame* colorFrame = ((const ColorFrame*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddColorFrame'", NULL);
#endif
 {
  self->AddColorFrame(*colorFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddColorFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveColorFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_RemoveColorFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_RemoveColorFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveColorFrame'", NULL);
#endif
 {
  self->RemoveColorFrame(index);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveColorFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetColorFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetColorFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetColorFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const ColorFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const ColorFrame* colorFrame = ((const ColorFrame*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetColorFrame'", NULL);
#endif
 {
  self->SetColorFrame(index,*colorFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetColorFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumColorFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetNumColorFrames00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetNumColorFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned number = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumColorFrames'", NULL);
#endif
 {
  self->SetNumColorFrames(number);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumColorFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SortColorFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SortColorFrames00
static int tolua_GraphicsLuaAPI_ParticleEffect_SortColorFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SortColorFrames'", NULL);
#endif
 {
  self->SortColorFrames();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SortColorFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTextureTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_AddTextureTime00
static int tolua_GraphicsLuaAPI_ParticleEffect_AddTextureTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Rect",0,&tolua_err)) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const Rect* uv = ((const Rect*)  tolua_tousertype(tolua_S,2,0));
  float time = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTextureTime'", NULL);
#endif
 {
  self->AddTextureTime(*uv,time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddTextureTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddTextureFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_AddTextureFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_AddTextureFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const TextureFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const TextureFrame* textureFrame = ((const TextureFrame*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddTextureFrame'", NULL);
#endif
 {
  self->AddTextureFrame(*textureFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddTextureFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveTextureFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_RemoveTextureFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_RemoveTextureFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveTextureFrame'", NULL);
#endif
 {
  self->RemoveTextureFrame(index);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveTextureFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTextureFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetTextureFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetTextureFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const TextureFrame",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const TextureFrame* textureFrame = ((const TextureFrame*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTextureFrame'", NULL);
#endif
 {
  self->SetTextureFrame(index,*textureFrame);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTextureFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumTextureFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SetNumTextureFrames00
static int tolua_GraphicsLuaAPI_ParticleEffect_SetNumTextureFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned number = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumTextureFrames'", NULL);
#endif
 {
  self->SetNumTextureFrames(number);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumTextureFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SortTextureFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_SortTextureFrames00
static int tolua_GraphicsLuaAPI_ParticleEffect_SortTextureFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SortTextureFrames'", NULL);
#endif
 {
  self->SortTextureFrames();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SortTextureFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ParticleEffectClone of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_Clone00
static int tolua_GraphicsLuaAPI_ParticleEffect_Clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  const String cloneName = ((const String)  tolua_tourho3dstring(tolua_S,2,String::EMPTY));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ParticleEffectClone'", NULL);
#endif
 {
  tolua_outside ParticleEffect* tolua_ret = (tolua_outside ParticleEffect*)  ParticleEffectClone(self,cloneName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ParticleEffect");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaterial00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumParticles of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetNumParticles00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetNumParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumParticles'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumParticles();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUpdateInvisible of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetUpdateInvisible00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetUpdateInvisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUpdateInvisible'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetUpdateInvisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUpdateInvisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsRelative of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_IsRelative00
static int tolua_GraphicsLuaAPI_ParticleEffect_IsRelative00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsRelative'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsRelative();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsRelative'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsScaled of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_IsScaled00
static int tolua_GraphicsLuaAPI_ParticleEffect_IsScaled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsScaled'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsScaled();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsScaled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsSorted of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_IsSorted00
static int tolua_GraphicsLuaAPI_ParticleEffect_IsSorted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsSorted'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsSorted();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsSorted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsFixedScreenSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_IsFixedScreenSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_IsFixedScreenSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsFixedScreenSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsFixedScreenSize();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsFixedScreenSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationLodBias of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetAnimationLodBias00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAnimationLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEmitterType of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetEmitterType00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetEmitterType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEmitterType'", NULL);
#endif
 {
  EmitterType tolua_ret = (EmitterType)  self->GetEmitterType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEmitterType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEmitterSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetEmitterSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetEmitterSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEmitterSize'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetEmitterSize();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEmitterSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinDirection of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinDirection00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinDirection'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetMinDirection();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxDirection of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxDirection00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxDirection00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxDirection'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetMaxDirection();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxDirection'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetConstantForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetConstantForce00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetConstantForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetConstantForce'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetConstantForce();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetConstantForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDampingForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetDampingForce00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetDampingForce00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDampingForce'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetDampingForce();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDampingForce'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetActiveTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetActiveTime00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetActiveTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetActiveTime'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetActiveTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetActiveTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetInactiveTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetInactiveTime00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetInactiveTime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetInactiveTime'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetInactiveTime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInactiveTime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinEmissionRate00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinEmissionRate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinEmissionRate'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMinEmissionRate();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinEmissionRate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxEmissionRate00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxEmissionRate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxEmissionRate'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMaxEmissionRate();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxEmissionRate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinParticleSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinParticleSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinParticleSize'", NULL);
#endif
 {
  const Vector2& tolua_ret = (const Vector2&)  self->GetMinParticleSize();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector2");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxParticleSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxParticleSize00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxParticleSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxParticleSize'", NULL);
#endif
 {
  const Vector2& tolua_ret = (const Vector2&)  self->GetMaxParticleSize();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector2");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxParticleSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinTimeToLive00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinTimeToLive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinTimeToLive'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMinTimeToLive();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinTimeToLive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxTimeToLive00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxTimeToLive00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxTimeToLive'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMaxTimeToLive();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxTimeToLive'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinVelocity00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinVelocity'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMinVelocity();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxVelocity00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxVelocity'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMaxVelocity();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinRotation00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinRotation'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMinRotation();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxRotation00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxRotation00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxRotation'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMaxRotation();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxRotation'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMinRotationSpeed00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMinRotationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinRotationSpeed'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMinRotationSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinRotationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetMaxRotationSpeed00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetMaxRotationSpeed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxRotationSpeed'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMaxRotationSpeed();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxRotationSpeed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSizeAdd of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetSizeAdd00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetSizeAdd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSizeAdd'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetSizeAdd();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSizeAdd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSizeMul of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetSizeMul00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetSizeMul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSizeMul'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetSizeMul();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSizeMul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumColorFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetNumColorFrames00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetNumColorFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumColorFrames'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumColorFrames();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumColorFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetColorFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetColorFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetColorFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetColorFrame'", NULL);
#endif
 {
  const ColorFrame* tolua_ret = (const ColorFrame*)  self->GetColorFrame(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"const ColorFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetColorFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumTextureFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetNumTextureFrames00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetNumTextureFrames00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumTextureFrames'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumTextureFrames();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumTextureFrames'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTextureFrame of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEffect_GetTextureFrame00
static int tolua_GraphicsLuaAPI_ParticleEffect_GetTextureFrame00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEffect",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEffect* self = (const ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextureFrame'", NULL);
#endif
 {
  const TextureFrame* tolua_ret = (const TextureFrame*)  self->GetTextureFrame(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"const TextureFrame");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextureFrame'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_material_ptr
static int tolua_get_ParticleEffect_material_ptr(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_material_ptr
static int tolua_set_ParticleEffect_material_ptr(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numParticles of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_numParticles
static int tolua_get_ParticleEffect_numParticles(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numParticles'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumParticles());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numParticles of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_numParticles
static int tolua_set_ParticleEffect_numParticles(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numParticles'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumParticles(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: updateInvisible of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_updateInvisible
static int tolua_get_ParticleEffect_updateInvisible(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateInvisible'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetUpdateInvisible());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: updateInvisible of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_updateInvisible
static int tolua_set_ParticleEffect_updateInvisible(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateInvisible'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUpdateInvisible(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: relative of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_relative
static int tolua_get_ParticleEffect_relative(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'relative'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsRelative());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: relative of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_relative
static int tolua_set_ParticleEffect_relative(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'relative'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRelative(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: scaled of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_scaled
static int tolua_get_ParticleEffect_scaled(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scaled'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsScaled());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: scaled of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_scaled
static int tolua_set_ParticleEffect_scaled(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scaled'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetScaled(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sorted of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_sorted
static int tolua_get_ParticleEffect_sorted(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sorted'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsSorted());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sorted of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_sorted
static int tolua_set_ParticleEffect_sorted(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sorted'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSorted(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fixedScreenSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_fixedScreenSize
static int tolua_get_ParticleEffect_fixedScreenSize(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fixedScreenSize'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsFixedScreenSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fixedScreenSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_fixedScreenSize
static int tolua_set_ParticleEffect_fixedScreenSize(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fixedScreenSize'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFixedScreenSize(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animationLodBias of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_animationLodBias
static int tolua_get_ParticleEffect_animationLodBias(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAnimationLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: animationLodBias of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_animationLodBias
static int tolua_set_ParticleEffect_animationLodBias(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAnimationLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: emitterType of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_emitterType
static int tolua_get_ParticleEffect_emitterType(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitterType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetEmitterType());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: emitterType of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_emitterType
static int tolua_set_ParticleEffect_emitterType(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitterType'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEmitterType(((EmitterType) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: emitterSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_emitterSize_ref
static int tolua_get_ParticleEffect_emitterSize_ref(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitterSize'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetEmitterSize(),"const Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minDirection of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minDirection_ref
static int tolua_get_ParticleEffect_minDirection_ref(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minDirection'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetMinDirection(),"const Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxDirection of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxDirection_ref
static int tolua_get_ParticleEffect_maxDirection_ref(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxDirection'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetMaxDirection(),"const Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: constantForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_constantForce_ref
static int tolua_get_ParticleEffect_constantForce_ref(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'constantForce'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetConstantForce(),"const Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dampingForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_dampingForce
static int tolua_get_ParticleEffect_dampingForce(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dampingForce'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetDampingForce());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: dampingForce of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_dampingForce
static int tolua_set_ParticleEffect_dampingForce(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dampingForce'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDampingForce(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: activeTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_activeTime
static int tolua_get_ParticleEffect_activeTime(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'activeTime'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetActiveTime());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: activeTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_activeTime
static int tolua_set_ParticleEffect_activeTime(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'activeTime'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetActiveTime(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: inactiveTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_inactiveTime
static int tolua_get_ParticleEffect_inactiveTime(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'inactiveTime'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetInactiveTime());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: inactiveTime of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_inactiveTime
static int tolua_set_ParticleEffect_inactiveTime(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'inactiveTime'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetInactiveTime(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minEmissionRate
static int tolua_get_ParticleEffect_minEmissionRate(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minEmissionRate'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinEmissionRate());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_minEmissionRate
static int tolua_set_ParticleEffect_minEmissionRate(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minEmissionRate'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinEmissionRate(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxEmissionRate
static int tolua_get_ParticleEffect_maxEmissionRate(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxEmissionRate'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxEmissionRate());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxEmissionRate of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_maxEmissionRate
static int tolua_set_ParticleEffect_maxEmissionRate(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxEmissionRate'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxEmissionRate(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minParticleSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minParticleSize_ref
static int tolua_get_ParticleEffect_minParticleSize_ref(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minParticleSize'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetMinParticleSize(),"const Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxParticleSize of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxParticleSize_ref
static int tolua_get_ParticleEffect_maxParticleSize_ref(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxParticleSize'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetMaxParticleSize(),"const Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minTimeToLive
static int tolua_get_ParticleEffect_minTimeToLive(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minTimeToLive'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinTimeToLive());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_minTimeToLive
static int tolua_set_ParticleEffect_minTimeToLive(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minTimeToLive'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinTimeToLive(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxTimeToLive
static int tolua_get_ParticleEffect_maxTimeToLive(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxTimeToLive'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxTimeToLive());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxTimeToLive of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_maxTimeToLive
static int tolua_set_ParticleEffect_maxTimeToLive(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxTimeToLive'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxTimeToLive(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minVelocity
static int tolua_get_ParticleEffect_minVelocity(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minVelocity'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinVelocity());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_minVelocity
static int tolua_set_ParticleEffect_minVelocity(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minVelocity'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinVelocity(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxVelocity
static int tolua_get_ParticleEffect_maxVelocity(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxVelocity'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxVelocity());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxVelocity of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_maxVelocity
static int tolua_set_ParticleEffect_maxVelocity(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxVelocity'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxVelocity(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minRotation
static int tolua_get_ParticleEffect_minRotation(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minRotation'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinRotation());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_minRotation
static int tolua_set_ParticleEffect_minRotation(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minRotation'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinRotation(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxRotation
static int tolua_get_ParticleEffect_maxRotation(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxRotation'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxRotation());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxRotation of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_maxRotation
static int tolua_set_ParticleEffect_maxRotation(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxRotation'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxRotation(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_minRotationSpeed
static int tolua_get_ParticleEffect_minRotationSpeed(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minRotationSpeed'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinRotationSpeed());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_minRotationSpeed
static int tolua_set_ParticleEffect_minRotationSpeed(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minRotationSpeed'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinRotationSpeed(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_maxRotationSpeed
static int tolua_get_ParticleEffect_maxRotationSpeed(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxRotationSpeed'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxRotationSpeed());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxRotationSpeed of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_maxRotationSpeed
static int tolua_set_ParticleEffect_maxRotationSpeed(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxRotationSpeed'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxRotationSpeed(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sizeAdd of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_sizeAdd
static int tolua_get_ParticleEffect_sizeAdd(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sizeAdd'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetSizeAdd());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sizeAdd of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_sizeAdd
static int tolua_set_ParticleEffect_sizeAdd(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sizeAdd'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSizeAdd(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sizeMul of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_sizeMul
static int tolua_get_ParticleEffect_sizeMul(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sizeMul'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetSizeMul());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sizeMul of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_sizeMul
static int tolua_set_ParticleEffect_sizeMul(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sizeMul'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSizeMul(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numColorFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_numColorFrames
static int tolua_get_ParticleEffect_numColorFrames(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numColorFrames'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumColorFrames());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numColorFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_numColorFrames
static int tolua_set_ParticleEffect_numColorFrames(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numColorFrames'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumColorFrames(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numTextureFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEffect_numTextureFrames
static int tolua_get_ParticleEffect_numTextureFrames(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numTextureFrames'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumTextureFrames());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numTextureFrames of class  ParticleEffect */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEffect_numTextureFrames
static int tolua_set_ParticleEffect_numTextureFrames(lua_State* tolua_S)
{
  ParticleEffect* self = (ParticleEffect*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numTextureFrames'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumTextureFrames(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEffect of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_SetEffect00
static int tolua_GraphicsLuaAPI_ParticleEmitter_SetEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"ParticleEffect",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  ParticleEffect* effect = ((ParticleEffect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEffect'", NULL);
#endif
 {
  self->SetEffect(effect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_SetNumParticles00
static int tolua_GraphicsLuaAPI_ParticleEmitter_SetNumParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumParticles'", NULL);
#endif
 {
  self->SetNumParticles(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEmitting of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_SetEmitting00
static int tolua_GraphicsLuaAPI_ParticleEmitter_SetEmitting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEmitting'", NULL);
#endif
 {
  self->SetEmitting(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEmitting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSerializeParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_SetSerializeParticles00
static int tolua_GraphicsLuaAPI_ParticleEmitter_SetSerializeParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSerializeParticles'", NULL);
#endif
 {
  self->SetSerializeParticles(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSerializeParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAutoRemoveMode of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_SetAutoRemoveMode00
static int tolua_GraphicsLuaAPI_ParticleEmitter_SetAutoRemoveMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
  AutoRemoveMode mode = ((AutoRemoveMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAutoRemoveMode'", NULL);
#endif
 {
  self->SetAutoRemoveMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAutoRemoveMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ResetEmissionTimer of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_ResetEmissionTimer00
static int tolua_GraphicsLuaAPI_ParticleEmitter_ResetEmissionTimer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ResetEmissionTimer'", NULL);
#endif
 {
  self->ResetEmissionTimer();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ResetEmissionTimer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_RemoveAllParticles00
static int tolua_GraphicsLuaAPI_ParticleEmitter_RemoveAllParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllParticles'", NULL);
#endif
 {
  self->RemoveAllParticles();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Reset of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_Reset00
static int tolua_GraphicsLuaAPI_ParticleEmitter_Reset00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Reset'", NULL);
#endif
 {
  self->Reset();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Reset'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ApplyEffect of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_ApplyEffect00
static int tolua_GraphicsLuaAPI_ParticleEmitter_ApplyEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ApplyEffect'", NULL);
#endif
 {
  self->ApplyEffect();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ApplyEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEffect of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_GetEffect00
static int tolua_GraphicsLuaAPI_ParticleEmitter_GetEffect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEmitter* self = (const ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEffect'", NULL);
#endif
 {
  ParticleEffect* tolua_ret = (ParticleEffect*)  self->GetEffect();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"ParticleEffect");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEffect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_GetNumParticles00
static int tolua_GraphicsLuaAPI_ParticleEmitter_GetNumParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEmitter* self = (const ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumParticles'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumParticles();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsEmitting of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_IsEmitting00
static int tolua_GraphicsLuaAPI_ParticleEmitter_IsEmitting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEmitter* self = (const ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsEmitting'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsEmitting();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsEmitting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSerializeParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_GetSerializeParticles00
static int tolua_GraphicsLuaAPI_ParticleEmitter_GetSerializeParticles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEmitter* self = (const ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSerializeParticles'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSerializeParticles();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSerializeParticles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAutoRemoveMode of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_ParticleEmitter_GetAutoRemoveMode00
static int tolua_GraphicsLuaAPI_ParticleEmitter_GetAutoRemoveMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const ParticleEmitter",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const ParticleEmitter* self = (const ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAutoRemoveMode'", NULL);
#endif
 {
  AutoRemoveMode tolua_ret = (AutoRemoveMode)  self->GetAutoRemoveMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAutoRemoveMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: effect of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEmitter_effect_ptr
static int tolua_get_ParticleEmitter_effect_ptr(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'effect'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetEffect(),"ParticleEffect");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: effect of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEmitter_effect_ptr
static int tolua_set_ParticleEmitter_effect_ptr(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'effect'",NULL);
 if (!tolua_isusertype(tolua_S,2,"ParticleEffect",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEffect(((ParticleEffect*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEmitter_numParticles
static int tolua_get_ParticleEmitter_numParticles(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numParticles'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumParticles());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEmitter_numParticles
static int tolua_set_ParticleEmitter_numParticles(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numParticles'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumParticles(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: emitting of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEmitter_emitting
static int tolua_get_ParticleEmitter_emitting(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitting'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsEmitting());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: emitting of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEmitter_emitting
static int tolua_set_ParticleEmitter_emitting(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitting'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEmitting(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: serializeParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEmitter_serializeParticles
static int tolua_get_ParticleEmitter_serializeParticles(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'serializeParticles'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSerializeParticles());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: serializeParticles of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEmitter_serializeParticles
static int tolua_set_ParticleEmitter_serializeParticles(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'serializeParticles'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSerializeParticles(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: autoRemoveMode of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_get_ParticleEmitter_autoRemoveMode
static int tolua_get_ParticleEmitter_autoRemoveMode(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoRemoveMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAutoRemoveMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: autoRemoveMode of class  ParticleEmitter */
#ifndef TOLUA_DISABLE_tolua_set_ParticleEmitter_autoRemoveMode
static int tolua_set_ParticleEmitter_autoRemoveMode(lua_State* tolua_S)
{
  ParticleEmitter* self = (ParticleEmitter*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoRemoveMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAutoRemoveMode(((AutoRemoveMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumViewports of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetNumViewports00
static int tolua_GraphicsLuaAPI_Renderer_SetNumViewports00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumViewports'", NULL);
#endif
 {
  self->SetNumViewports(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumViewports'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetViewport of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetViewport00
static int tolua_GraphicsLuaAPI_Renderer_SetViewport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  Viewport* viewport = ((Viewport*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetViewport'", NULL);
#endif
 {
  self->SetViewport(index,viewport);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetViewport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDefaultRenderPath of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath00
static int tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"RenderPath",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDefaultRenderPath'", NULL);
#endif
 {
  self->SetDefaultRenderPath(renderPath);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDefaultRenderPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDefaultRenderPath of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath01
static int tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"XMLFile",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  XMLFile* file = ((XMLFile*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDefaultRenderPath'", NULL);
#endif
 {
  self->SetDefaultRenderPath(file);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDefaultTechnique of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetDefaultTechnique00
static int tolua_GraphicsLuaAPI_Renderer_SetDefaultTechnique00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  Technique* technique = ((Technique*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDefaultTechnique'", NULL);
#endif
 {
  self->SetDefaultTechnique(technique);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDefaultTechnique'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetHDRRendering of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetHDRRendering00
static int tolua_GraphicsLuaAPI_Renderer_SetHDRRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetHDRRendering'", NULL);
#endif
 {
  self->SetHDRRendering(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetHDRRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSpecularLighting of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetSpecularLighting00
static int tolua_GraphicsLuaAPI_Renderer_SetSpecularLighting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSpecularLighting'", NULL);
#endif
 {
  self->SetSpecularLighting(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSpecularLighting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTextureAnisotropy of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetTextureAnisotropy00
static int tolua_GraphicsLuaAPI_Renderer_SetTextureAnisotropy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int level = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTextureAnisotropy'", NULL);
#endif
 {
  self->SetTextureAnisotropy(level);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTextureAnisotropy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTextureFilterMode of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetTextureFilterMode00
static int tolua_GraphicsLuaAPI_Renderer_SetTextureFilterMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  TextureFilterMode mode = ((TextureFilterMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTextureFilterMode'", NULL);
#endif
 {
  self->SetTextureFilterMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTextureFilterMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTextureQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetTextureQuality00
static int tolua_GraphicsLuaAPI_Renderer_SetTextureQuality00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  MaterialQuality quality = ((MaterialQuality) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTextureQuality'", NULL);
#endif
 {
  self->SetTextureQuality(quality);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTextureQuality'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterialQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMaterialQuality00
static int tolua_GraphicsLuaAPI_Renderer_SetMaterialQuality00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  MaterialQuality quality = ((MaterialQuality) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterialQuality'", NULL);
#endif
 {
  self->SetMaterialQuality(quality);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterialQuality'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDrawShadows of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetDrawShadows00
static int tolua_GraphicsLuaAPI_Renderer_SetDrawShadows00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDrawShadows'", NULL);
#endif
 {
  self->SetDrawShadows(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDrawShadows'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowMapSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetShadowMapSize00
static int tolua_GraphicsLuaAPI_Renderer_SetShadowMapSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int size = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowMapSize'", NULL);
#endif
 {
  self->SetShadowMapSize(size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowMapSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetShadowQuality00
static int tolua_GraphicsLuaAPI_Renderer_SetShadowQuality00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  ShadowQuality quality = ((ShadowQuality) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowQuality'", NULL);
#endif
 {
  self->SetShadowQuality(quality);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowQuality'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowSoftness of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetShadowSoftness00
static int tolua_GraphicsLuaAPI_Renderer_SetShadowSoftness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  float shadowSoftness = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowSoftness'", NULL);
#endif
 {
  self->SetShadowSoftness(shadowSoftness);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowSoftness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVSMShadowParameters of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetVSMShadowParameters00
static int tolua_GraphicsLuaAPI_Renderer_SetVSMShadowParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  float minVariance = ((float)  tolua_tonumber(tolua_S,2,0));
  float lightBleedingReduction = ((float)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVSMShadowParameters'", NULL);
#endif
 {
  self->SetVSMShadowParameters(minVariance,lightBleedingReduction);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVSMShadowParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVSMMultiSample of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetVSMMultiSample00
static int tolua_GraphicsLuaAPI_Renderer_SetVSMMultiSample00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int multiSample = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVSMMultiSample'", NULL);
#endif
 {
  self->SetVSMMultiSample(multiSample);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVSMMultiSample'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetReuseShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetReuseShadowMaps00
static int tolua_GraphicsLuaAPI_Renderer_SetReuseShadowMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetReuseShadowMaps'", NULL);
#endif
 {
  self->SetReuseShadowMaps(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetReuseShadowMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMaxShadowMaps00
static int tolua_GraphicsLuaAPI_Renderer_SetMaxShadowMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int shadowMaps = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxShadowMaps'", NULL);
#endif
 {
  self->SetMaxShadowMaps(shadowMaps);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxShadowMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDynamicInstancing of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetDynamicInstancing00
static int tolua_GraphicsLuaAPI_Renderer_SetDynamicInstancing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDynamicInstancing'", NULL);
#endif
 {
  self->SetDynamicInstancing(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDynamicInstancing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumExtraInstancingBufferElements of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetNumExtraInstancingBufferElements00
static int tolua_GraphicsLuaAPI_Renderer_SetNumExtraInstancingBufferElements00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int elements = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumExtraInstancingBufferElements'", NULL);
#endif
 {
  self->SetNumExtraInstancingBufferElements(elements);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumExtraInstancingBufferElements'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMinInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMinInstances00
static int tolua_GraphicsLuaAPI_Renderer_SetMinInstances00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int instances = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMinInstances'", NULL);
#endif
 {
  self->SetMinInstances(instances);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMinInstances'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxSortedInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMaxSortedInstances00
static int tolua_GraphicsLuaAPI_Renderer_SetMaxSortedInstances00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int instances = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxSortedInstances'", NULL);
#endif
 {
  self->SetMaxSortedInstances(instances);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxSortedInstances'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxOccluderTriangles of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMaxOccluderTriangles00
static int tolua_GraphicsLuaAPI_Renderer_SetMaxOccluderTriangles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int triangles = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxOccluderTriangles'", NULL);
#endif
 {
  self->SetMaxOccluderTriangles(triangles);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxOccluderTriangles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOcclusionBufferSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetOcclusionBufferSize00
static int tolua_GraphicsLuaAPI_Renderer_SetOcclusionBufferSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  int size = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOcclusionBufferSize'", NULL);
#endif
 {
  self->SetOcclusionBufferSize(size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOcclusionBufferSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOccluderSizeThreshold of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetOccluderSizeThreshold00
static int tolua_GraphicsLuaAPI_Renderer_SetOccluderSizeThreshold00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  float screenSize = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOccluderSizeThreshold'", NULL);
#endif
 {
  self->SetOccluderSizeThreshold(screenSize);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOccluderSizeThreshold'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetThreadedOcclusion of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetThreadedOcclusion00
static int tolua_GraphicsLuaAPI_Renderer_SetThreadedOcclusion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetThreadedOcclusion'", NULL);
#endif
 {
  self->SetThreadedOcclusion(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetThreadedOcclusion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMobileShadowBiasMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMobileShadowBiasMul00
static int tolua_GraphicsLuaAPI_Renderer_SetMobileShadowBiasMul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  float mul = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMobileShadowBiasMul'", NULL);
#endif
 {
  self->SetMobileShadowBiasMul(mul);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMobileShadowBiasMul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMobileShadowBiasAdd of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMobileShadowBiasAdd00
static int tolua_GraphicsLuaAPI_Renderer_SetMobileShadowBiasAdd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  float add = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMobileShadowBiasAdd'", NULL);
#endif
 {
  self->SetMobileShadowBiasAdd(add);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMobileShadowBiasAdd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMobileNormalOffsetMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_SetMobileNormalOffsetMul00
static int tolua_GraphicsLuaAPI_Renderer_SetMobileNormalOffsetMul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  float mul = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMobileNormalOffsetMul'", NULL);
#endif
 {
  self->SetMobileNormalOffsetMul(mul);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMobileNormalOffsetMul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReloadShaders of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_ReloadShaders00
static int tolua_GraphicsLuaAPI_Renderer_ReloadShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReloadShaders'", NULL);
#endif
 {
  self->ReloadShaders();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReloadShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumViewports of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumViewports00
static int tolua_GraphicsLuaAPI_Renderer_GetNumViewports00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumViewports'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumViewports();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumViewports'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewport of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetViewport00
static int tolua_GraphicsLuaAPI_Renderer_GetViewport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewport'", NULL);
#endif
 {
  Viewport* tolua_ret = (Viewport*)  self->GetViewport(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewportForScene of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetViewportForScene00
static int tolua_GraphicsLuaAPI_Renderer_GetViewportForScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewportForScene'", NULL);
#endif
 {
  Viewport* tolua_ret = (Viewport*)  self->GetViewportForScene(scene,index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewportForScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDefaultRenderPath of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDefaultRenderPath00
static int tolua_GraphicsLuaAPI_Renderer_GetDefaultRenderPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDefaultRenderPath'", NULL);
#endif
 {
  RenderPath* tolua_ret = (RenderPath*)  self->GetDefaultRenderPath();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderPath");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDefaultRenderPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDefaultTechnique of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDefaultTechnique00
static int tolua_GraphicsLuaAPI_Renderer_GetDefaultTechnique00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDefaultTechnique'", NULL);
#endif
 {
  Technique* tolua_ret = (Technique*)  self->GetDefaultTechnique();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Technique");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDefaultTechnique'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHDRRendering of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetHDRRendering00
static int tolua_GraphicsLuaAPI_Renderer_GetHDRRendering00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHDRRendering'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetHDRRendering();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHDRRendering'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSpecularLighting of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetSpecularLighting00
static int tolua_GraphicsLuaAPI_Renderer_GetSpecularLighting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSpecularLighting'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSpecularLighting();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSpecularLighting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDrawShadows of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDrawShadows00
static int tolua_GraphicsLuaAPI_Renderer_GetDrawShadows00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDrawShadows'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetDrawShadows();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDrawShadows'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTextureAnisotropy of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetTextureAnisotropy00
static int tolua_GraphicsLuaAPI_Renderer_GetTextureAnisotropy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextureAnisotropy'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetTextureAnisotropy();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextureAnisotropy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTextureFilterMode of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetTextureFilterMode00
static int tolua_GraphicsLuaAPI_Renderer_GetTextureFilterMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextureFilterMode'", NULL);
#endif
 {
  TextureFilterMode tolua_ret = (TextureFilterMode)  self->GetTextureFilterMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextureFilterMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTextureQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetTextureQuality00
static int tolua_GraphicsLuaAPI_Renderer_GetTextureQuality00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextureQuality'", NULL);
#endif
 {
  MaterialQuality tolua_ret = (MaterialQuality)  self->GetTextureQuality();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextureQuality'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterialQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMaterialQuality00
static int tolua_GraphicsLuaAPI_Renderer_GetMaterialQuality00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterialQuality'", NULL);
#endif
 {
  MaterialQuality tolua_ret = (MaterialQuality)  self->GetMaterialQuality();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterialQuality'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowMapSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetShadowMapSize00
static int tolua_GraphicsLuaAPI_Renderer_GetShadowMapSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowMapSize'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetShadowMapSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowMapSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetShadowQuality00
static int tolua_GraphicsLuaAPI_Renderer_GetShadowQuality00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowQuality'", NULL);
#endif
 {
  ShadowQuality tolua_ret = (ShadowQuality)  self->GetShadowQuality();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowQuality'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowSoftness of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetShadowSoftness00
static int tolua_GraphicsLuaAPI_Renderer_GetShadowSoftness00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowSoftness'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowSoftness();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowSoftness'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVSMShadowParameters of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetVSMShadowParameters00
static int tolua_GraphicsLuaAPI_Renderer_GetVSMShadowParameters00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVSMShadowParameters'", NULL);
#endif
 {
  Vector2 tolua_ret = (Vector2)  self->GetVSMShadowParameters();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector2));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVSMShadowParameters'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVSMMultiSample of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetVSMMultiSample00
static int tolua_GraphicsLuaAPI_Renderer_GetVSMMultiSample00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVSMMultiSample'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetVSMMultiSample();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVSMMultiSample'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetReuseShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetReuseShadowMaps00
static int tolua_GraphicsLuaAPI_Renderer_GetReuseShadowMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetReuseShadowMaps'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetReuseShadowMaps();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetReuseShadowMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMaxShadowMaps00
static int tolua_GraphicsLuaAPI_Renderer_GetMaxShadowMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxShadowMaps'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMaxShadowMaps();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxShadowMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDynamicInstancing of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDynamicInstancing00
static int tolua_GraphicsLuaAPI_Renderer_GetDynamicInstancing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDynamicInstancing'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetDynamicInstancing();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDynamicInstancing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumExtraInstancingBufferElements of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumExtraInstancingBufferElements00
static int tolua_GraphicsLuaAPI_Renderer_GetNumExtraInstancingBufferElements00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumExtraInstancingBufferElements'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetNumExtraInstancingBufferElements();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumExtraInstancingBufferElements'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMinInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMinInstances00
static int tolua_GraphicsLuaAPI_Renderer_GetMinInstances00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMinInstances'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMinInstances();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMinInstances'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxSortedInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMaxSortedInstances00
static int tolua_GraphicsLuaAPI_Renderer_GetMaxSortedInstances00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxSortedInstances'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMaxSortedInstances();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxSortedInstances'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxOccluderTriangles of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMaxOccluderTriangles00
static int tolua_GraphicsLuaAPI_Renderer_GetMaxOccluderTriangles00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxOccluderTriangles'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMaxOccluderTriangles();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxOccluderTriangles'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOcclusionBufferSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetOcclusionBufferSize00
static int tolua_GraphicsLuaAPI_Renderer_GetOcclusionBufferSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOcclusionBufferSize'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetOcclusionBufferSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOcclusionBufferSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOccluderSizeThreshold of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetOccluderSizeThreshold00
static int tolua_GraphicsLuaAPI_Renderer_GetOccluderSizeThreshold00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOccluderSizeThreshold'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetOccluderSizeThreshold();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOccluderSizeThreshold'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetThreadedOcclusion of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetThreadedOcclusion00
static int tolua_GraphicsLuaAPI_Renderer_GetThreadedOcclusion00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetThreadedOcclusion'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetThreadedOcclusion();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetThreadedOcclusion'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMobileShadowBiasMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMobileShadowBiasMul00
static int tolua_GraphicsLuaAPI_Renderer_GetMobileShadowBiasMul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMobileShadowBiasMul'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMobileShadowBiasMul();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMobileShadowBiasMul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMobileShadowBiasAdd of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMobileShadowBiasAdd00
static int tolua_GraphicsLuaAPI_Renderer_GetMobileShadowBiasAdd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMobileShadowBiasAdd'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMobileShadowBiasAdd();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMobileShadowBiasAdd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMobileNormalOffsetMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetMobileNormalOffsetMul00
static int tolua_GraphicsLuaAPI_Renderer_GetMobileNormalOffsetMul00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMobileNormalOffsetMul'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetMobileNormalOffsetMul();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMobileNormalOffsetMul'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumViews of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumViews00
static int tolua_GraphicsLuaAPI_Renderer_GetNumViews00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumViews'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumViews();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumViews'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumPrimitives of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumPrimitives00
static int tolua_GraphicsLuaAPI_Renderer_GetNumPrimitives00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumPrimitives'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumPrimitives();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumPrimitives'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumBatches of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumBatches00
static int tolua_GraphicsLuaAPI_Renderer_GetNumBatches00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumBatches'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumBatches();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumBatches'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumGeometries of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumGeometries00
static int tolua_GraphicsLuaAPI_Renderer_GetNumGeometries00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool allViews = ((bool)  tolua_toboolean(tolua_S,2,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumGeometries'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumGeometries(allViews);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumGeometries'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumLights of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumLights00
static int tolua_GraphicsLuaAPI_Renderer_GetNumLights00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool allViews = ((bool)  tolua_toboolean(tolua_S,2,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumLights'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumLights(allViews);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumLights'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumShadowMaps00
static int tolua_GraphicsLuaAPI_Renderer_GetNumShadowMaps00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool allViews = ((bool)  tolua_toboolean(tolua_S,2,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumShadowMaps'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumShadowMaps(allViews);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumShadowMaps'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumOccluders of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetNumOccluders00
static int tolua_GraphicsLuaAPI_Renderer_GetNumOccluders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool allViews = ((bool)  tolua_toboolean(tolua_S,2,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumOccluders'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumOccluders(allViews);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumOccluders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDefaultZone of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDefaultZone00
static int tolua_GraphicsLuaAPI_Renderer_GetDefaultZone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDefaultZone'", NULL);
#endif
 {
  Zone* tolua_ret = (Zone*)  self->GetDefaultZone();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Zone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDefaultZone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDefaultMaterial of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDefaultMaterial00
static int tolua_GraphicsLuaAPI_Renderer_GetDefaultMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDefaultMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetDefaultMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDefaultMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDefaultLightRamp of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDefaultLightRamp00
static int tolua_GraphicsLuaAPI_Renderer_GetDefaultLightRamp00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDefaultLightRamp'", NULL);
#endif
 {
  Texture2D* tolua_ret = (Texture2D*)  self->GetDefaultLightRamp();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture2D");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDefaultLightRamp'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDefaultLightSpot of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_GetDefaultLightSpot00
static int tolua_GraphicsLuaAPI_Renderer_GetDefaultLightSpot00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Renderer",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Renderer* self = (const Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDefaultLightSpot'", NULL);
#endif
 {
  Texture2D* tolua_ret = (Texture2D*)  self->GetDefaultLightSpot();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture2D");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDefaultLightSpot'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: DrawDebugGeometry of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Renderer_DrawDebugGeometry00
static int tolua_GraphicsLuaAPI_Renderer_DrawDebugGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Renderer",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
  bool depthTest = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'DrawDebugGeometry'", NULL);
#endif
 {
  self->DrawDebugGeometry(depthTest);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'DrawDebugGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numViewports of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_numViewports
static int tolua_get_Renderer_numViewports(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numViewports'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumViewports());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numViewports of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_numViewports
static int tolua_set_Renderer_numViewports(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numViewports'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumViewports(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: defaultRenderPath of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_defaultRenderPath_ptr
static int tolua_get_Renderer_defaultRenderPath_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultRenderPath'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetDefaultRenderPath(),"RenderPath");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: defaultRenderPath of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_defaultRenderPath_ptr
static int tolua_set_Renderer_defaultRenderPath_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultRenderPath'",NULL);
 if (!tolua_isusertype(tolua_S,2,"RenderPath",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDefaultRenderPath(((RenderPath*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: defaultTechnique of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_defaultTechnique_ptr
static int tolua_get_Renderer_defaultTechnique_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultTechnique'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetDefaultTechnique(),"Technique");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: defaultTechnique of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_defaultTechnique_ptr
static int tolua_set_Renderer_defaultTechnique_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultTechnique'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Technique",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDefaultTechnique(((Technique*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: HDRRendering of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_HDRRendering
static int tolua_get_Renderer_HDRRendering(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HDRRendering'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetHDRRendering());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: HDRRendering of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_HDRRendering
static int tolua_set_Renderer_HDRRendering(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'HDRRendering'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetHDRRendering(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: specularLighting of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_specularLighting
static int tolua_get_Renderer_specularLighting(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'specularLighting'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSpecularLighting());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: specularLighting of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_specularLighting
static int tolua_set_Renderer_specularLighting(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'specularLighting'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSpecularLighting(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawShadows of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_drawShadows
static int tolua_get_Renderer_drawShadows(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawShadows'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetDrawShadows());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: drawShadows of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_drawShadows
static int tolua_set_Renderer_drawShadows(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawShadows'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDrawShadows(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: textureAnisotropy of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_textureAnisotropy
static int tolua_get_Renderer_textureAnisotropy(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureAnisotropy'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTextureAnisotropy());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: textureAnisotropy of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_textureAnisotropy
static int tolua_set_Renderer_textureAnisotropy(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureAnisotropy'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTextureAnisotropy(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: textureFilterMode of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_textureFilterMode
static int tolua_get_Renderer_textureFilterMode(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureFilterMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTextureFilterMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: textureFilterMode of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_textureFilterMode
static int tolua_set_Renderer_textureFilterMode(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureFilterMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTextureFilterMode(((TextureFilterMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: textureQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_textureQuality
static int tolua_get_Renderer_textureQuality(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureQuality'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTextureQuality());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: textureQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_textureQuality
static int tolua_set_Renderer_textureQuality(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'textureQuality'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTextureQuality(((MaterialQuality) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: materialQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_materialQuality
static int tolua_get_Renderer_materialQuality(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'materialQuality'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaterialQuality());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: materialQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_materialQuality
static int tolua_set_Renderer_materialQuality(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'materialQuality'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterialQuality(((MaterialQuality) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowMapSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_shadowMapSize
static int tolua_get_Renderer_shadowMapSize(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMapSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowMapSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowMapSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_shadowMapSize
static int tolua_set_Renderer_shadowMapSize(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMapSize'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowMapSize(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_shadowQuality
static int tolua_get_Renderer_shadowQuality(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowQuality'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowQuality());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowQuality of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_shadowQuality
static int tolua_set_Renderer_shadowQuality(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowQuality'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowQuality(((ShadowQuality) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowSoftness of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_shadowSoftness
static int tolua_get_Renderer_shadowSoftness(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowSoftness'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowSoftness());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowSoftness of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_shadowSoftness
static int tolua_set_Renderer_shadowSoftness(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowSoftness'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowSoftness(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: VSMMultiSample of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_VSMMultiSample
static int tolua_get_Renderer_VSMMultiSample(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VSMMultiSample'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetVSMMultiSample());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: VSMMultiSample of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_VSMMultiSample
static int tolua_set_Renderer_VSMMultiSample(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'VSMMultiSample'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetVSMMultiSample(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: reuseShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_reuseShadowMaps
static int tolua_get_Renderer_reuseShadowMaps(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'reuseShadowMaps'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetReuseShadowMaps());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: reuseShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_reuseShadowMaps
static int tolua_set_Renderer_reuseShadowMaps(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'reuseShadowMaps'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetReuseShadowMaps(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_maxShadowMaps
static int tolua_get_Renderer_maxShadowMaps(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxShadowMaps'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxShadowMaps());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxShadowMaps of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_maxShadowMaps
static int tolua_set_Renderer_maxShadowMaps(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxShadowMaps'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxShadowMaps(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: dynamicInstancing of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_dynamicInstancing
static int tolua_get_Renderer_dynamicInstancing(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dynamicInstancing'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetDynamicInstancing());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: dynamicInstancing of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_dynamicInstancing
static int tolua_set_Renderer_dynamicInstancing(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'dynamicInstancing'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDynamicInstancing(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numExtraInstancingBufferElements of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_numExtraInstancingBufferElements
static int tolua_get_Renderer_numExtraInstancingBufferElements(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numExtraInstancingBufferElements'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumExtraInstancingBufferElements());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numExtraInstancingBufferElements of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_numExtraInstancingBufferElements
static int tolua_set_Renderer_numExtraInstancingBufferElements(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numExtraInstancingBufferElements'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumExtraInstancingBufferElements(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: minInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_minInstances
static int tolua_get_Renderer_minInstances(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minInstances'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMinInstances());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: minInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_minInstances
static int tolua_set_Renderer_minInstances(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'minInstances'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMinInstances(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxSortedInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_maxSortedInstances
static int tolua_get_Renderer_maxSortedInstances(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxSortedInstances'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxSortedInstances());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxSortedInstances of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_maxSortedInstances
static int tolua_set_Renderer_maxSortedInstances(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxSortedInstances'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxSortedInstances(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxOccluderTriangles of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_maxOccluderTriangles
static int tolua_get_Renderer_maxOccluderTriangles(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxOccluderTriangles'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxOccluderTriangles());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxOccluderTriangles of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_maxOccluderTriangles
static int tolua_set_Renderer_maxOccluderTriangles(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxOccluderTriangles'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxOccluderTriangles(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occlusionBufferSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_occlusionBufferSize
static int tolua_get_Renderer_occlusionBufferSize(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionBufferSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetOcclusionBufferSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occlusionBufferSize of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_occlusionBufferSize
static int tolua_set_Renderer_occlusionBufferSize(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionBufferSize'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOcclusionBufferSize(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occluderSizeThreshold of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_occluderSizeThreshold
static int tolua_get_Renderer_occluderSizeThreshold(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occluderSizeThreshold'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetOccluderSizeThreshold());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occluderSizeThreshold of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_occluderSizeThreshold
static int tolua_set_Renderer_occluderSizeThreshold(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occluderSizeThreshold'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOccluderSizeThreshold(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: threadedOcclusion of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_threadedOcclusion
static int tolua_get_Renderer_threadedOcclusion(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'threadedOcclusion'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetThreadedOcclusion());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: threadedOcclusion of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_threadedOcclusion
static int tolua_set_Renderer_threadedOcclusion(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'threadedOcclusion'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetThreadedOcclusion(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: mobileShadowBiasMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_mobileShadowBiasMul
static int tolua_get_Renderer_mobileShadowBiasMul(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mobileShadowBiasMul'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMobileShadowBiasMul());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: mobileShadowBiasMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_mobileShadowBiasMul
static int tolua_set_Renderer_mobileShadowBiasMul(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mobileShadowBiasMul'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMobileShadowBiasMul(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: mobileShadowBiasAdd of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_mobileShadowBiasAdd
static int tolua_get_Renderer_mobileShadowBiasAdd(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mobileShadowBiasAdd'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMobileShadowBiasAdd());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: mobileShadowBiasAdd of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_mobileShadowBiasAdd
static int tolua_set_Renderer_mobileShadowBiasAdd(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mobileShadowBiasAdd'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMobileShadowBiasAdd(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: mobileNormalOffsetMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_mobileNormalOffsetMul
static int tolua_get_Renderer_mobileNormalOffsetMul(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mobileNormalOffsetMul'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMobileNormalOffsetMul());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: mobileNormalOffsetMul of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_set_Renderer_mobileNormalOffsetMul
static int tolua_set_Renderer_mobileNormalOffsetMul(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'mobileNormalOffsetMul'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMobileNormalOffsetMul(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numViews of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_numViews
static int tolua_get_Renderer_numViews(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numViews'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumViews());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numPrimitives of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_numPrimitives
static int tolua_get_Renderer_numPrimitives(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numPrimitives'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumPrimitives());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numBatches of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_numBatches
static int tolua_get_Renderer_numBatches(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numBatches'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumBatches());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: defaultZone of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_defaultZone_ptr
static int tolua_get_Renderer_defaultZone_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultZone'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetDefaultZone(),"Zone");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: defaultMaterial of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_defaultMaterial_ptr
static int tolua_get_Renderer_defaultMaterial_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultMaterial'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetDefaultMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: defaultLightRamp of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_defaultLightRamp_ptr
static int tolua_get_Renderer_defaultLightRamp_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultLightRamp'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetDefaultLightRamp(),"Texture2D");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: defaultLightSpot of class  Renderer */
#ifndef TOLUA_DISABLE_tolua_get_Renderer_defaultLightSpot_ptr
static int tolua_get_Renderer_defaultLightSpot_ptr(lua_State* tolua_S)
{
  Renderer* self = (Renderer*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'defaultLightSpot'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetDefaultLightSpot(),"Texture2D");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* function: GetRenderer */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_GetRenderer00
static int tolua_GraphicsLuaAPI_GetRenderer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isnoobj(tolua_S,1,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Renderer* tolua_ret = (Renderer*)  GetRenderer();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Renderer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRenderer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: renderer */
#ifndef TOLUA_DISABLE_tolua_get_renderer_ptr
static int tolua_get_renderer_ptr(lua_State* tolua_S)
{
  tolua_pushusertype(tolua_S,(void*)GetRenderer(),"Renderer");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderTargetInfo_new00
static int tolua_GraphicsLuaAPI_RenderTargetInfo_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RenderTargetInfo",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  RenderTargetInfo* tolua_ret = (RenderTargetInfo*)  Mtolua_new((RenderTargetInfo)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderTargetInfo");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderTargetInfo_new00_local
static int tolua_GraphicsLuaAPI_RenderTargetInfo_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RenderTargetInfo",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  RenderTargetInfo* tolua_ret = (RenderTargetInfo*)  Mtolua_new((RenderTargetInfo)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderTargetInfo");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Load of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderTargetInfo_Load00
static int tolua_GraphicsLuaAPI_RenderTargetInfo_Load00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderTargetInfo",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const XMLElement",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
  const XMLElement* element = ((const XMLElement*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Load'", NULL);
#endif
 {
  self->Load(*element);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Load'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: name_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_name
static int tolua_get_RenderTargetInfo_name(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->name_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: name_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_name
static int tolua_set_RenderTargetInfo_name(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->name_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: tag_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_tag
static int tolua_get_RenderTargetInfo_tag(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tag_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->tag_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: tag_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_tag
static int tolua_set_RenderTargetInfo_tag(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tag_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->tag_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: format_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_format
static int tolua_get_RenderTargetInfo_format(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'format_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->format_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: format_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_format
static int tolua_set_RenderTargetInfo_format(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'format_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->format_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: size_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_size
static int tolua_get_RenderTargetInfo_size(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'size_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->size_,"Vector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: size_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_size
static int tolua_set_RenderTargetInfo_size(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'size_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->size_ = *((Vector2*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sizeMode_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_sizeMode
static int tolua_get_RenderTargetInfo_sizeMode(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sizeMode_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->sizeMode_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sizeMode_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_sizeMode
static int tolua_set_RenderTargetInfo_sizeMode(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sizeMode_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->sizeMode_ = ((RenderTargetSizeMode) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: multiSample_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_multiSample
static int tolua_get_RenderTargetInfo_multiSample(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'multiSample_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->multiSample_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: multiSample_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_multiSample
static int tolua_set_RenderTargetInfo_multiSample(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'multiSample_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->multiSample_ = ((int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: autoResolve_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_autoResolve
static int tolua_get_RenderTargetInfo_autoResolve(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoResolve_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->autoResolve_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: autoResolve_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_autoResolve
static int tolua_set_RenderTargetInfo_autoResolve(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoResolve_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->autoResolve_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: enabled_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_enabled
static int tolua_get_RenderTargetInfo_enabled(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->enabled_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: enabled_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_enabled
static int tolua_set_RenderTargetInfo_enabled(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->enabled_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: cubemap_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_cubemap
static int tolua_get_RenderTargetInfo_cubemap(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cubemap_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->cubemap_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: cubemap_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_cubemap
static int tolua_set_RenderTargetInfo_cubemap(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cubemap_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->cubemap_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: filtered_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_filtered
static int tolua_get_RenderTargetInfo_filtered(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'filtered_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->filtered_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: filtered_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_filtered
static int tolua_set_RenderTargetInfo_filtered(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'filtered_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->filtered_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sRGB_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_sRGB
static int tolua_get_RenderTargetInfo_sRGB(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGB_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->sRGB_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sRGB_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_sRGB
static int tolua_set_RenderTargetInfo_sRGB(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGB_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->sRGB_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: persistent_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_get_RenderTargetInfo_persistent
static int tolua_get_RenderTargetInfo_persistent(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'persistent_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->persistent_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: persistent_ of class  RenderTargetInfo */
#ifndef TOLUA_DISABLE_tolua_set_RenderTargetInfo_persistent
static int tolua_set_RenderTargetInfo_persistent(lua_State* tolua_S)
{
  RenderTargetInfo* self = (RenderTargetInfo*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'persistent_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->persistent_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_new00
static int tolua_GraphicsLuaAPI_RenderPathCommand_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  RenderPathCommand* tolua_ret = (RenderPathCommand*)  Mtolua_new((RenderPathCommand)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderPathCommand");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_new00_local
static int tolua_GraphicsLuaAPI_RenderPathCommand_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  RenderPathCommand* tolua_ret = (RenderPathCommand*)  Mtolua_new((RenderPathCommand)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderPathCommand");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Load of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_Load00
static int tolua_GraphicsLuaAPI_RenderPathCommand_Load00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const XMLElement",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  const XMLElement* element = ((const XMLElement*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Load'", NULL);
#endif
 {
  self->Load(*element);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Load'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTextureName of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetTextureName00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetTextureName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  TextureUnit unit = ((TextureUnit) (int)  tolua_tonumber(tolua_S,2,0));
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTextureName'", NULL);
#endif
 {
  self->SetTextureName(unit,name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTextureName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderParameter of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetShaderParameter00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Variant",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  const Variant* value = ((const Variant*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderParameter'", NULL);
#endif
 {
  self->SetShaderParameter(name,*value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveShaderParameter of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_RemoveShaderParameter00
static int tolua_GraphicsLuaAPI_RenderPathCommand_RemoveShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveShaderParameter'", NULL);
#endif
 {
  self->RemoveShaderParameter(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumOutputs of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetNumOutputs00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetNumOutputs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumOutputs'", NULL);
#endif
 {
  self->SetNumOutputs(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumOutputs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOutput of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetOutput00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetOutput00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,3,0));
  CubeMapFace face = ((CubeMapFace) (int)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOutput'", NULL);
#endif
 {
  self->SetOutput(index,name,face);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOutput'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOutputName of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetOutputName00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetOutputName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOutputName'", NULL);
#endif
 {
  self->SetOutputName(index,name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOutputName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOutputFace of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetOutputFace00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetOutputFace00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  CubeMapFace face = ((CubeMapFace) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOutputFace'", NULL);
#endif
 {
  self->SetOutputFace(index,face);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOutputFace'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDepthStencilName of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_SetDepthStencilName00
static int tolua_GraphicsLuaAPI_RenderPathCommand_SetDepthStencilName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPathCommand",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDepthStencilName'", NULL);
#endif
 {
  self->SetDepthStencilName(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDepthStencilName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTextureName of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_GetTextureName00
static int tolua_GraphicsLuaAPI_RenderPathCommand_GetTextureName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPathCommand* self = (const RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  TextureUnit unit = ((TextureUnit) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTextureName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetTextureName(unit);
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTextureName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShaderParameter of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_GetShaderParameter00
static int tolua_GraphicsLuaAPI_RenderPathCommand_GetShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPathCommand",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPathCommand* self = (const RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShaderParameter'", NULL);
#endif
 {
  const Variant& tolua_ret = (const Variant&)  self->GetShaderParameter(name);
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Variant");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumOutputs of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_GetNumOutputs00
static int tolua_GraphicsLuaAPI_RenderPathCommand_GetNumOutputs00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPathCommand",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPathCommand* self = (const RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumOutputs'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumOutputs();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumOutputs'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOutputName of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_GetOutputName00
static int tolua_GraphicsLuaAPI_RenderPathCommand_GetOutputName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPathCommand* self = (const RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOutputName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetOutputName(index);
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOutputName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOutputFace of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_GetOutputFace00
static int tolua_GraphicsLuaAPI_RenderPathCommand_GetOutputFace00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPathCommand",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPathCommand* self = (const RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOutputFace'", NULL);
#endif
 {
  CubeMapFace tolua_ret = (CubeMapFace)  self->GetOutputFace(index);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOutputFace'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDepthStencilName of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPathCommand_GetDepthStencilName00
static int tolua_GraphicsLuaAPI_RenderPathCommand_GetDepthStencilName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPathCommand",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPathCommand* self = (const RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDepthStencilName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetDepthStencilName();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDepthStencilName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: tag_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_tag
static int tolua_get_RenderPathCommand_tag(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tag_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->tag_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: tag_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_tag
static int tolua_set_RenderPathCommand_tag(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tag_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->tag_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: type_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_type
static int tolua_get_RenderPathCommand_type(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'type_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->type_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: type_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_type
static int tolua_set_RenderPathCommand_type(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'type_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->type_ = ((RenderCommandType) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sortMode_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_sortMode
static int tolua_get_RenderPathCommand_sortMode(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sortMode_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->sortMode_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sortMode_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_sortMode
static int tolua_set_RenderPathCommand_sortMode(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sortMode_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->sortMode_ = ((RenderCommandSortMode) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pass_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_pass
static int tolua_get_RenderPathCommand_pass(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pass_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->pass_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pass_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_pass
static int tolua_set_RenderPathCommand_pass(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pass_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->pass_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: metadata_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_metadata
static int tolua_get_RenderPathCommand_metadata(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'metadata_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->metadata_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: metadata_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_metadata
static int tolua_set_RenderPathCommand_metadata(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'metadata_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->metadata_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexShaderName_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_vertexShaderName
static int tolua_get_RenderPathCommand_vertexShaderName(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderName_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->vertexShaderName_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexShaderName_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_vertexShaderName
static int tolua_set_RenderPathCommand_vertexShaderName(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderName_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->vertexShaderName_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pixelShaderName_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_pixelShaderName
static int tolua_get_RenderPathCommand_pixelShaderName(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderName_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->pixelShaderName_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pixelShaderName_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_pixelShaderName
static int tolua_set_RenderPathCommand_pixelShaderName(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderName_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->pixelShaderName_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexShaderDefines_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_vertexShaderDefines
static int tolua_get_RenderPathCommand_vertexShaderDefines(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefines_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->vertexShaderDefines_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexShaderDefines_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_vertexShaderDefines
static int tolua_set_RenderPathCommand_vertexShaderDefines(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefines_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->vertexShaderDefines_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pixelShaderDefines_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_pixelShaderDefines
static int tolua_get_RenderPathCommand_pixelShaderDefines(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefines_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->pixelShaderDefines_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pixelShaderDefines_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_pixelShaderDefines
static int tolua_set_RenderPathCommand_pixelShaderDefines(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefines_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->pixelShaderDefines_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: clearFlags_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_clearFlags
static int tolua_get_RenderPathCommand_clearFlags(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearFlags_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->clearFlags_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: clearFlags_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_clearFlags
static int tolua_set_RenderPathCommand_clearFlags(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearFlags_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->clearFlags_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: clearColor_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_clearColor
static int tolua_get_RenderPathCommand_clearColor(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearColor_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->clearColor_,"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: clearColor_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_clearColor
static int tolua_set_RenderPathCommand_clearColor(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearColor_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->clearColor_ = *((Color*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: clearDepth_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_clearDepth
static int tolua_get_RenderPathCommand_clearDepth(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearDepth_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->clearDepth_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: clearDepth_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_clearDepth
static int tolua_set_RenderPathCommand_clearDepth(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearDepth_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->clearDepth_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: clearStencil_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_clearStencil
static int tolua_get_RenderPathCommand_clearStencil(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearStencil_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->clearStencil_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: clearStencil_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_clearStencil
static int tolua_set_RenderPathCommand_clearStencil(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'clearStencil_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->clearStencil_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: blendMode_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_blendMode
static int tolua_get_RenderPathCommand_blendMode(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blendMode_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->blendMode_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: blendMode_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_blendMode
static int tolua_set_RenderPathCommand_blendMode(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blendMode_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->blendMode_ = ((BlendMode) (int)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: enabled_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_enabled
static int tolua_get_RenderPathCommand_enabled(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->enabled_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: enabled_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_enabled
static int tolua_set_RenderPathCommand_enabled(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'enabled_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->enabled_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: useFogColor_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_useFogColor
static int tolua_get_RenderPathCommand_useFogColor(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useFogColor_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->useFogColor_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: useFogColor_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_useFogColor
static int tolua_set_RenderPathCommand_useFogColor(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useFogColor_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->useFogColor_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: markToStencil_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_markToStencil
static int tolua_get_RenderPathCommand_markToStencil(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'markToStencil_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->markToStencil_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: markToStencil_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_markToStencil
static int tolua_set_RenderPathCommand_markToStencil(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'markToStencil_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->markToStencil_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: useLitBase_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_useLitBase
static int tolua_get_RenderPathCommand_useLitBase(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useLitBase_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->useLitBase_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: useLitBase_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_useLitBase
static int tolua_set_RenderPathCommand_useLitBase(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'useLitBase_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->useLitBase_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexLights_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_vertexLights
static int tolua_get_RenderPathCommand_vertexLights(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexLights_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->vertexLights_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexLights_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_vertexLights
static int tolua_set_RenderPathCommand_vertexLights(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexLights_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->vertexLights_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: eventName_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_get_RenderPathCommand_eventName
static int tolua_get_RenderPathCommand_eventName(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'eventName_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->eventName_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: eventName_ of class  RenderPathCommand */
#ifndef TOLUA_DISABLE_tolua_set_RenderPathCommand_eventName
static int tolua_set_RenderPathCommand_eventName(lua_State* tolua_S)
{
  RenderPathCommand* self = (RenderPathCommand*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'eventName_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->eventName_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: RenderPathClone of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_Clone00
static int tolua_GraphicsLuaAPI_RenderPath_Clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RenderPathClone'", NULL);
#endif
 {
  tolua_outside RenderPath* tolua_ret = (tolua_outside RenderPath*)  RenderPathClone(self);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderPath");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Load of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_Load00
static int tolua_GraphicsLuaAPI_RenderPath_Load00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"XMLFile",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  XMLFile* file = ((XMLFile*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Load'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->Load(file);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Load'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Append of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_Append00
static int tolua_GraphicsLuaAPI_RenderPath_Append00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"XMLFile",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  XMLFile* file = ((XMLFile*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Append'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->Append(file);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Append'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEnabled of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_SetEnabled00
static int tolua_GraphicsLuaAPI_RenderPath_SetEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String tag = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  bool active = ((bool)  tolua_toboolean(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEnabled'", NULL);
#endif
 {
  self->SetEnabled(tag,active);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsEnabled of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_IsEnabled00
static int tolua_GraphicsLuaAPI_RenderPath_IsEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPath* self = (const RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String tag = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsEnabled'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsEnabled(tag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsAdded of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_IsAdded00
static int tolua_GraphicsLuaAPI_RenderPath_IsAdded00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPath* self = (const RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String tag = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsAdded'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsAdded(tag);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsAdded'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ToggleEnabled of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_ToggleEnabled00
static int tolua_GraphicsLuaAPI_RenderPath_ToggleEnabled00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String tag = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ToggleEnabled'", NULL);
#endif
 {
  self->ToggleEnabled(tag);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ToggleEnabled'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRenderTarget of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_SetRenderTarget00
static int tolua_GraphicsLuaAPI_RenderPath_SetRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const RenderTargetInfo",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const RenderTargetInfo* info = ((const RenderTargetInfo*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRenderTarget'", NULL);
#endif
 {
  self->SetRenderTarget(index,*info);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddRenderTarget of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_AddRenderTarget00
static int tolua_GraphicsLuaAPI_RenderPath_AddRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const RenderTargetInfo",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const RenderTargetInfo* info = ((const RenderTargetInfo*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddRenderTarget'", NULL);
#endif
 {
  self->AddRenderTarget(*info);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveRenderTarget of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget00
static int tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveRenderTarget'", NULL);
#endif
 {
  self->RemoveRenderTarget(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveRenderTarget of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget01
static int tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveRenderTarget'", NULL);
#endif
 {
  self->RemoveRenderTarget(index);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveRenderTargets of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTargets00
static int tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTargets00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String tag = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveRenderTargets'", NULL);
#endif
 {
  self->RemoveRenderTargets(tag);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveRenderTargets'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCommand of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_SetCommand00
static int tolua_GraphicsLuaAPI_RenderPath_SetCommand00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const RenderPathCommand",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const RenderPathCommand* command = ((const RenderPathCommand*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCommand'", NULL);
#endif
 {
  self->SetCommand(index,*command);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCommand'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddCommand of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_AddCommand00
static int tolua_GraphicsLuaAPI_RenderPath_AddCommand00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const RenderPathCommand",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const RenderPathCommand* command = ((const RenderPathCommand*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddCommand'", NULL);
#endif
 {
  self->AddCommand(*command);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddCommand'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: InsertCommand of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_InsertCommand00
static int tolua_GraphicsLuaAPI_RenderPath_InsertCommand00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const RenderPathCommand",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  const RenderPathCommand* command = ((const RenderPathCommand*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'InsertCommand'", NULL);
#endif
 {
  self->InsertCommand(index,*command);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'InsertCommand'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveCommand of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_RemoveCommand00
static int tolua_GraphicsLuaAPI_RenderPath_RemoveCommand00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveCommand'", NULL);
#endif
 {
  self->RemoveCommand(index);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveCommand'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveCommands of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_RemoveCommands00
static int tolua_GraphicsLuaAPI_RenderPath_RemoveCommands00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String tag = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveCommands'", NULL);
#endif
 {
  self->RemoveCommands(tag);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveCommands'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShaderParameter of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_SetShaderParameter00
static int tolua_GraphicsLuaAPI_RenderPath_SetShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,3,&tolua_err) || !tolua_isusertype(tolua_S,3,"const Variant",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
  const Variant* value = ((const Variant*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShaderParameter'", NULL);
#endif
 {
  self->SetShaderParameter(name,*value);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumRenderTargets of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_GetNumRenderTargets00
static int tolua_GraphicsLuaAPI_RenderPath_GetNumRenderTargets00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPath",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPath* self = (const RenderPath*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumRenderTargets'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumRenderTargets();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumRenderTargets'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumCommands of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_GetNumCommands00
static int tolua_GraphicsLuaAPI_RenderPath_GetNumCommands00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPath",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPath* self = (const RenderPath*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumCommands'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumCommands();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumCommands'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCommand of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_GetCommand00
static int tolua_GraphicsLuaAPI_RenderPath_GetCommand00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderPath",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderPath* self = (RenderPath*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCommand'", NULL);
#endif
 {
  RenderPathCommand* tolua_ret = (RenderPathCommand*)  self->GetCommand(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderPathCommand");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCommand'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShaderParameter of class  RenderPath */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderPath_GetShaderParameter00
static int tolua_GraphicsLuaAPI_RenderPath_GetShaderParameter00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderPath",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderPath* self = (const RenderPath*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShaderParameter'", NULL);
#endif
 {
  const Variant& tolua_ret = (const Variant&)  self->GetShaderParameter(name);
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Variant");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShaderParameter'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_new00
static int tolua_GraphicsLuaAPI_RenderSurface_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* parentTexture = ((Texture*)  tolua_tousertype(tolua_S,2,0));
 {
  RenderSurface* tolua_ret = (RenderSurface*)  Mtolua_new((RenderSurface)(parentTexture));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_new00_local
static int tolua_GraphicsLuaAPI_RenderSurface_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* parentTexture = ((Texture*)  tolua_tousertype(tolua_S,2,0));
 {
  RenderSurface* tolua_ret = (RenderSurface*)  Mtolua_new((RenderSurface)(parentTexture));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_delete00
static int tolua_GraphicsLuaAPI_RenderSurface_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumViewports of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_SetNumViewports00
static int tolua_GraphicsLuaAPI_RenderSurface_SetNumViewports00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumViewports'", NULL);
#endif
 {
  self->SetNumViewports(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumViewports'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetViewport of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_SetViewport00
static int tolua_GraphicsLuaAPI_RenderSurface_SetViewport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  Viewport* viewport = ((Viewport*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetViewport'", NULL);
#endif
 {
  self->SetViewport(index,viewport);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetViewport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUpdateMode of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_SetUpdateMode00
static int tolua_GraphicsLuaAPI_RenderSurface_SetUpdateMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
  RenderSurfaceUpdateMode mode = ((RenderSurfaceUpdateMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUpdateMode'", NULL);
#endif
 {
  self->SetUpdateMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUpdateMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLinkedRenderTarget of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_SetLinkedRenderTarget00
static int tolua_GraphicsLuaAPI_RenderSurface_SetLinkedRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
  RenderSurface* renderTarget = ((RenderSurface*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLinkedRenderTarget'", NULL);
#endif
 {
  self->SetLinkedRenderTarget(renderTarget);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLinkedRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLinkedDepthStencil of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_SetLinkedDepthStencil00
static int tolua_GraphicsLuaAPI_RenderSurface_SetLinkedDepthStencil00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
  RenderSurface* depthStencil = ((RenderSurface*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLinkedDepthStencil'", NULL);
#endif
 {
  self->SetLinkedDepthStencil(depthStencil);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLinkedDepthStencil'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: QueueUpdate of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_QueueUpdate00
static int tolua_GraphicsLuaAPI_RenderSurface_QueueUpdate00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'QueueUpdate'", NULL);
#endif
 {
  self->QueueUpdate();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'QueueUpdate'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Release of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_Release00
static int tolua_GraphicsLuaAPI_RenderSurface_Release00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Release'", NULL);
#endif
 {
  self->Release();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Release'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetParentTexture of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetParentTexture00
static int tolua_GraphicsLuaAPI_RenderSurface_GetParentTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetParentTexture'", NULL);
#endif
 {
  Texture* tolua_ret = (Texture*)  self->GetParentTexture();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetParentTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWidth of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetWidth00
static int tolua_GraphicsLuaAPI_RenderSurface_GetWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWidth'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeight of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetHeight00
static int tolua_GraphicsLuaAPI_RenderSurface_GetHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeight'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUsage of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetUsage00
static int tolua_GraphicsLuaAPI_RenderSurface_GetUsage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUsage'", NULL);
#endif
 {
  TextureUsage tolua_ret = (TextureUsage)  self->GetUsage();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUsage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumViewports of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetNumViewports00
static int tolua_GraphicsLuaAPI_RenderSurface_GetNumViewports00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumViewports'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumViewports();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumViewports'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewport of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetViewport00
static int tolua_GraphicsLuaAPI_RenderSurface_GetViewport00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewport'", NULL);
#endif
 {
  Viewport* tolua_ret = (Viewport*)  self->GetViewport(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewport'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUpdateMode of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetUpdateMode00
static int tolua_GraphicsLuaAPI_RenderSurface_GetUpdateMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUpdateMode'", NULL);
#endif
 {
  RenderSurfaceUpdateMode tolua_ret = (RenderSurfaceUpdateMode)  self->GetUpdateMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUpdateMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLinkedRenderTarget of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetLinkedRenderTarget00
static int tolua_GraphicsLuaAPI_RenderSurface_GetLinkedRenderTarget00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLinkedRenderTarget'", NULL);
#endif
 {
  RenderSurface* tolua_ret = (RenderSurface*)  self->GetLinkedRenderTarget();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLinkedRenderTarget'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLinkedDepthStencil of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_GetLinkedDepthStencil00
static int tolua_GraphicsLuaAPI_RenderSurface_GetLinkedDepthStencil00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLinkedDepthStencil'", NULL);
#endif
 {
  RenderSurface* tolua_ret = (RenderSurface*)  self->GetLinkedDepthStencil();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLinkedDepthStencil'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsResolveDirty of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RenderSurface_IsResolveDirty00
static int tolua_GraphicsLuaAPI_RenderSurface_IsResolveDirty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RenderSurface",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RenderSurface* self = (const RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsResolveDirty'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsResolveDirty();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsResolveDirty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: parentTexture of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_parentTexture_ptr
static int tolua_get_RenderSurface_parentTexture_ptr(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'parentTexture'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetParentTexture(),"Texture");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: width of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_width
static int tolua_get_RenderSurface_width(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetWidth());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: height of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_height
static int tolua_get_RenderSurface_height(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'height'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetHeight());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: usage of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_usage
static int tolua_get_RenderSurface_usage(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'usage'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetUsage());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numViewports of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_numViewports
static int tolua_get_RenderSurface_numViewports(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numViewports'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumViewports());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: numViewports of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_set_RenderSurface_numViewports
static int tolua_set_RenderSurface_numViewports(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numViewports'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNumViewports(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: updateMode of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_updateMode
static int tolua_get_RenderSurface_updateMode(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetUpdateMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: updateMode of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_set_RenderSurface_updateMode
static int tolua_set_RenderSurface_updateMode(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUpdateMode(((RenderSurfaceUpdateMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: linkedRenderTarget of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_linkedRenderTarget_ptr
static int tolua_get_RenderSurface_linkedRenderTarget_ptr(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'linkedRenderTarget'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetLinkedRenderTarget(),"RenderSurface");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: linkedRenderTarget of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_set_RenderSurface_linkedRenderTarget_ptr
static int tolua_set_RenderSurface_linkedRenderTarget_ptr(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'linkedRenderTarget'",NULL);
 if (!tolua_isusertype(tolua_S,2,"RenderSurface",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLinkedRenderTarget(((RenderSurface*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: linkedDepthStencil of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_linkedDepthStencil_ptr
static int tolua_get_RenderSurface_linkedDepthStencil_ptr(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'linkedDepthStencil'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetLinkedDepthStencil(),"RenderSurface");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: linkedDepthStencil of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_set_RenderSurface_linkedDepthStencil_ptr
static int tolua_set_RenderSurface_linkedDepthStencil_ptr(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'linkedDepthStencil'",NULL);
 if (!tolua_isusertype(tolua_S,2,"RenderSurface",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLinkedDepthStencil(((RenderSurface*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: resolveDirty of class  RenderSurface */
#ifndef TOLUA_DISABLE_tolua_get_RenderSurface_resolveDirty
static int tolua_get_RenderSurface_resolveDirty(lua_State* tolua_S)
{
  RenderSurface* self = (RenderSurface*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'resolveDirty'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsResolveDirty());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetMaterial00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexDistance of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetVertexDistance00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetVertexDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  float length = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexDistance'", NULL);
#endif
 {
  self->SetVertexDistance(length);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWidth of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetWidth00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  float width = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWidth'", NULL);
#endif
 {
  self->SetWidth(width);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetStartColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetStartColor00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  const Color* c = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetStartColor'", NULL);
#endif
 {
  self->SetStartColor(*c);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEndColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetEndColor00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetEndColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  const Color* c = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEndColor'", NULL);
#endif
 {
  self->SetEndColor(*c);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEndColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetStartScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetStartScale00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetStartScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  float startScale = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetStartScale'", NULL);
#endif
 {
  self->SetStartScale(startScale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetStartScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEndScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetEndScale00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetEndScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  float endScale = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEndScale'", NULL);
#endif
 {
  self->SetEndScale(endScale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEndScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTrailType of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetTrailType00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetTrailType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  TrailType type = ((TrailType) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTrailType'", NULL);
#endif
 {
  self->SetTrailType(type);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTrailType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBaseVelocity of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetBaseVelocity00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetBaseVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* baseVelocity = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBaseVelocity'", NULL);
#endif
 {
  self->SetBaseVelocity(*baseVelocity);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBaseVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSorted of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetSorted00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetSorted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSorted'", NULL);
#endif
 {
  self->SetSorted(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSorted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLifetime of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetLifetime00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetLifetime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  float time = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLifetime'", NULL);
#endif
 {
  self->SetLifetime(time);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLifetime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEmitting of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetEmitting00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetEmitting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  bool emitting = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEmitting'", NULL);
#endif
 {
  self->SetEmitting(emitting);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEmitting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetUpdateInvisible of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetUpdateInvisible00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetUpdateInvisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  bool updateInvisible = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetUpdateInvisible'", NULL);
#endif
 {
  self->SetUpdateInvisible(updateInvisible);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetUpdateInvisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetTailColumn of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetTailColumn00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetTailColumn00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  unsigned tailColumn = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetTailColumn'", NULL);
#endif
 {
  self->SetTailColumn(tailColumn);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetTailColumn'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAnimationLodBias of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_SetAnimationLodBias00
static int tolua_GraphicsLuaAPI_RibbonTrail_SetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
  float bias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAnimationLodBias'", NULL);
#endif
 {
  self->SetAnimationLodBias(bias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Commit of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_Commit00
static int tolua_GraphicsLuaAPI_RibbonTrail_Commit00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Commit'", NULL);
#endif
 {
  self->Commit();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Commit'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetMaterial00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexDistance of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetVertexDistance00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetVertexDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetVertexDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWidth of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetWidth00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWidth'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStartColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetStartColor00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStartColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetStartColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEndColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetEndColor00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetEndColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEndColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetEndColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEndColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetStartScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetStartScale00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetStartScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetStartScale'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetStartScale();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetStartScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEndScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetEndScale00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetEndScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEndScale'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetEndScale();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEndScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTrailType of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetTrailType00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetTrailType00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTrailType'", NULL);
#endif
 {
  TrailType tolua_ret = (TrailType)  self->GetTrailType();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTrailType'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBaseVelocity of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetBaseVelocity00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetBaseVelocity00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBaseVelocity'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetBaseVelocity();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBaseVelocity'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsSorted of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_IsSorted00
static int tolua_GraphicsLuaAPI_RibbonTrail_IsSorted00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsSorted'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsSorted();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsSorted'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLifetime of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetLifetime00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetLifetime00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLifetime'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLifetime();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLifetime'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetTailColumn of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetTailColumn00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetTailColumn00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetTailColumn'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetTailColumn();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetTailColumn'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsEmitting of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_IsEmitting00
static int tolua_GraphicsLuaAPI_RibbonTrail_IsEmitting00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsEmitting'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsEmitting();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsEmitting'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUpdateInvisible of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetUpdateInvisible00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetUpdateInvisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUpdateInvisible'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetUpdateInvisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUpdateInvisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnimationLodBias of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_RibbonTrail_GetAnimationLodBias00
static int tolua_GraphicsLuaAPI_RibbonTrail_GetAnimationLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const RibbonTrail",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const RibbonTrail* self = (const RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnimationLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetAnimationLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnimationLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_material_ptr
static int tolua_get_RibbonTrail_material_ptr(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_material_ptr
static int tolua_set_RibbonTrail_material_ptr(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexDistance of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_vertexDistance
static int tolua_get_RibbonTrail_vertexDistance(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetVertexDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexDistance of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_vertexDistance
static int tolua_set_RibbonTrail_vertexDistance(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetVertexDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: width of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_width
static int tolua_get_RibbonTrail_width(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetWidth());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: width of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_width
static int tolua_set_RibbonTrail_width(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'width'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetWidth(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: startColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_startColor_ref
static int tolua_get_RibbonTrail_startColor_ref(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'startColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetStartColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: startColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_startColor_ref
static int tolua_set_RibbonTrail_startColor_ref(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'startColor'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetStartColor((*(Color*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: endColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_endColor_ref
static int tolua_get_RibbonTrail_endColor_ref(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'endColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetEndColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: endColor of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_endColor_ref
static int tolua_set_RibbonTrail_endColor_ref(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'endColor'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEndColor((*(Color*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: startScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_startScale
static int tolua_get_RibbonTrail_startScale(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'startScale'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetStartScale());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: startScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_startScale
static int tolua_set_RibbonTrail_startScale(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'startScale'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetStartScale(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: endScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_endScale
static int tolua_get_RibbonTrail_endScale(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'endScale'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetEndScale());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: endScale of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_endScale
static int tolua_set_RibbonTrail_endScale(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'endScale'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEndScale(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: trailType of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_trailType
static int tolua_get_RibbonTrail_trailType(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'trailType'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTrailType());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: trailType of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_trailType
static int tolua_set_RibbonTrail_trailType(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'trailType'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTrailType(((TrailType) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: baseVelocity of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_baseVelocity
static int tolua_get_RibbonTrail_baseVelocity(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'baseVelocity'",NULL);
#endif
 Vector3 tolua_ret = (Vector3)self->GetBaseVelocity();
 #ifdef __cplusplus
 void* tolua_obj = (void*)Mtolua_new((Vector3)(tolua_ret));
 tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector3));
 tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 #endif
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: baseVelocity of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_baseVelocity
static int tolua_set_RibbonTrail_baseVelocity(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'baseVelocity'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBaseVelocity(*((Vector3*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sorted of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_sorted
static int tolua_get_RibbonTrail_sorted(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sorted'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsSorted());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sorted of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_sorted
static int tolua_set_RibbonTrail_sorted(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sorted'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSorted(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lifetime of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_lifetime
static int tolua_get_RibbonTrail_lifetime(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lifetime'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLifetime());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lifetime of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_lifetime
static int tolua_set_RibbonTrail_lifetime(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lifetime'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLifetime(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: tailColumn of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_tailColumn
static int tolua_get_RibbonTrail_tailColumn(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tailColumn'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetTailColumn());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: tailColumn of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_tailColumn
static int tolua_set_RibbonTrail_tailColumn(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'tailColumn'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetTailColumn(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: emitting of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_emitting
static int tolua_get_RibbonTrail_emitting(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitting'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsEmitting());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: emitting of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_emitting
static int tolua_set_RibbonTrail_emitting(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'emitting'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEmitting(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: updateInvisible of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_updateInvisible
static int tolua_get_RibbonTrail_updateInvisible(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateInvisible'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetUpdateInvisible());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: updateInvisible of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_updateInvisible
static int tolua_set_RibbonTrail_updateInvisible(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'updateInvisible'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetUpdateInvisible(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animationLodBias of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_get_RibbonTrail_animationLodBias
static int tolua_get_RibbonTrail_animationLodBias(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAnimationLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: animationLodBias of class  RibbonTrail */
#ifndef TOLUA_DISABLE_tolua_set_RibbonTrail_animationLodBias
static int tolua_set_RibbonTrail_animationLodBias(lua_State* tolua_S)
{
  RibbonTrail* self = (RibbonTrail*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animationLodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAnimationLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Bone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Bone_new00
static int tolua_GraphicsLuaAPI_Bone_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Bone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Bone* tolua_ret = (Bone*)  Mtolua_new((Bone)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Bone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Bone_new00_local
static int tolua_GraphicsLuaAPI_Bone_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Bone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Bone* tolua_ret = (Bone*)  Mtolua_new((Bone)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Bone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Bone_delete00
static int tolua_GraphicsLuaAPI_Bone_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Bone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: name_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_name
static int tolua_get_Bone_name(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->name_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: name_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_name
static int tolua_set_Bone_name(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name_'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->name_ = ((String)  tolua_tourho3dstring(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: nameHash_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_nameHash
static int tolua_get_Bone_nameHash(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nameHash_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->nameHash_,"StringHash");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: nameHash_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_nameHash
static int tolua_set_Bone_nameHash(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'nameHash_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"StringHash",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->nameHash_ = *((StringHash*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: parentIndex_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_parentIndex
static int tolua_get_Bone_parentIndex(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'parentIndex_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->parentIndex_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: parentIndex_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_parentIndex
static int tolua_set_Bone_parentIndex(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'parentIndex_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->parentIndex_ = ((unsigned)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: initialPosition_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_initialPosition
static int tolua_get_Bone_initialPosition(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialPosition_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->initialPosition_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: initialPosition_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_initialPosition
static int tolua_set_Bone_initialPosition(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialPosition_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->initialPosition_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: initialRotation_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_initialRotation
static int tolua_get_Bone_initialRotation(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialRotation_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->initialRotation_,"Quaternion");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: initialRotation_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_initialRotation
static int tolua_set_Bone_initialRotation(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialRotation_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Quaternion",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->initialRotation_ = *((Quaternion*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: initialScale_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_initialScale
static int tolua_get_Bone_initialScale(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialScale_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->initialScale_,"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: initialScale_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_initialScale
static int tolua_set_Bone_initialScale(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'initialScale_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->initialScale_ = *((Vector3*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: offsetMatrix_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_offsetMatrix
static int tolua_get_Bone_offsetMatrix(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'offsetMatrix_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->offsetMatrix_,"Matrix3x4");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: offsetMatrix_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_offsetMatrix
static int tolua_set_Bone_offsetMatrix(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'offsetMatrix_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Matrix3x4",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->offsetMatrix_ = *((Matrix3x4*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: animated_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_animated
static int tolua_get_Bone_animated(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animated_'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->animated_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: animated_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_animated
static int tolua_set_Bone_animated(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'animated_'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->animated_ = ((bool)  tolua_toboolean(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: collisionMask_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_unsigned_collisionMask
static int tolua_get_Bone_unsigned_collisionMask(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'collisionMask_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->collisionMask_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: collisionMask_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_unsigned_collisionMask
static int tolua_set_Bone_unsigned_collisionMask(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'collisionMask_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->collisionMask_ = ((unsigned char)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: radius_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_radius
static int tolua_get_Bone_radius(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'radius_'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->radius_);
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: radius_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_radius
static int tolua_set_Bone_radius(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'radius_'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->radius_ = ((float)  tolua_tonumber(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: boundingBox_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_boundingBox
static int tolua_get_Bone_boundingBox(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->boundingBox_,"BoundingBox");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: boundingBox_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_boundingBox
static int tolua_set_Bone_boundingBox(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox_'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"BoundingBox",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->boundingBox_ = *((BoundingBox*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: node_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_get_Bone_node_ptr
static int tolua_get_Bone_node_ptr(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'node_'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->node_,"Node");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: node_ of class  Bone */
#ifndef TOLUA_DISABLE_tolua_set_Bone_node_ptr
static int tolua_set_Bone_node_ptr(lua_State* tolua_S)
{
  Bone* self = (Bone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'node_'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->node_ = ((Node*)  tolua_tousertype(tolua_S,2,0))
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumBones of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetNumBones00
static int tolua_GraphicsLuaAPI_Skeleton_GetNumBones00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Skeleton",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Skeleton* self = (const Skeleton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumBones'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumBones();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumBones'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRootBone of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetRootBone00
static int tolua_GraphicsLuaAPI_Skeleton_GetRootBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Skeleton",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Skeleton* self = (Skeleton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRootBone'", NULL);
#endif
 {
  Bone* tolua_ret = (Bone*)  self->GetRootBone();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRootBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBone of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetBone00
static int tolua_GraphicsLuaAPI_Skeleton_GetBone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Skeleton",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Skeleton* self = (Skeleton*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBone'", NULL);
#endif
 {
  Bone* tolua_ret = (Bone*)  self->GetBone(name);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBone of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetBone01
static int tolua_GraphicsLuaAPI_Skeleton_GetBone01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Skeleton",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Skeleton* self = (Skeleton*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBone'", NULL);
#endif
 {
  Bone* tolua_ret = (Bone*)  self->GetBone(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Skeleton_GetBone00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoneIndex of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex00
static int tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Skeleton",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Skeleton* self = (const Skeleton*)  tolua_tousertype(tolua_S,1,0);
  const String boneName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoneIndex'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetBoneIndex(boneName);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBoneIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoneIndex of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex01
static int tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Skeleton",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const Bone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Skeleton* self = (const Skeleton*)  tolua_tousertype(tolua_S,1,0);
  const Bone* bone = ((const Bone*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoneIndex'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetBoneIndex(bone);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBoneParent of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Skeleton_GetBoneParent00
static int tolua_GraphicsLuaAPI_Skeleton_GetBoneParent00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Skeleton",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"const Bone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Skeleton* self = (Skeleton*)  tolua_tousertype(tolua_S,1,0);
  const Bone* bone = ((const Bone*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBoneParent'", NULL);
#endif
 {
  Bone* tolua_ret = (Bone*)  self->GetBoneParent(bone);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Bone");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBoneParent'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numBones of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_get_Skeleton_numBones
static int tolua_get_Skeleton_numBones(lua_State* tolua_S)
{
  Skeleton* self = (Skeleton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numBones'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumBones());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: rootBone of class  Skeleton */
#ifndef TOLUA_DISABLE_tolua_get_Skeleton_rootBone_ptr
static int tolua_get_Skeleton_rootBone_ptr(lua_State* tolua_S)
{
  Skeleton* self = (Skeleton*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rootBone'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetRootBone(),"Bone");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetModel of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_SetModel00
static int tolua_GraphicsLuaAPI_StaticModel_SetModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Model",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
  Model* model = ((Model*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetModel'", NULL);
#endif
 {
  self->SetModel(model);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_SetMaterial00
static int tolua_GraphicsLuaAPI_StaticModel_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModel",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_SetMaterial01
static int tolua_GraphicsLuaAPI_StaticModel_SetMaterial01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  Material* material = ((Material*)  tolua_tousertype(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetMaterial(index,material);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_StaticModel_SetMaterial00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOcclusionLodLevel of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_SetOcclusionLodLevel00
static int tolua_GraphicsLuaAPI_StaticModel_SetOcclusionLodLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned level = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOcclusionLodLevel'", NULL);
#endif
 {
  self->SetOcclusionLodLevel(level);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOcclusionLodLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ApplyMaterialList of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_ApplyMaterialList00
static int tolua_GraphicsLuaAPI_StaticModel_ApplyMaterialList00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModel",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
  const String fileName = ((const String)  tolua_tourho3dstring(tolua_S,2,String::EMPTY));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ApplyMaterialList'", NULL);
#endif
 {
  self->ApplyMaterialList(fileName);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ApplyMaterialList'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetModel of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_GetModel00
static int tolua_GraphicsLuaAPI_StaticModel_GetModel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetModel'", NULL);
#endif
 {
  Model* tolua_ret = (Model*)  self->GetModel();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Model");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetModel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumGeometries of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_GetNumGeometries00
static int tolua_GraphicsLuaAPI_StaticModel_GetNumGeometries00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumGeometries'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumGeometries();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumGeometries'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_GetMaterial00
static int tolua_GraphicsLuaAPI_StaticModel_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_GetMaterial01
static int tolua_GraphicsLuaAPI_StaticModel_GetMaterial01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_StaticModel_GetMaterial00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOcclusionLodLevel of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_GetOcclusionLodLevel00
static int tolua_GraphicsLuaAPI_StaticModel_GetOcclusionLodLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOcclusionLodLevel'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetOcclusionLodLevel();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOcclusionLodLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInside of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_IsInside00
static int tolua_GraphicsLuaAPI_StaticModel_IsInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* point = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInside'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInside(*point);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInsideLocal of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModel_IsInsideLocal00
static int tolua_GraphicsLuaAPI_StaticModel_IsInsideLocal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModel",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModel* self = (const StaticModel*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* point = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInsideLocal'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInsideLocal(*point);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsInsideLocal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: model of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_get_StaticModel_model_ptr
static int tolua_get_StaticModel_model_ptr(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'model'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetModel(),"Model");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: model of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_set_StaticModel_model_ptr
static int tolua_set_StaticModel_model_ptr(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'model'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Model",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetModel(((Model*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_get_StaticModel_material_ptr
static int tolua_get_StaticModel_material_ptr(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_set_StaticModel_material_ptr
static int tolua_set_StaticModel_material_ptr(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: boundingBox of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_get_StaticModel_boundingBox_ref
static int tolua_get_StaticModel_boundingBox_ref(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetBoundingBox(),"BoundingBox");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numGeometries of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_get_StaticModel_numGeometries
static int tolua_get_StaticModel_numGeometries(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numGeometries'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumGeometries());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occlusionLodLevel of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_get_StaticModel_occlusionLodLevel
static int tolua_get_StaticModel_occlusionLodLevel(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionLodLevel'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetOcclusionLodLevel());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occlusionLodLevel of class  StaticModel */
#ifndef TOLUA_DISABLE_tolua_set_StaticModel_occlusionLodLevel
static int tolua_set_StaticModel_occlusionLodLevel(lua_State* tolua_S)
{
  StaticModel* self = (StaticModel*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionLodLevel'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOcclusionLodLevel(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: AddInstanceNode of class  StaticModelGroup */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModelGroup_AddInstanceNode00
static int tolua_GraphicsLuaAPI_StaticModelGroup_AddInstanceNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModelGroup",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Node",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModelGroup* self = (StaticModelGroup*)  tolua_tousertype(tolua_S,1,0);
  Node* node = ((Node*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'AddInstanceNode'", NULL);
#endif
 {
  self->AddInstanceNode(node);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'AddInstanceNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveInstanceNode of class  StaticModelGroup */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModelGroup_RemoveInstanceNode00
static int tolua_GraphicsLuaAPI_StaticModelGroup_RemoveInstanceNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModelGroup",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Node",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModelGroup* self = (StaticModelGroup*)  tolua_tousertype(tolua_S,1,0);
  Node* node = ((Node*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveInstanceNode'", NULL);
#endif
 {
  self->RemoveInstanceNode(node);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveInstanceNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemoveAllInstanceNodes of class  StaticModelGroup */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModelGroup_RemoveAllInstanceNodes00
static int tolua_GraphicsLuaAPI_StaticModelGroup_RemoveAllInstanceNodes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"StaticModelGroup",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  StaticModelGroup* self = (StaticModelGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemoveAllInstanceNodes'", NULL);
#endif
 {
  self->RemoveAllInstanceNodes();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemoveAllInstanceNodes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumInstanceNodes of class  StaticModelGroup */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModelGroup_GetNumInstanceNodes00
static int tolua_GraphicsLuaAPI_StaticModelGroup_GetNumInstanceNodes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModelGroup",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModelGroup* self = (const StaticModelGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumInstanceNodes'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumInstanceNodes();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumInstanceNodes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetInstanceNode of class  StaticModelGroup */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_StaticModelGroup_GetInstanceNode00
static int tolua_GraphicsLuaAPI_StaticModelGroup_GetInstanceNode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const StaticModelGroup",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const StaticModelGroup* self = (const StaticModelGroup*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetInstanceNode'", NULL);
#endif
 {
  Node* tolua_ret = (Node*)  self->GetInstanceNode(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Node");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInstanceNode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numInstanceNodes of class  StaticModelGroup */
#ifndef TOLUA_DISABLE_tolua_get_StaticModelGroup_numInstanceNodes
static int tolua_get_StaticModelGroup_numInstanceNodes(lua_State* tolua_S)
{
  StaticModelGroup* self = (StaticModelGroup*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numInstanceNodes'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumInstanceNodes());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBlendMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetBlendMode00
static int tolua_GraphicsLuaAPI_Pass_SetBlendMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  BlendMode mode = ((BlendMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBlendMode'", NULL);
#endif
 {
  self->SetBlendMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBlendMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCullMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetCullMode00
static int tolua_GraphicsLuaAPI_Pass_SetCullMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  CullMode mode = ((CullMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCullMode'", NULL);
#endif
 {
  self->SetCullMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCullMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDepthTestMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetDepthTestMode00
static int tolua_GraphicsLuaAPI_Pass_SetDepthTestMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  CompareMode mode = ((CompareMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDepthTestMode'", NULL);
#endif
 {
  self->SetDepthTestMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDepthTestMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLightingMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetLightingMode00
static int tolua_GraphicsLuaAPI_Pass_SetLightingMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  PassLightingMode mode = ((PassLightingMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLightingMode'", NULL);
#endif
 {
  self->SetLightingMode(mode);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLightingMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDepthWrite of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetDepthWrite00
static int tolua_GraphicsLuaAPI_Pass_SetDepthWrite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDepthWrite'", NULL);
#endif
 {
  self->SetDepthWrite(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDepthWrite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAlphaToCoverage of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetAlphaToCoverage00
static int tolua_GraphicsLuaAPI_Pass_SetAlphaToCoverage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAlphaToCoverage'", NULL);
#endif
 {
  self->SetAlphaToCoverage(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAlphaToCoverage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetIsDesktop of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetIsDesktop00
static int tolua_GraphicsLuaAPI_Pass_SetIsDesktop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetIsDesktop'", NULL);
#endif
 {
  self->SetIsDesktop(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetIsDesktop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetVertexShader00
static int tolua_GraphicsLuaAPI_Pass_SetVertexShader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexShader'", NULL);
#endif
 {
  self->SetVertexShader(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexShader'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPixelShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetPixelShader00
static int tolua_GraphicsLuaAPI_Pass_SetPixelShader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  const String name = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPixelShader'", NULL);
#endif
 {
  self->SetPixelShader(name);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPixelShader'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetVertexShaderDefines00
static int tolua_GraphicsLuaAPI_Pass_SetVertexShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  const String defines = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexShaderDefines'", NULL);
#endif
 {
  self->SetVertexShaderDefines(defines);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPixelShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetPixelShaderDefines00
static int tolua_GraphicsLuaAPI_Pass_SetPixelShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  const String defines = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPixelShaderDefines'", NULL);
#endif
 {
  self->SetPixelShaderDefines(defines);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPixelShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetVertexShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetVertexShaderDefineExcludes00
static int tolua_GraphicsLuaAPI_Pass_SetVertexShaderDefineExcludes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  const String excludes = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetVertexShaderDefineExcludes'", NULL);
#endif
 {
  self->SetVertexShaderDefineExcludes(excludes);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetVertexShaderDefineExcludes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPixelShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_SetPixelShaderDefineExcludes00
static int tolua_GraphicsLuaAPI_Pass_SetPixelShaderDefineExcludes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
  const String excludes = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPixelShaderDefineExcludes'", NULL);
#endif
 {
  self->SetPixelShaderDefineExcludes(excludes);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPixelShaderDefineExcludes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReleaseShaders of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_ReleaseShaders00
static int tolua_GraphicsLuaAPI_Pass_ReleaseShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReleaseShaders'", NULL);
#endif
 {
  self->ReleaseShaders();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReleaseShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetName of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetName00
static int tolua_GraphicsLuaAPI_Pass_GetName00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetName'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetName();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetName'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetIndex of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetIndex00
static int tolua_GraphicsLuaAPI_Pass_GetIndex00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetIndex'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetIndex();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetIndex'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCullMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetCullMode00
static int tolua_GraphicsLuaAPI_Pass_GetCullMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCullMode'", NULL);
#endif
 {
  CullMode tolua_ret = (CullMode)  self->GetCullMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCullMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBlendMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetBlendMode00
static int tolua_GraphicsLuaAPI_Pass_GetBlendMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBlendMode'", NULL);
#endif
 {
  BlendMode tolua_ret = (BlendMode)  self->GetBlendMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBlendMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDepthTestMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetDepthTestMode00
static int tolua_GraphicsLuaAPI_Pass_GetDepthTestMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDepthTestMode'", NULL);
#endif
 {
  CompareMode tolua_ret = (CompareMode)  self->GetDepthTestMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDepthTestMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLightingMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetLightingMode00
static int tolua_GraphicsLuaAPI_Pass_GetLightingMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLightingMode'", NULL);
#endif
 {
  PassLightingMode tolua_ret = (PassLightingMode)  self->GetLightingMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLightingMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDepthWrite of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetDepthWrite00
static int tolua_GraphicsLuaAPI_Pass_GetDepthWrite00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDepthWrite'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetDepthWrite();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDepthWrite'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAlphaToCoverage of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetAlphaToCoverage00
static int tolua_GraphicsLuaAPI_Pass_GetAlphaToCoverage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAlphaToCoverage'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetAlphaToCoverage();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAlphaToCoverage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsDesktop of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_IsDesktop00
static int tolua_GraphicsLuaAPI_Pass_IsDesktop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsDesktop'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsDesktop();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsDesktop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetVertexShader00
static int tolua_GraphicsLuaAPI_Pass_GetVertexShader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexShader'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetVertexShader();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexShader'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPixelShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetPixelShader00
static int tolua_GraphicsLuaAPI_Pass_GetPixelShader00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPixelShader'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetPixelShader();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPixelShader'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetVertexShaderDefines00
static int tolua_GraphicsLuaAPI_Pass_GetVertexShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexShaderDefines'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetVertexShaderDefines();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPixelShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetPixelShaderDefines00
static int tolua_GraphicsLuaAPI_Pass_GetPixelShaderDefines00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPixelShaderDefines'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetPixelShaderDefines();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPixelShaderDefines'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetVertexShaderDefineExcludes00
static int tolua_GraphicsLuaAPI_Pass_GetVertexShaderDefineExcludes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexShaderDefineExcludes'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetVertexShaderDefineExcludes();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexShaderDefineExcludes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPixelShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Pass_GetPixelShaderDefineExcludes00
static int tolua_GraphicsLuaAPI_Pass_GetPixelShaderDefineExcludes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Pass",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Pass* self = (const Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPixelShaderDefineExcludes'", NULL);
#endif
 {
  const String tolua_ret = (const String)  self->GetPixelShaderDefineExcludes();
 tolua_pushurho3dstring(tolua_S,(const char*)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPixelShaderDefineExcludes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: name of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_name
static int tolua_get_Pass_name(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'name'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetName());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: index of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_index
static int tolua_get_Pass_index(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'index'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetIndex());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: blendMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_blendMode
static int tolua_get_Pass_blendMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blendMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetBlendMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: blendMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_blendMode
static int tolua_set_Pass_blendMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'blendMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBlendMode(((BlendMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: cullMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_cullMode
static int tolua_get_Pass_cullMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cullMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetCullMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: cullMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_cullMode
static int tolua_set_Pass_cullMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cullMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCullMode(((CullMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: depthTestMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_depthTestMode
static int tolua_get_Pass_depthTestMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'depthTestMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetDepthTestMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: depthTestMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_depthTestMode
static int tolua_set_Pass_depthTestMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'depthTestMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDepthTestMode(((CompareMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lightingMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_lightingMode
static int tolua_get_Pass_lightingMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightingMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLightingMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lightingMode of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_lightingMode
static int tolua_set_Pass_lightingMode(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightingMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLightingMode(((PassLightingMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: depthWrite of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_depthWrite
static int tolua_get_Pass_depthWrite(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'depthWrite'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetDepthWrite());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: depthWrite of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_depthWrite
static int tolua_set_Pass_depthWrite(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'depthWrite'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDepthWrite(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: alphaToCoverage of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_alphaToCoverage
static int tolua_get_Pass_alphaToCoverage(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'alphaToCoverage'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetAlphaToCoverage());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: alphaToCoverage of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_alphaToCoverage
static int tolua_set_Pass_alphaToCoverage(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'alphaToCoverage'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAlphaToCoverage(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: desktop of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_desktop
static int tolua_get_Pass_desktop(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'desktop'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsDesktop());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_vertexShader
static int tolua_get_Pass_vertexShader(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShader'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetVertexShader());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_vertexShader
static int tolua_set_Pass_vertexShader(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShader'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetVertexShader(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pixelShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_pixelShader
static int tolua_get_Pass_pixelShader(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShader'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetPixelShader());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pixelShader of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_pixelShader
static int tolua_set_Pass_pixelShader(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShader'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPixelShader(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_vertexShaderDefines
static int tolua_get_Pass_vertexShaderDefines(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefines'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetVertexShaderDefines());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_vertexShaderDefines
static int tolua_set_Pass_vertexShaderDefines(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefines'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetVertexShaderDefines(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pixelShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_pixelShaderDefines
static int tolua_get_Pass_pixelShaderDefines(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefines'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetPixelShaderDefines());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pixelShaderDefines of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_pixelShaderDefines
static int tolua_set_Pass_pixelShaderDefines(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefines'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPixelShaderDefines(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_vertexShaderDefineExcludes
static int tolua_get_Pass_vertexShaderDefineExcludes(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefineExcludes'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetVertexShaderDefineExcludes());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: vertexShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_vertexShaderDefineExcludes
static int tolua_set_Pass_vertexShaderDefineExcludes(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexShaderDefineExcludes'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetVertexShaderDefineExcludes(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: pixelShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_get_Pass_pixelShaderDefineExcludes
static int tolua_get_Pass_pixelShaderDefineExcludes(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefineExcludes'",NULL);
#endif
 tolua_pushurho3dstring(tolua_S,(const char*)self->GetPixelShaderDefineExcludes());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: pixelShaderDefineExcludes of class  Pass */
#ifndef TOLUA_DISABLE_tolua_set_Pass_pixelShaderDefineExcludes
static int tolua_set_Pass_pixelShaderDefineExcludes(lua_State* tolua_S)
{
  Pass* self = (Pass*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'pixelShaderDefineExcludes'",NULL);
 if (!tolua_isurho3dstring(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPixelShaderDefineExcludes(((String)  tolua_tourho3dstring(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetIsDesktop of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_SetIsDesktop00
static int tolua_GraphicsLuaAPI_Technique_SetIsDesktop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Technique",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetIsDesktop'", NULL);
#endif
 {
  self->SetIsDesktop(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetIsDesktop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: CreatePass of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_CreatePass00
static int tolua_GraphicsLuaAPI_Technique_CreatePass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Technique",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
  const String passName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'CreatePass'", NULL);
#endif
 {
  Pass* tolua_ret = (Pass*)  self->CreatePass(passName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Pass");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'CreatePass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: RemovePass of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_RemovePass00
static int tolua_GraphicsLuaAPI_Technique_RemovePass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Technique",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
  const String passName = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'RemovePass'", NULL);
#endif
 {
  self->RemovePass(passName);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'RemovePass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ReleaseShaders of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_ReleaseShaders00
static int tolua_GraphicsLuaAPI_Technique_ReleaseShaders00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ReleaseShaders'", NULL);
#endif
 {
  self->ReleaseShaders();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ReleaseShaders'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: TechniqueClone of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_Clone00
static int tolua_GraphicsLuaAPI_Technique_Clone00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
  const String cloneName = ((const String)  tolua_tourho3dstring(tolua_S,2,String::EMPTY));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TechniqueClone'", NULL);
#endif
 {
  tolua_outside Technique* tolua_ret = (tolua_outside Technique*)  TechniqueClone(self,cloneName);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Technique");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'Clone'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: HasPass of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_HasPass00
static int tolua_GraphicsLuaAPI_Technique_HasPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
  const String type = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HasPass'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->HasPass(type);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HasPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPass of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_GetPass00
static int tolua_GraphicsLuaAPI_Technique_GetPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
  const String type = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPass'", NULL);
#endif
 {
  Pass* tolua_ret = (Pass*)  self->GetPass(type);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Pass");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSupportedPass of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_GetSupportedPass00
static int tolua_GraphicsLuaAPI_Technique_GetSupportedPass00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isurho3dstring(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
  const String type = ((const String)  tolua_tourho3dstring(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSupportedPass'", NULL);
#endif
 {
  Pass* tolua_ret = (Pass*)  self->GetSupportedPass(type);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Pass");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSupportedPass'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsSupported of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_IsSupported00
static int tolua_GraphicsLuaAPI_Technique_IsSupported00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsSupported'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsSupported();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsSupported'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsDesktop of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_IsDesktop00
static int tolua_GraphicsLuaAPI_Technique_IsDesktop00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsDesktop'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsDesktop();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsDesktop'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumPasses of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_GetNumPasses00
static int tolua_GraphicsLuaAPI_Technique_GetNumPasses00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumPasses'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetNumPasses();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumPasses'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: TechniqueGetPassNames of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_GetPassTypes00
static int tolua_GraphicsLuaAPI_Technique_GetPassTypes00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TechniqueGetPassNames'", NULL);
#endif
 {
  tolua_outside  const Vector<String>& tolua_ret = (tolua_outside  const Vector<String>&)  TechniqueGetPassNames(self);
  ToluaPushVector<String>(tolua_S,(void*)&tolua_ret,"String");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPassTypes'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: TechniqueGetPasses of class  Technique */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Technique_GetPasses00
static int tolua_GraphicsLuaAPI_Technique_GetPasses00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Technique",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Technique* self = (const Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TechniqueGetPasses'", NULL);
#endif
 {
  tolua_outside  const PODVector<Pass*>& tolua_ret = (tolua_outside  const PODVector<Pass*>&)  TechniqueGetPasses(self);
  ToluaPushPODVector<Pass*>("",tolua_S,(void*)&tolua_ret,"Pass");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPasses'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: supported of class  Technique */
#ifndef TOLUA_DISABLE_tolua_get_Technique_supported
static int tolua_get_Technique_supported(lua_State* tolua_S)
{
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'supported'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsSupported());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: desktop of class  Technique */
#ifndef TOLUA_DISABLE_tolua_get_Technique_desktop
static int tolua_get_Technique_desktop(lua_State* tolua_S)
{
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'desktop'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsDesktop());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numPasses of class  Technique */
#ifndef TOLUA_DISABLE_tolua_get_Technique_numPasses
static int tolua_get_Technique_numPasses(lua_State* tolua_S)
{
  Technique* self = (Technique*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numPasses'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetNumPasses());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPatchSize of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetPatchSize00
static int tolua_GraphicsLuaAPI_Terrain_SetPatchSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  int size = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPatchSize'", NULL);
#endif
 {
  self->SetPatchSize(size);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPatchSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSpacing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetSpacing00
static int tolua_GraphicsLuaAPI_Terrain_SetSpacing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* spacing = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSpacing'", NULL);
#endif
 {
  self->SetSpacing(*spacing);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSpacing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxLodLevels of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetMaxLodLevels00
static int tolua_GraphicsLuaAPI_Terrain_SetMaxLodLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned levels = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxLodLevels'", NULL);
#endif
 {
  self->SetMaxLodLevels(levels);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxLodLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOcclusionLodLevel of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetOcclusionLodLevel00
static int tolua_GraphicsLuaAPI_Terrain_SetOcclusionLodLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned level = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOcclusionLodLevel'", NULL);
#endif
 {
  self->SetOcclusionLodLevel(level);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOcclusionLodLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSmoothing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetSmoothing00
static int tolua_GraphicsLuaAPI_Terrain_SetSmoothing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSmoothing'", NULL);
#endif
 {
  self->SetSmoothing(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSmoothing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetHeightMap of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetHeightMap00
static int tolua_GraphicsLuaAPI_Terrain_SetHeightMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Image",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Image* image = ((Image*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetHeightMap'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetHeightMap(image);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetHeightMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetMaterial00
static int tolua_GraphicsLuaAPI_Terrain_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNorthNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetNorthNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_SetNorthNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Terrain* north = ((Terrain*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNorthNeighbor'", NULL);
#endif
 {
  self->SetNorthNeighbor(north);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNorthNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSouthNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetSouthNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_SetSouthNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Terrain* south = ((Terrain*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSouthNeighbor'", NULL);
#endif
 {
  self->SetSouthNeighbor(south);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSouthNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetWestNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetWestNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_SetWestNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Terrain* west = ((Terrain*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetWestNeighbor'", NULL);
#endif
 {
  self->SetWestNeighbor(west);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetWestNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetEastNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetEastNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_SetEastNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Terrain* east = ((Terrain*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetEastNeighbor'", NULL);
#endif
 {
  self->SetEastNeighbor(east);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetEastNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNeighbors of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetNeighbors00
static int tolua_GraphicsLuaAPI_Terrain_SetNeighbors00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"Terrain",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  Terrain* north = ((Terrain*)  tolua_tousertype(tolua_S,2,0));
  Terrain* south = ((Terrain*)  tolua_tousertype(tolua_S,3,0));
  Terrain* west = ((Terrain*)  tolua_tousertype(tolua_S,4,0));
  Terrain* east = ((Terrain*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNeighbors'", NULL);
#endif
 {
  self->SetNeighbors(north,south,west,east);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNeighbors'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDrawDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetDrawDistance00
static int tolua_GraphicsLuaAPI_Terrain_SetDrawDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDrawDistance'", NULL);
#endif
 {
  self->SetDrawDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDrawDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetShadowDistance00
static int tolua_GraphicsLuaAPI_Terrain_SetShadowDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  float distance = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowDistance'", NULL);
#endif
 {
  self->SetShadowDistance(distance);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLodBias of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetLodBias00
static int tolua_GraphicsLuaAPI_Terrain_SetLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  float bias = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLodBias'", NULL);
#endif
 {
  self->SetLodBias(bias);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetViewMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetViewMask00
static int tolua_GraphicsLuaAPI_Terrain_SetViewMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetViewMask'", NULL);
#endif
 {
  self->SetViewMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetViewMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLightMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetLightMask00
static int tolua_GraphicsLuaAPI_Terrain_SetLightMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLightMask'", NULL);
#endif
 {
  self->SetLightMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLightMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetShadowMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetShadowMask00
static int tolua_GraphicsLuaAPI_Terrain_SetShadowMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetShadowMask'", NULL);
#endif
 {
  self->SetShadowMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetShadowMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetZoneMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetZoneMask00
static int tolua_GraphicsLuaAPI_Terrain_SetZoneMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned mask = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetZoneMask'", NULL);
#endif
 {
  self->SetZoneMask(mask);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetZoneMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaxLights of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetMaxLights00
static int tolua_GraphicsLuaAPI_Terrain_SetMaxLights00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned num = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaxLights'", NULL);
#endif
 {
  self->SetMaxLights(num);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaxLights'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCastShadows of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetCastShadows00
static int tolua_GraphicsLuaAPI_Terrain_SetCastShadows00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCastShadows'", NULL);
#endif
 {
  self->SetCastShadows(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCastShadows'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOccluder of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetOccluder00
static int tolua_GraphicsLuaAPI_Terrain_SetOccluder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOccluder'", NULL);
#endif
 {
  self->SetOccluder(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOccluder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOccludee of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_SetOccludee00
static int tolua_GraphicsLuaAPI_Terrain_SetOccludee00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOccludee'", NULL);
#endif
 {
  self->SetOccludee(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOccludee'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ApplyHeightMap of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_ApplyHeightMap00
static int tolua_GraphicsLuaAPI_Terrain_ApplyHeightMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ApplyHeightMap'", NULL);
#endif
 {
  self->ApplyHeightMap();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ApplyHeightMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPatchSize of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetPatchSize00
static int tolua_GraphicsLuaAPI_Terrain_GetPatchSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPatchSize'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetPatchSize();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPatchSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSpacing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetSpacing00
static int tolua_GraphicsLuaAPI_Terrain_GetSpacing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSpacing'", NULL);
#endif
 {
  const Vector3& tolua_ret = (const Vector3&)  self->GetSpacing();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Vector3");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSpacing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumVertices of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetNumVertices00
static int tolua_GraphicsLuaAPI_Terrain_GetNumVertices00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumVertices'", NULL);
#endif
 {
  const IntVector2& tolua_ret = (const IntVector2&)  self->GetNumVertices();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const IntVector2");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumVertices'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNumPatches of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetNumPatches00
static int tolua_GraphicsLuaAPI_Terrain_GetNumPatches00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNumPatches'", NULL);
#endif
 {
  const IntVector2& tolua_ret = (const IntVector2&)  self->GetNumPatches();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const IntVector2");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNumPatches'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxLodLevels of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetMaxLodLevels00
static int tolua_GraphicsLuaAPI_Terrain_GetMaxLodLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxLodLevels'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMaxLodLevels();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxLodLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOcclusionLodLevel of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetOcclusionLodLevel00
static int tolua_GraphicsLuaAPI_Terrain_GetOcclusionLodLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOcclusionLodLevel'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetOcclusionLodLevel();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOcclusionLodLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSmoothing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetSmoothing00
static int tolua_GraphicsLuaAPI_Terrain_GetSmoothing00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSmoothing'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSmoothing();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSmoothing'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeightMap of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetHeightMap00
static int tolua_GraphicsLuaAPI_Terrain_GetHeightMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeightMap'", NULL);
#endif
 {
  Image* tolua_ret = (Image*)  self->GetHeightMap();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Image");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeightMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaterial of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetMaterial00
static int tolua_GraphicsLuaAPI_Terrain_GetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaterial'", NULL);
#endif
 {
  Material* tolua_ret = (Material*)  self->GetMaterial();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Material");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNorthNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetNorthNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_GetNorthNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNorthNeighbor'", NULL);
#endif
 {
  Terrain* tolua_ret = (Terrain*)  self->GetNorthNeighbor();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Terrain");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNorthNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSouthNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetSouthNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_GetSouthNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSouthNeighbor'", NULL);
#endif
 {
  Terrain* tolua_ret = (Terrain*)  self->GetSouthNeighbor();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Terrain");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSouthNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWestNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetWestNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_GetWestNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWestNeighbor'", NULL);
#endif
 {
  Terrain* tolua_ret = (Terrain*)  self->GetWestNeighbor();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Terrain");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWestNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEastNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetEastNeighbor00
static int tolua_GraphicsLuaAPI_Terrain_GetEastNeighbor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEastNeighbor'", NULL);
#endif
 {
  Terrain* tolua_ret = (Terrain*)  self->GetEastNeighbor();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Terrain");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEastNeighbor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPatch of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetPatch00
static int tolua_GraphicsLuaAPI_Terrain_GetPatch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  unsigned index = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetPatch(index);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPatch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPatch of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetPatch01
static int tolua_GraphicsLuaAPI_Terrain_GetPatch01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int z = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetPatch(x,z);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Terrain_GetPatch00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNeighborPatch of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetNeighborPatch00
static int tolua_GraphicsLuaAPI_Terrain_GetNeighborPatch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int z = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNeighborPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetNeighborPatch(x,z);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNeighborPatch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeight of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetHeight00
static int tolua_GraphicsLuaAPI_Terrain_GetHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPosition = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetHeight(*worldPosition);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNormal of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetNormal00
static int tolua_GraphicsLuaAPI_Terrain_GetNormal00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPosition = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNormal'", NULL);
#endif
 {
  Vector3 tolua_ret = (Vector3)  self->GetNormal(*worldPosition);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector3)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector3));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNormal'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WorldToHeightMap of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_WorldToHeightMap00
static int tolua_GraphicsLuaAPI_Terrain_WorldToHeightMap00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPosition = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WorldToHeightMap'", NULL);
#endif
 {
  IntVector2 tolua_ret = (IntVector2)  self->WorldToHeightMap(*worldPosition);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((IntVector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WorldToHeightMap'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: HeightMapToWorld of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_HeightMapToWorld00
static int tolua_GraphicsLuaAPI_Terrain_HeightMapToWorld00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const IntVector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
  const IntVector2* pixelPosition = ((const IntVector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'HeightMapToWorld'", NULL);
#endif
 {
  Vector3 tolua_ret = (Vector3)  self->HeightMapToWorld(*pixelPosition);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector3)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector3));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'HeightMapToWorld'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeightData of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetHeightData00
static int tolua_GraphicsLuaAPI_Terrain_GetHeightData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeightData'", NULL);
#endif
 {
  SharedArrayPtr<float> tolua_ret = (SharedArrayPtr<float>)  self->GetHeightData();
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((SharedArrayPtr<float>)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"SharedArrayPtr<float>");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(SharedArrayPtr<float>));
  tolua_pushusertype(tolua_S,tolua_obj,"SharedArrayPtr<float>");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeightData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDrawDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetDrawDistance00
static int tolua_GraphicsLuaAPI_Terrain_GetDrawDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDrawDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetDrawDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDrawDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetShadowDistance00
static int tolua_GraphicsLuaAPI_Terrain_GetShadowDistance00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowDistance'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetShadowDistance();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowDistance'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLodBias of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetLodBias00
static int tolua_GraphicsLuaAPI_Terrain_GetLodBias00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLodBias'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetLodBias();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLodBias'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetViewMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetViewMask00
static int tolua_GraphicsLuaAPI_Terrain_GetViewMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetViewMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetViewMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetViewMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLightMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetLightMask00
static int tolua_GraphicsLuaAPI_Terrain_GetLightMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLightMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetLightMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLightMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetShadowMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetShadowMask00
static int tolua_GraphicsLuaAPI_Terrain_GetShadowMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetShadowMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetShadowMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetShadowMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetZoneMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetZoneMask00
static int tolua_GraphicsLuaAPI_Terrain_GetZoneMask00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetZoneMask'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetZoneMask();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetZoneMask'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxLights of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetMaxLights00
static int tolua_GraphicsLuaAPI_Terrain_GetMaxLights00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxLights'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetMaxLights();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxLights'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsVisible of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_IsVisible00
static int tolua_GraphicsLuaAPI_Terrain_IsVisible00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsVisible'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsVisible();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsVisible'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCastShadows of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_GetCastShadows00
static int tolua_GraphicsLuaAPI_Terrain_GetCastShadows00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCastShadows'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetCastShadows();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCastShadows'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOccluder of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_IsOccluder00
static int tolua_GraphicsLuaAPI_Terrain_IsOccluder00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOccluder'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsOccluder();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOccluder'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsOccludee of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Terrain_IsOccludee00
static int tolua_GraphicsLuaAPI_Terrain_IsOccludee00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Terrain* self = (const Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsOccludee'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsOccludee();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsOccludee'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: patchSize of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_patchSize
static int tolua_get_Terrain_patchSize(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'patchSize'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetPatchSize());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: patchSize of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_patchSize
static int tolua_set_Terrain_patchSize(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'patchSize'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPatchSize(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: spacing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_spacing_ref
static int tolua_get_Terrain_spacing_ref(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'spacing'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetSpacing(),"Vector3");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: spacing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_spacing_ref
static int tolua_set_Terrain_spacing_ref(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'spacing'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Vector3",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSpacing((*(Vector3*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numVertices of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_numVertices_ref
static int tolua_get_Terrain_numVertices_ref(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numVertices'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetNumVertices(),"IntVector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: numPatches of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_numPatches_ref
static int tolua_get_Terrain_numPatches_ref(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'numPatches'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetNumPatches(),"IntVector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxLodLevels of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_maxLodLevels
static int tolua_get_Terrain_maxLodLevels(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLodLevels'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxLodLevels());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxLodLevels of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_maxLodLevels
static int tolua_set_Terrain_maxLodLevels(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLodLevels'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxLodLevels(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occlusionLodLevel of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_occlusionLodLevel
static int tolua_get_Terrain_occlusionLodLevel(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionLodLevel'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetOcclusionLodLevel());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occlusionLodLevel of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_occlusionLodLevel
static int tolua_set_Terrain_occlusionLodLevel(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionLodLevel'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOcclusionLodLevel(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: smoothing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_smoothing
static int tolua_get_Terrain_smoothing(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'smoothing'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSmoothing());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: smoothing of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_smoothing
static int tolua_set_Terrain_smoothing(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'smoothing'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSmoothing(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: heightMap of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_heightMap_ptr
static int tolua_get_Terrain_heightMap_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'heightMap'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetHeightMap(),"Image");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: heightMap of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_heightMap_ptr
static int tolua_set_Terrain_heightMap_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'heightMap'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Image",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetHeightMap(((Image*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: material of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_material_ptr
static int tolua_get_Terrain_material_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaterial(),"Material");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: material of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_material_ptr
static int tolua_set_Terrain_material_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'material'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Material",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaterial(((Material*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: northNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_northNeighbor_ptr
static int tolua_get_Terrain_northNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'northNeighbor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetNorthNeighbor(),"Terrain");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: northNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_northNeighbor_ptr
static int tolua_set_Terrain_northNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'northNeighbor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetNorthNeighbor(((Terrain*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: southNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_southNeighbor_ptr
static int tolua_get_Terrain_southNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'southNeighbor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetSouthNeighbor(),"Terrain");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: southNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_southNeighbor_ptr
static int tolua_set_Terrain_southNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'southNeighbor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSouthNeighbor(((Terrain*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: westNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_westNeighbor_ptr
static int tolua_get_Terrain_westNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'westNeighbor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetWestNeighbor(),"Terrain");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: westNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_westNeighbor_ptr
static int tolua_set_Terrain_westNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'westNeighbor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetWestNeighbor(((Terrain*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: eastNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_eastNeighbor_ptr
static int tolua_get_Terrain_eastNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'eastNeighbor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetEastNeighbor(),"Terrain");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: eastNeighbor of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_eastNeighbor_ptr
static int tolua_set_Terrain_eastNeighbor_ptr(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'eastNeighbor'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetEastNeighbor(((Terrain*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_drawDistance
static int tolua_get_Terrain_drawDistance(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetDrawDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: drawDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_drawDistance
static int tolua_set_Terrain_drawDistance(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDrawDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_shadowDistance
static int tolua_get_Terrain_shadowDistance(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowDistance'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowDistance());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowDistance of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_shadowDistance
static int tolua_set_Terrain_shadowDistance(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowDistance'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowDistance(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lodBias of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_lodBias
static int tolua_get_Terrain_lodBias(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodBias'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLodBias());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lodBias of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_lodBias
static int tolua_set_Terrain_lodBias(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodBias'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLodBias(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: viewMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_viewMask
static int tolua_get_Terrain_viewMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetViewMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: viewMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_viewMask
static int tolua_set_Terrain_viewMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'viewMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetViewMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lightMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_lightMask
static int tolua_get_Terrain_lightMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLightMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: lightMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_lightMask
static int tolua_set_Terrain_lightMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lightMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLightMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: shadowMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_shadowMask
static int tolua_get_Terrain_shadowMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetShadowMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: shadowMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_shadowMask
static int tolua_set_Terrain_shadowMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'shadowMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetShadowMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: zoneMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_zoneMask
static int tolua_get_Terrain_zoneMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoneMask'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetZoneMask());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: zoneMask of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_zoneMask
static int tolua_set_Terrain_zoneMask(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoneMask'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetZoneMask(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxLights of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_maxLights
static int tolua_get_Terrain_maxLights(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLights'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMaxLights());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: maxLights of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_maxLights
static int tolua_set_Terrain_maxLights(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLights'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetMaxLights(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: visible of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_visible
static int tolua_get_Terrain_visible(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'visible'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsVisible());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: castShadows of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_castShadows
static int tolua_get_Terrain_castShadows(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'castShadows'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetCastShadows());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: castShadows of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_castShadows
static int tolua_set_Terrain_castShadows(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'castShadows'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCastShadows(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occluder of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_occluder
static int tolua_get_Terrain_occluder(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occluder'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsOccluder());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occluder of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_occluder
static int tolua_set_Terrain_occluder(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occluder'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOccluder(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occludee of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_get_Terrain_occludee
static int tolua_get_Terrain_occludee(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occludee'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsOccludee());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: occludee of class  Terrain */
#ifndef TOLUA_DISABLE_tolua_set_Terrain_occludee
static int tolua_set_Terrain_occludee(lua_State* tolua_S)
{
  Terrain* self = (Terrain*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occludee'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOccludee(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOwner of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_SetOwner00
static int tolua_GraphicsLuaAPI_TerrainPatch_SetOwner00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TerrainPatch",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
  Terrain* terrain = ((Terrain*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOwner'", NULL);
#endif
 {
  self->SetOwner(terrain);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOwner'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNeighbors of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_SetNeighbors00
static int tolua_GraphicsLuaAPI_TerrainPatch_SetNeighbors00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TerrainPatch",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"TerrainPatch",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"TerrainPatch",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"TerrainPatch",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,5,"TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
  TerrainPatch* north = ((TerrainPatch*)  tolua_tousertype(tolua_S,2,0));
  TerrainPatch* south = ((TerrainPatch*)  tolua_tousertype(tolua_S,3,0));
  TerrainPatch* west = ((TerrainPatch*)  tolua_tousertype(tolua_S,4,0));
  TerrainPatch* east = ((TerrainPatch*)  tolua_tousertype(tolua_S,5,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNeighbors'", NULL);
#endif
 {
  self->SetNeighbors(north,south,west,east);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNeighbors'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMaterial of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_SetMaterial00
static int tolua_GraphicsLuaAPI_TerrainPatch_SetMaterial00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TerrainPatch",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Material",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
  Material* material = ((Material*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMaterial'", NULL);
#endif
 {
  self->SetMaterial(material);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMaterial'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBoundingBox of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_SetBoundingBox00
static int tolua_GraphicsLuaAPI_TerrainPatch_SetBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TerrainPatch",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBoundingBox'", NULL);
#endif
 {
  self->SetBoundingBox(*box);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCoordinates of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_SetCoordinates00
static int tolua_GraphicsLuaAPI_TerrainPatch_SetCoordinates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TerrainPatch",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const IntVector2",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
  const IntVector2* coordinates = ((const IntVector2*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCoordinates'", NULL);
#endif
 {
  self->SetCoordinates(*coordinates);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCoordinates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ResetLod of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_ResetLod00
static int tolua_GraphicsLuaAPI_TerrainPatch_ResetLod00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ResetLod'", NULL);
#endif
 {
  self->ResetLod();
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ResetLod'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetGeometry of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetGeometry00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetGeometry'", NULL);
#endif
 {
  Geometry* tolua_ret = (Geometry*)  self->GetGeometry();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Geometry");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMaxLodGeometry of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetMaxLodGeometry00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetMaxLodGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMaxLodGeometry'", NULL);
#endif
 {
  Geometry* tolua_ret = (Geometry*)  self->GetMaxLodGeometry();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Geometry");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMaxLodGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOcclusionGeometry of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetOcclusionGeometry00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetOcclusionGeometry00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOcclusionGeometry'", NULL);
#endif
 {
  Geometry* tolua_ret = (Geometry*)  self->GetOcclusionGeometry();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Geometry");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOcclusionGeometry'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetVertexBuffer of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetVertexBuffer00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetVertexBuffer00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetVertexBuffer'", NULL);
#endif
 {
  VertexBuffer* tolua_ret = (VertexBuffer*)  self->GetVertexBuffer();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"VertexBuffer");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetVertexBuffer'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOwner of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetOwner00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetOwner00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOwner'", NULL);
#endif
 {
  Terrain* tolua_ret = (Terrain*)  self->GetOwner();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Terrain");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOwner'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetNorthPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetNorthPatch00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetNorthPatch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetNorthPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetNorthPatch();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetNorthPatch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSouthPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetSouthPatch00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetSouthPatch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSouthPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetSouthPatch();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSouthPatch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWestPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetWestPatch00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetWestPatch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWestPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetWestPatch();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWestPatch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetEastPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetEastPatch00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetEastPatch00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetEastPatch'", NULL);
#endif
 {
  TerrainPatch* tolua_ret = (TerrainPatch*)  self->GetEastPatch();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TerrainPatch");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetEastPatch'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCoordinates of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetCoordinates00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetCoordinates00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCoordinates'", NULL);
#endif
 {
  const IntVector2& tolua_ret = (const IntVector2&)  self->GetCoordinates();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const IntVector2");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCoordinates'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLodLevel of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TerrainPatch_GetLodLevel00
static int tolua_GraphicsLuaAPI_TerrainPatch_GetLodLevel00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TerrainPatch",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TerrainPatch* self = (const TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLodLevel'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetLodLevel();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLodLevel'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: geometry of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_geometry_ptr
static int tolua_get_TerrainPatch_geometry_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'geometry'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetGeometry(),"Geometry");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: maxLodGeometry of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_maxLodGeometry_ptr
static int tolua_get_TerrainPatch_maxLodGeometry_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'maxLodGeometry'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetMaxLodGeometry(),"Geometry");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: occlusionGeometry of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_occlusionGeometry_ptr
static int tolua_get_TerrainPatch_occlusionGeometry_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'occlusionGeometry'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetOcclusionGeometry(),"Geometry");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: vertexBuffer of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_vertexBuffer_ptr
static int tolua_get_TerrainPatch_vertexBuffer_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'vertexBuffer'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetVertexBuffer(),"VertexBuffer");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: owner of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_owner_ptr
static int tolua_get_TerrainPatch_owner_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'owner'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetOwner(),"Terrain");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: owner of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_set_TerrainPatch_owner_ptr
static int tolua_set_TerrainPatch_owner_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'owner'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Terrain",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOwner(((Terrain*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: northPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_northPatch_ptr
static int tolua_get_TerrainPatch_northPatch_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'northPatch'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetNorthPatch(),"TerrainPatch");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: southPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_southPatch_ptr
static int tolua_get_TerrainPatch_southPatch_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'southPatch'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetSouthPatch(),"TerrainPatch");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: westPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_westPatch_ptr
static int tolua_get_TerrainPatch_westPatch_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'westPatch'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetWestPatch(),"TerrainPatch");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: eastPatch of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_eastPatch_ptr
static int tolua_get_TerrainPatch_eastPatch_ptr(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'eastPatch'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetEastPatch(),"TerrainPatch");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: boundingBox of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_boundingBox_ref
static int tolua_get_TerrainPatch_boundingBox_ref(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetBoundingBox(),"BoundingBox");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: boundingBox of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_set_TerrainPatch_boundingBox_ref
static int tolua_set_TerrainPatch_boundingBox_ref(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"BoundingBox",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBoundingBox((*(BoundingBox*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: coordinates of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_coordinates_ref
static int tolua_get_TerrainPatch_coordinates_ref(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'coordinates'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetCoordinates(),"IntVector2");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: coordinates of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_set_TerrainPatch_coordinates_ref
static int tolua_set_TerrainPatch_coordinates_ref(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'coordinates'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"IntVector2",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCoordinates((*(IntVector2*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: lodLevel of class  TerrainPatch */
#ifndef TOLUA_DISABLE_tolua_get_TerrainPatch_lodLevel
static int tolua_get_TerrainPatch_lodLevel(lua_State* tolua_S)
{
  TerrainPatch* self = (TerrainPatch*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'lodLevel'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLodLevel());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetNumLevels of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetNumLevels00
static int tolua_GraphicsLuaAPI_Texture_SetNumLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  unsigned levels = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetNumLevels'", NULL);
#endif
 {
  self->SetNumLevels(levels);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetNumLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFilterMode of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetFilterMode00
static int tolua_GraphicsLuaAPI_Texture_SetFilterMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  TextureFilterMode filter = ((TextureFilterMode) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFilterMode'", NULL);
#endif
 {
  self->SetFilterMode(filter);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFilterMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAddressMode of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetAddressMode00
static int tolua_GraphicsLuaAPI_Texture_SetAddressMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  TextureCoordinate coord = ((TextureCoordinate) (int)  tolua_tonumber(tolua_S,2,0));
  TextureAddressMode address = ((TextureAddressMode) (int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAddressMode'", NULL);
#endif
 {
  self->SetAddressMode(coord,address);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAddressMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAnisotropy of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetAnisotropy00
static int tolua_GraphicsLuaAPI_Texture_SetAnisotropy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  unsigned level = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAnisotropy'", NULL);
#endif
 {
  self->SetAnisotropy(level);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAnisotropy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBorderColor of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetBorderColor00
static int tolua_GraphicsLuaAPI_Texture_SetBorderColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBorderColor'", NULL);
#endif
 {
  self->SetBorderColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBorderColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSRGB of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetSRGB00
static int tolua_GraphicsLuaAPI_Texture_SetSRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSRGB'", NULL);
#endif
 {
  self->SetSRGB(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBackupTexture of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetBackupTexture00
static int tolua_GraphicsLuaAPI_Texture_SetBackupTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  Texture* texture = ((Texture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBackupTexture'", NULL);
#endif
 {
  self->SetBackupTexture(texture);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBackupTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetMipsToSkip of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_SetMipsToSkip00
static int tolua_GraphicsLuaAPI_Texture_SetMipsToSkip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
  MaterialQuality quality = ((MaterialQuality) (int)  tolua_tonumber(tolua_S,2,0));
  int toSkip = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetMipsToSkip'", NULL);
#endif
 {
  self->SetMipsToSkip(quality,toSkip);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetMipsToSkip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFormat of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetFormat00
static int tolua_GraphicsLuaAPI_Texture_GetFormat00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFormat'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetFormat();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFormat'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsCompressed of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_IsCompressed00
static int tolua_GraphicsLuaAPI_Texture_IsCompressed00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsCompressed'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsCompressed();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsCompressed'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLevels of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetLevels00
static int tolua_GraphicsLuaAPI_Texture_GetLevels00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLevels'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetLevels();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLevels'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetWidth of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetWidth00
static int tolua_GraphicsLuaAPI_Texture_GetWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetWidth'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetWidth();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeight of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetHeight00
static int tolua_GraphicsLuaAPI_Texture_GetHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeight'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFilterMode of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetFilterMode00
static int tolua_GraphicsLuaAPI_Texture_GetFilterMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFilterMode'", NULL);
#endif
 {
  TextureFilterMode tolua_ret = (TextureFilterMode)  self->GetFilterMode();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFilterMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAddressMode of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetAddressMode00
static int tolua_GraphicsLuaAPI_Texture_GetAddressMode00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
  TextureCoordinate coord = ((TextureCoordinate) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAddressMode'", NULL);
#endif
 {
  TextureAddressMode tolua_ret = (TextureAddressMode)  self->GetAddressMode(coord);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAddressMode'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAnisotropy of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetAnisotropy00
static int tolua_GraphicsLuaAPI_Texture_GetAnisotropy00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAnisotropy'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetAnisotropy();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAnisotropy'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBorderColor of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetBorderColor00
static int tolua_GraphicsLuaAPI_Texture_GetBorderColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBorderColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetBorderColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBorderColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetSRGB of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetSRGB00
static int tolua_GraphicsLuaAPI_Texture_GetSRGB00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetSRGB'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetSRGB();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetSRGB'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMultiSample of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetMultiSample00
static int tolua_GraphicsLuaAPI_Texture_GetMultiSample00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMultiSample'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMultiSample();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMultiSample'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAutoResolve of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetAutoResolve00
static int tolua_GraphicsLuaAPI_Texture_GetAutoResolve00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAutoResolve'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetAutoResolve();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAutoResolve'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsResolveDirty of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_IsResolveDirty00
static int tolua_GraphicsLuaAPI_Texture_IsResolveDirty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsResolveDirty'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsResolveDirty();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsResolveDirty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLevelsDirty of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetLevelsDirty00
static int tolua_GraphicsLuaAPI_Texture_GetLevelsDirty00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLevelsDirty'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetLevelsDirty();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLevelsDirty'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetBackupTexture of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetBackupTexture00
static int tolua_GraphicsLuaAPI_Texture_GetBackupTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetBackupTexture'", NULL);
#endif
 {
  Texture* tolua_ret = (Texture*)  self->GetBackupTexture();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetBackupTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetMipsToSkip of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetMipsToSkip00
static int tolua_GraphicsLuaAPI_Texture_GetMipsToSkip00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
  MaterialQuality quality = ((MaterialQuality) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetMipsToSkip'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetMipsToSkip(quality);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetMipsToSkip'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLevelWidth of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetLevelWidth00
static int tolua_GraphicsLuaAPI_Texture_GetLevelWidth00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
  unsigned level = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLevelWidth'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetLevelWidth(level);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLevelWidth'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLevelHeight of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetLevelHeight00
static int tolua_GraphicsLuaAPI_Texture_GetLevelHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
  unsigned level = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLevelHeight'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetLevelHeight(level);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLevelHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetUsage of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetUsage00
static int tolua_GraphicsLuaAPI_Texture_GetUsage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetUsage'", NULL);
#endif
 {
  TextureUsage tolua_ret = (TextureUsage)  self->GetUsage();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetUsage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDataSize of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetDataSize00
static int tolua_GraphicsLuaAPI_Texture_GetDataSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDataSize'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetDataSize(width,height);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDataSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRowDataSize of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetRowDataSize00
static int tolua_GraphicsLuaAPI_Texture_GetRowDataSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRowDataSize'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetRowDataSize(width);
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRowDataSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetComponents of class  Texture */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture_GetComponents00
static int tolua_GraphicsLuaAPI_Texture_GetComponents00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture* self = (const Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetComponents'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetComponents();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetComponents'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: format of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_format
static int tolua_get_Texture_format(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'format'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFormat());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: compressed of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_compressed
static int tolua_get_Texture_compressed(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'compressed'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsCompressed());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: levels of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_levels
static int tolua_get_Texture_levels(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'levels'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLevels());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: width of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_width
static int tolua_get_Texture_width(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'width'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetWidth());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: height of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_height
static int tolua_get_Texture_height(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'height'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetHeight());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: components of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_components
static int tolua_get_Texture_components(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'components'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetComponents());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: filterMode of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_filterMode
static int tolua_get_Texture_filterMode(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'filterMode'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFilterMode());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: filterMode of class  Texture */
#ifndef TOLUA_DISABLE_tolua_set_Texture_filterMode
static int tolua_set_Texture_filterMode(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'filterMode'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFilterMode(((TextureFilterMode) (int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: anisotropy of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_anisotropy
static int tolua_get_Texture_anisotropy(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'anisotropy'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetAnisotropy());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: anisotropy of class  Texture */
#ifndef TOLUA_DISABLE_tolua_set_Texture_anisotropy
static int tolua_set_Texture_anisotropy(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'anisotropy'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAnisotropy(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: borderColor of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_borderColor_ref
static int tolua_get_Texture_borderColor_ref(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'borderColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetBorderColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: borderColor of class  Texture */
#ifndef TOLUA_DISABLE_tolua_set_Texture_borderColor_ref
static int tolua_set_Texture_borderColor_ref(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'borderColor'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBorderColor((*(Color*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: sRGB of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_sRGB
static int tolua_get_Texture_sRGB(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGB'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetSRGB());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: sRGB of class  Texture */
#ifndef TOLUA_DISABLE_tolua_set_Texture_sRGB
static int tolua_set_Texture_sRGB(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'sRGB'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetSRGB(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: multiSample of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_multiSample
static int tolua_get_Texture_multiSample(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'multiSample'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetMultiSample());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: autoResolve of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_autoResolve
static int tolua_get_Texture_autoResolve(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'autoResolve'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetAutoResolve());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: resolveDirty of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_resolveDirty
static int tolua_get_Texture_resolveDirty(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'resolveDirty'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->IsResolveDirty());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: levelsDirty of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_levelsDirty
static int tolua_get_Texture_levelsDirty(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'levelsDirty'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetLevelsDirty());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: backupTexture of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_backupTexture_ptr
static int tolua_get_Texture_backupTexture_ptr(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'backupTexture'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetBackupTexture(),"Texture");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: backupTexture of class  Texture */
#ifndef TOLUA_DISABLE_tolua_set_Texture_backupTexture_ptr
static int tolua_set_Texture_backupTexture_ptr(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'backupTexture'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBackupTexture(((Texture*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: usage of class  Texture */
#ifndef TOLUA_DISABLE_tolua_get_Texture_usage
static int tolua_get_Texture_usage(lua_State* tolua_S)
{
  Texture* self = (Texture*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'usage'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetUsage());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_new00
static int tolua_GraphicsLuaAPI_Texture2D_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Texture2D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Texture2D* tolua_ret = (Texture2D*)  Mtolua_new((Texture2D)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture2D");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_new00_local
static int tolua_GraphicsLuaAPI_Texture2D_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Texture2D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Texture2D* tolua_ret = (Texture2D*)  Mtolua_new((Texture2D)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture2D");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_delete00
static int tolua_GraphicsLuaAPI_Texture2D_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2D* self = (Texture2D*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_SetSize00
static int tolua_GraphicsLuaAPI_Texture2D_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isboolean(tolua_S,7,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,8,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2D* self = (Texture2D*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
  unsigned format = ((unsigned)  tolua_tonumber(tolua_S,4,0));
  TextureUsage usage = ((TextureUsage) (int)  tolua_tonumber(tolua_S,5,TEXTURE_STATIC));
  int multiSample = ((int)  tolua_tonumber(tolua_S,6,1));
  bool autoResolve = ((bool)  tolua_toboolean(tolua_S,7,true));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(width,height,format,usage,multiSample,autoResolve);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetData of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_SetData00
static int tolua_GraphicsLuaAPI_Texture2D_SetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Image",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2D* self = (Texture2D*)  tolua_tousertype(tolua_S,1,0);
  Image* image = ((Image*)  tolua_tousertype(tolua_S,2,0));
  bool useAlpha = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetData'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetData(image,useAlpha);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: Texture2DGetImage of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_GetImage00
static int tolua_GraphicsLuaAPI_Texture2D_GetImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture2D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture2D* self = (const Texture2D*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'Texture2DGetImage'", NULL);
#endif
 {
  tolua_outside Image* tolua_ret = (tolua_outside Image*)  Texture2DGetImage(self);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Image");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRenderSurface of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2D_GetRenderSurface00
static int tolua_GraphicsLuaAPI_Texture2D_GetRenderSurface00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture2D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture2D* self = (const Texture2D*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRenderSurface'", NULL);
#endif
 {
  RenderSurface* tolua_ret = (RenderSurface*)  self->GetRenderSurface();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRenderSurface'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: renderSurface of class  Texture2D */
#ifndef TOLUA_DISABLE_tolua_get_Texture2D_renderSurface_ptr
static int tolua_get_Texture2D_renderSurface_ptr(lua_State* tolua_S)
{
  Texture2D* self = (Texture2D*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'renderSurface'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetRenderSurface(),"RenderSurface");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_new00
static int tolua_GraphicsLuaAPI_Texture2DArray_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Texture2DArray",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Texture2DArray* tolua_ret = (Texture2DArray*)  Mtolua_new((Texture2DArray)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture2DArray");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_new00_local
static int tolua_GraphicsLuaAPI_Texture2DArray_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Texture2DArray",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Texture2DArray* tolua_ret = (Texture2DArray*)  Mtolua_new((Texture2DArray)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture2DArray");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_delete00
static int tolua_GraphicsLuaAPI_Texture2DArray_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2DArray",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetLayers of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_SetLayers00
static int tolua_GraphicsLuaAPI_Texture2DArray_SetLayers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2DArray",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
  unsigned layers = ((unsigned)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetLayers'", NULL);
#endif
 {
  self->SetLayers(layers);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetLayers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_SetSize00
static int tolua_GraphicsLuaAPI_Texture2DArray_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2DArray",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
  unsigned layers = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  int width = ((int)  tolua_tonumber(tolua_S,3,0));
  int height = ((int)  tolua_tonumber(tolua_S,4,0));
  unsigned format = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  TextureUsage usage = ((TextureUsage) (int)  tolua_tonumber(tolua_S,6,TEXTURE_STATIC));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(layers,width,height,format,usage);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetData of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_SetData00
static int tolua_GraphicsLuaAPI_Texture2DArray_SetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture2DArray",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Image",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
  unsigned layer = ((unsigned)  tolua_tonumber(tolua_S,2,0));
  Image* image = ((Image*)  tolua_tousertype(tolua_S,3,0));
  bool useAlpha = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetData'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetData(layer,image,useAlpha);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetLayers of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_GetLayers00
static int tolua_GraphicsLuaAPI_Texture2DArray_GetLayers00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture2DArray",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture2DArray* self = (const Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetLayers'", NULL);
#endif
 {
  unsigned tolua_ret = (unsigned)  self->GetLayers();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetLayers'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRenderSurface of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture2DArray_GetRenderSurface00
static int tolua_GraphicsLuaAPI_Texture2DArray_GetRenderSurface00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Texture2DArray",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Texture2DArray* self = (const Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRenderSurface'", NULL);
#endif
 {
  RenderSurface* tolua_ret = (RenderSurface*)  self->GetRenderSurface();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRenderSurface'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: layers of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_get_Texture2DArray_layers
static int tolua_get_Texture2DArray_layers(lua_State* tolua_S)
{
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'layers'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetLayers());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: layers of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_set_Texture2DArray_layers
static int tolua_set_Texture2DArray_layers(lua_State* tolua_S)
{
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'layers'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetLayers(((unsigned)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: renderSurface of class  Texture2DArray */
#ifndef TOLUA_DISABLE_tolua_get_Texture2DArray_renderSurface_ptr
static int tolua_get_Texture2DArray_renderSurface_ptr(lua_State* tolua_S)
{
  Texture2DArray* self = (Texture2DArray*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'renderSurface'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetRenderSurface(),"RenderSurface");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Texture3D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_new00
static int tolua_GraphicsLuaAPI_Texture3D_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Texture3D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Texture3D* tolua_ret = (Texture3D*)  Mtolua_new((Texture3D)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture3D");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Texture3D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_new00_local
static int tolua_GraphicsLuaAPI_Texture3D_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Texture3D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Texture3D* tolua_ret = (Texture3D*)  Mtolua_new((Texture3D)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture3D");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Texture3D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_delete00
static int tolua_GraphicsLuaAPI_Texture3D_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture3D",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture3D* self = (Texture3D*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  Texture3D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_SetSize00
static int tolua_GraphicsLuaAPI_Texture3D_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture3D",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,6,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,7,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture3D* self = (Texture3D*)  tolua_tousertype(tolua_S,1,0);
  int width = ((int)  tolua_tonumber(tolua_S,2,0));
  int height = ((int)  tolua_tonumber(tolua_S,3,0));
  int depth = ((int)  tolua_tonumber(tolua_S,4,0));
  unsigned format = ((unsigned)  tolua_tonumber(tolua_S,5,0));
  TextureUsage usage = ((TextureUsage) (int)  tolua_tonumber(tolua_S,6,TEXTURE_STATIC));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(width,height,depth,format,usage);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetData of class  Texture3D */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Texture3D_SetData00
static int tolua_GraphicsLuaAPI_Texture3D_SetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Texture3D",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Image",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,3,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Texture3D* self = (Texture3D*)  tolua_tousertype(tolua_S,1,0);
  Image* image = ((Image*)  tolua_tousertype(tolua_S,2,0));
  bool useAlpha = ((bool)  tolua_toboolean(tolua_S,3,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetData'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetData(image,useAlpha);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_new00
static int tolua_GraphicsLuaAPI_TextureCube_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"TextureCube",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  TextureCube* tolua_ret = (TextureCube*)  Mtolua_new((TextureCube)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TextureCube");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_new00_local
static int tolua_GraphicsLuaAPI_TextureCube_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"TextureCube",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  TextureCube* tolua_ret = (TextureCube*)  Mtolua_new((TextureCube)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"TextureCube");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_delete00
static int tolua_GraphicsLuaAPI_TextureCube_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TextureCube",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TextureCube* self = (TextureCube*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetSize of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_SetSize00
static int tolua_GraphicsLuaAPI_TextureCube_SetSize00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TextureCube",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,1,&tolua_err) ||
 !tolua_isnumber(tolua_S,5,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TextureCube* self = (TextureCube*)  tolua_tousertype(tolua_S,1,0);
  int size = ((int)  tolua_tonumber(tolua_S,2,0));
  unsigned format = ((unsigned)  tolua_tonumber(tolua_S,3,0));
  TextureUsage usage = ((TextureUsage) (int)  tolua_tonumber(tolua_S,4,TEXTURE_STATIC));
  int multiSample = ((int)  tolua_tonumber(tolua_S,5,1));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetSize'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetSize(size,format,usage,multiSample);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetSize'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetData of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_SetData00
static int tolua_GraphicsLuaAPI_TextureCube_SetData00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"TextureCube",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Image",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,4,1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  TextureCube* self = (TextureCube*)  tolua_tousertype(tolua_S,1,0);
  CubeMapFace face = ((CubeMapFace) (int)  tolua_tonumber(tolua_S,2,0));
  Image* image = ((Image*)  tolua_tousertype(tolua_S,3,0));
  bool useAlpha = ((bool)  tolua_toboolean(tolua_S,4,false));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetData'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->SetData(face,image,useAlpha);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetData'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: TextureCubeGetImage of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_GetImage00
static int tolua_GraphicsLuaAPI_TextureCube_GetImage00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TextureCube",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TextureCube* self = (const TextureCube*)  tolua_tousertype(tolua_S,1,0);
  CubeMapFace face = ((CubeMapFace) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'TextureCubeGetImage'", NULL);
#endif
 {
  tolua_outside Image* tolua_ret = (tolua_outside Image*)  TextureCubeGetImage(self,face);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Image");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetImage'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRenderSurface of class  TextureCube */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_TextureCube_GetRenderSurface00
static int tolua_GraphicsLuaAPI_TextureCube_GetRenderSurface00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const TextureCube",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const TextureCube* self = (const TextureCube*)  tolua_tousertype(tolua_S,1,0);
  CubeMapFace face = ((CubeMapFace) (int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRenderSurface'", NULL);
#endif
 {
  RenderSurface* tolua_ret = (RenderSurface*)  self->GetRenderSurface(face);
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderSurface");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRenderSurface'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new00
static int tolua_GraphicsLuaAPI_Viewport_new00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new00_local
static int tolua_GraphicsLuaAPI_Viewport_new00_local(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)());
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'new'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new01
static int tolua_GraphicsLuaAPI_Viewport_new01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,4,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(scene,camera,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new01_local
static int tolua_GraphicsLuaAPI_Viewport_new01_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,4,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,4,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(scene,camera,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new00_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new02
static int tolua_GraphicsLuaAPI_Viewport_new02(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const IntRect",0,&tolua_err)) ||
 !tolua_isusertype(tolua_S,5,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  const IntRect* rect = ((const IntRect*)  tolua_tousertype(tolua_S,4,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,5,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(scene,camera,*rect,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new01(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: new_local of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_new02_local
static int tolua_GraphicsLuaAPI_Viewport_new02_local(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertable(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,3,"Camera",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,4,&tolua_err) || !tolua_isusertype(tolua_S,4,"const IntRect",0,&tolua_err)) ||
 !tolua_isusertype(tolua_S,5,"RenderPath",1,&tolua_err) ||
 !tolua_isnoobj(tolua_S,6,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,3,0));
  const IntRect* rect = ((const IntRect*)  tolua_tousertype(tolua_S,4,0));
  RenderPath* renderPath = ((RenderPath*)  tolua_tousertype(tolua_S,5,0));
 {
  Viewport* tolua_ret = (Viewport*)  Mtolua_new((Viewport)(scene,camera,*rect,renderPath));
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Viewport");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
 }
 }
 return 1;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_new01_local(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: delete of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_delete00
static int tolua_GraphicsLuaAPI_Viewport_delete00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", NULL);
#endif
 Mtolua_delete(self);
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetScene of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetScene00
static int tolua_GraphicsLuaAPI_Viewport_SetScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  Scene* scene = ((Scene*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetScene'", NULL);
#endif
 {
  self->SetScene(scene);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCamera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetCamera00
static int tolua_GraphicsLuaAPI_Viewport_SetCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCamera'", NULL);
#endif
 {
  self->SetCamera(camera);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetCullCamera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetCullCamera00
static int tolua_GraphicsLuaAPI_Viewport_SetCullCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Camera",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  Camera* camera = ((Camera*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetCullCamera'", NULL);
#endif
 {
  self->SetCullCamera(camera);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetCullCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRect of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetRect00
static int tolua_GraphicsLuaAPI_Viewport_SetRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const IntRect",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  const IntRect* rect = ((const IntRect*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRect'", NULL);
#endif
 {
  self->SetRect(*rect);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRenderPath of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetRenderPath00
static int tolua_GraphicsLuaAPI_Viewport_SetRenderPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"RenderPath",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  RenderPath* path = ((RenderPath*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRenderPath'", NULL);
#endif
 {
  self->SetRenderPath(path);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetRenderPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetRenderPath of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetRenderPath01
static int tolua_GraphicsLuaAPI_Viewport_SetRenderPath01(lua_State* tolua_S)
{
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"XMLFile",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  XMLFile* file = ((XMLFile*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetRenderPath'", NULL);
#endif
 {
  self->SetRenderPath(file);
 }
 }
 return 0;
tolua_lerror:
 return tolua_GraphicsLuaAPI_Viewport_SetRenderPath00(tolua_S);
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetDrawDebug of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_SetDrawDebug00
static int tolua_GraphicsLuaAPI_Viewport_SetDrawDebug00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Viewport",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetDrawDebug'", NULL);
#endif
 {
  self->SetDrawDebug(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetDrawDebug'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetScene of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetScene00
static int tolua_GraphicsLuaAPI_Viewport_GetScene00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetScene'", NULL);
#endif
 {
  Scene* tolua_ret = (Scene*)  self->GetScene();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Scene");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetScene'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCamera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetCamera00
static int tolua_GraphicsLuaAPI_Viewport_GetCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCamera'", NULL);
#endif
 {
  Camera* tolua_ret = (Camera*)  self->GetCamera();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Camera");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetCullCamera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetCullCamera00
static int tolua_GraphicsLuaAPI_Viewport_GetCullCamera00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetCullCamera'", NULL);
#endif
 {
  Camera* tolua_ret = (Camera*)  self->GetCullCamera();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Camera");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetCullCamera'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRect of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetRect00
static int tolua_GraphicsLuaAPI_Viewport_GetRect00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRect'", NULL);
#endif
 {
  const IntRect& tolua_ret = (const IntRect&)  self->GetRect();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const IntRect");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRect'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetRenderPath of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetRenderPath00
static int tolua_GraphicsLuaAPI_Viewport_GetRenderPath00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetRenderPath'", NULL);
#endif
 {
  RenderPath* tolua_ret = (RenderPath*)  self->GetRenderPath();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"RenderPath");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetRenderPath'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetDrawDebug of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetDrawDebug00
static int tolua_GraphicsLuaAPI_Viewport_GetDrawDebug00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetDrawDebug'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetDrawDebug();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetDrawDebug'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetScreenRay of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_GetScreenRay00
static int tolua_GraphicsLuaAPI_Viewport_GetScreenRay00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,4,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetScreenRay'", NULL);
#endif
 {
  Ray tolua_ret = (Ray)  self->GetScreenRay(x,y);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Ray)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Ray");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Ray));
  tolua_pushusertype(tolua_S,tolua_obj,"Ray");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetScreenRay'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: WorldToScreenPoint of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_WorldToScreenPoint00
static int tolua_GraphicsLuaAPI_Viewport_WorldToScreenPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* worldPos = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'WorldToScreenPoint'", NULL);
#endif
 {
  IntVector2 tolua_ret = (IntVector2)  self->WorldToScreenPoint(*worldPos);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((IntVector2)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(IntVector2));
  tolua_pushusertype(tolua_S,tolua_obj,"IntVector2");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'WorldToScreenPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: ScreenToWorldPoint of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Viewport_ScreenToWorldPoint00
static int tolua_GraphicsLuaAPI_Viewport_ScreenToWorldPoint00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Viewport",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,3,0,&tolua_err) ||
 !tolua_isnumber(tolua_S,4,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,5,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Viewport* self = (const Viewport*)  tolua_tousertype(tolua_S,1,0);
  int x = ((int)  tolua_tonumber(tolua_S,2,0));
  int y = ((int)  tolua_tonumber(tolua_S,3,0));
  float depth = ((float)  tolua_tonumber(tolua_S,4,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'ScreenToWorldPoint'", NULL);
#endif
 {
  Vector3 tolua_ret = (Vector3)  self->ScreenToWorldPoint(x,y,depth);
 {
#ifdef __cplusplus
 void* tolua_obj = Mtolua_new((Vector3)(tolua_ret));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#else
 void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(Vector3));
  tolua_pushusertype(tolua_S,tolua_obj,"Vector3");
 tolua_register_gc(tolua_S,lua_gettop(tolua_S));
#endif
 }
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'ScreenToWorldPoint'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: scene of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_get_Viewport_scene_ptr
static int tolua_get_Viewport_scene_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scene'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetScene(),"Scene");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: scene of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_set_Viewport_scene_ptr
static int tolua_set_Viewport_scene_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'scene'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetScene(((Scene*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: camera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_get_Viewport_camera_ptr
static int tolua_get_Viewport_camera_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'camera'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetCamera(),"Camera");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: camera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_set_Viewport_camera_ptr
static int tolua_set_Viewport_camera_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'camera'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Camera",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCamera(((Camera*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: cullCamera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_get_Viewport_cullCamera_ptr
static int tolua_get_Viewport_cullCamera_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cullCamera'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetCullCamera(),"Camera");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: cullCamera of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_set_Viewport_cullCamera_ptr
static int tolua_set_Viewport_cullCamera_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'cullCamera'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Camera",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetCullCamera(((Camera*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: rect of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_get_Viewport_rect_ref
static int tolua_get_Viewport_rect_ref(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rect'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetRect(),"IntRect");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: rect of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_set_Viewport_rect_ref
static int tolua_set_Viewport_rect_ref(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'rect'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"IntRect",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRect((*(IntRect*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: renderPath of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_get_Viewport_renderPath_ptr
static int tolua_get_Viewport_renderPath_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'renderPath'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetRenderPath(),"RenderPath");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: renderPath of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_set_Viewport_renderPath_ptr
static int tolua_set_Viewport_renderPath_ptr(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'renderPath'",NULL);
 if (!tolua_isusertype(tolua_S,2,"RenderPath",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetRenderPath(((RenderPath*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: drawDebug of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_get_Viewport_drawDebug
static int tolua_get_Viewport_drawDebug(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawDebug'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetDrawDebug());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: drawDebug of class  Viewport */
#ifndef TOLUA_DISABLE_tolua_set_Viewport_drawDebug
static int tolua_set_Viewport_drawDebug(lua_State* tolua_S)
{
  Viewport* self = (Viewport*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'drawDebug'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetDrawDebug(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetBoundingBox of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetBoundingBox00
static int tolua_GraphicsLuaAPI_Zone_SetBoundingBox00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const BoundingBox",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  const BoundingBox* box = ((const BoundingBox*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetBoundingBox'", NULL);
#endif
 {
  self->SetBoundingBox(*box);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetBoundingBox'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAmbientColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetAmbientColor00
static int tolua_GraphicsLuaAPI_Zone_SetAmbientColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAmbientColor'", NULL);
#endif
 {
  self->SetAmbientColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAmbientColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFogColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetFogColor00
static int tolua_GraphicsLuaAPI_Zone_SetFogColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Color",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  const Color* color = ((const Color*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFogColor'", NULL);
#endif
 {
  self->SetFogColor(*color);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFogColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFogStart of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetFogStart00
static int tolua_GraphicsLuaAPI_Zone_SetFogStart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  float start = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFogStart'", NULL);
#endif
 {
  self->SetFogStart(start);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFogStart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFogEnd of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetFogEnd00
static int tolua_GraphicsLuaAPI_Zone_SetFogEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  float end = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFogEnd'", NULL);
#endif
 {
  self->SetFogEnd(end);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFogEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFogHeight of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetFogHeight00
static int tolua_GraphicsLuaAPI_Zone_SetFogHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  float height = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFogHeight'", NULL);
#endif
 {
  self->SetFogHeight(height);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFogHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetFogHeightScale of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetFogHeightScale00
static int tolua_GraphicsLuaAPI_Zone_SetFogHeightScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  float scale = ((float)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetFogHeightScale'", NULL);
#endif
 {
  self->SetFogHeightScale(scale);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetFogHeightScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetPriority of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetPriority00
static int tolua_GraphicsLuaAPI_Zone_SetPriority00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnumber(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  int priority = ((int)  tolua_tonumber(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetPriority'", NULL);
#endif
 {
  self->SetPriority(priority);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetPriority'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetHeightFog of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetHeightFog00
static int tolua_GraphicsLuaAPI_Zone_SetHeightFog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetHeightFog'", NULL);
#endif
 {
  self->SetHeightFog(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetHeightFog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetOverride of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetOverride00
static int tolua_GraphicsLuaAPI_Zone_SetOverride00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetOverride'", NULL);
#endif
 {
  self->SetOverride(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetOverride'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetAmbientGradient of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetAmbientGradient00
static int tolua_GraphicsLuaAPI_Zone_SetAmbientGradient00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isboolean(tolua_S,2,0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  bool enable = ((bool)  tolua_toboolean(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetAmbientGradient'", NULL);
#endif
 {
  self->SetAmbientGradient(enable);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetAmbientGradient'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: SetZoneTexture of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_SetZoneTexture00
static int tolua_GraphicsLuaAPI_Zone_SetZoneTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
  Texture* texture = ((Texture*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'SetZoneTexture'", NULL);
#endif
 {
  self->SetZoneTexture(texture);
 }
 }
 return 0;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'SetZoneTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetInverseWorldTransform of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetInverseWorldTransform00
static int tolua_GraphicsLuaAPI_Zone_GetInverseWorldTransform00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetInverseWorldTransform'", NULL);
#endif
 {
  const Matrix3x4& tolua_ret = (const Matrix3x4&)  self->GetInverseWorldTransform();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Matrix3x4");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetInverseWorldTransform'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAmbientColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetAmbientColor00
static int tolua_GraphicsLuaAPI_Zone_GetAmbientColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAmbientColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetAmbientColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAmbientColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAmbientStartColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetAmbientStartColor00
static int tolua_GraphicsLuaAPI_Zone_GetAmbientStartColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAmbientStartColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetAmbientStartColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAmbientStartColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAmbientEndColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetAmbientEndColor00
static int tolua_GraphicsLuaAPI_Zone_GetAmbientEndColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAmbientEndColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetAmbientEndColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAmbientEndColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFogColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetFogColor00
static int tolua_GraphicsLuaAPI_Zone_GetFogColor00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFogColor'", NULL);
#endif
 {
  const Color& tolua_ret = (const Color&)  self->GetFogColor();
  tolua_pushusertype(tolua_S,(void*)&tolua_ret,"const Color");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFogColor'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFogStart of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetFogStart00
static int tolua_GraphicsLuaAPI_Zone_GetFogStart00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFogStart'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFogStart();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFogStart'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFogEnd of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetFogEnd00
static int tolua_GraphicsLuaAPI_Zone_GetFogEnd00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFogEnd'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFogEnd();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFogEnd'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFogHeight of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetFogHeight00
static int tolua_GraphicsLuaAPI_Zone_GetFogHeight00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFogHeight'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFogHeight();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFogHeight'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetFogHeightScale of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetFogHeightScale00
static int tolua_GraphicsLuaAPI_Zone_GetFogHeightScale00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetFogHeightScale'", NULL);
#endif
 {
  float tolua_ret = (float)  self->GetFogHeightScale();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetFogHeightScale'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetPriority of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetPriority00
static int tolua_GraphicsLuaAPI_Zone_GetPriority00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetPriority'", NULL);
#endif
 {
  int tolua_ret = (int)  self->GetPriority();
 tolua_pushnumber(tolua_S,(lua_Number)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetPriority'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetHeightFog of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetHeightFog00
static int tolua_GraphicsLuaAPI_Zone_GetHeightFog00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetHeightFog'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetHeightFog();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetHeightFog'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetOverride of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetOverride00
static int tolua_GraphicsLuaAPI_Zone_GetOverride00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetOverride'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetOverride();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetOverride'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetAmbientGradient of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetAmbientGradient00
static int tolua_GraphicsLuaAPI_Zone_GetAmbientGradient00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetAmbientGradient'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->GetAmbientGradient();
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetAmbientGradient'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: GetZoneTexture of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_GetZoneTexture00
static int tolua_GraphicsLuaAPI_Zone_GetZoneTexture00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 !tolua_isnoobj(tolua_S,2,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'GetZoneTexture'", NULL);
#endif
 {
  Texture* tolua_ret = (Texture*)  self->GetZoneTexture();
  tolua_pushusertype(tolua_S,(void*)tolua_ret,"Texture");
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'GetZoneTexture'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* method: IsInside of class  Zone */
#ifndef TOLUA_DISABLE_tolua_GraphicsLuaAPI_Zone_IsInside00
static int tolua_GraphicsLuaAPI_Zone_IsInside00(lua_State* tolua_S)
{
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (
 !tolua_isusertype(tolua_S,1,"const Zone",0,&tolua_err) ||
 (tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"const Vector3",0,&tolua_err)) ||
 !tolua_isnoobj(tolua_S,3,&tolua_err)
 )
 goto tolua_lerror;
 else
#endif
 {
  const Zone* self = (const Zone*)  tolua_tousertype(tolua_S,1,0);
  const Vector3* point = ((const Vector3*)  tolua_tousertype(tolua_S,2,0));
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in function 'IsInside'", NULL);
#endif
 {
  bool tolua_ret = (bool)  self->IsInside(*point);
 tolua_pushboolean(tolua_S,(bool)tolua_ret);
 }
 }
 return 1;
#ifndef TOLUA_RELEASE
 tolua_lerror:
 tolua_error(tolua_S,"#ferror in function 'IsInside'.",&tolua_err);
 return 0;
#endif
}
#endif //#ifndef TOLUA_DISABLE

/* get function: boundingBox of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_boundingBox_ref
static int tolua_get_Zone_boundingBox_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetBoundingBox(),"BoundingBox");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: boundingBox of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_boundingBox_ref
static int tolua_set_Zone_boundingBox_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'boundingBox'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"BoundingBox",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetBoundingBox((*(BoundingBox*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: inverseWorldTransform of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_inverseWorldTransform_ref
static int tolua_get_Zone_inverseWorldTransform_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'inverseWorldTransform'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetInverseWorldTransform(),"Matrix3x4");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ambientColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_ambientColor_ref
static int tolua_get_Zone_ambientColor_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ambientColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetAmbientColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ambientColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_ambientColor_ref
static int tolua_set_Zone_ambientColor_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ambientColor'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAmbientColor((*(Color*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ambientStartColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_ambientStartColor_ref
static int tolua_get_Zone_ambientStartColor_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ambientStartColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetAmbientStartColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ambientEndColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_ambientEndColor_ref
static int tolua_get_Zone_ambientEndColor_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ambientEndColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetAmbientEndColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fogColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_fogColor_ref
static int tolua_get_Zone_fogColor_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogColor'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)&self->GetFogColor(),"Color");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fogColor of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_fogColor_ref
static int tolua_set_Zone_fogColor_ref(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogColor'",NULL);
 if ((tolua_isvaluenil(tolua_S,2,&tolua_err) || !tolua_isusertype(tolua_S,2,"Color",0,&tolua_err)))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFogColor((*(Color*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fogStart of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_fogStart
static int tolua_get_Zone_fogStart(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogStart'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFogStart());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fogStart of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_fogStart
static int tolua_set_Zone_fogStart(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogStart'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFogStart(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fogEnd of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_fogEnd
static int tolua_get_Zone_fogEnd(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogEnd'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFogEnd());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fogEnd of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_fogEnd
static int tolua_set_Zone_fogEnd(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogEnd'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFogEnd(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fogHeight of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_fogHeight
static int tolua_get_Zone_fogHeight(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogHeight'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFogHeight());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fogHeight of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_fogHeight
static int tolua_set_Zone_fogHeight(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogHeight'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFogHeight(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: fogHeightScale of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_fogHeightScale
static int tolua_get_Zone_fogHeightScale(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogHeightScale'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetFogHeightScale());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: fogHeightScale of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_fogHeightScale
static int tolua_set_Zone_fogHeightScale(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'fogHeightScale'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetFogHeightScale(((float)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: priority of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_priority
static int tolua_get_Zone_priority(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'priority'",NULL);
#endif
 tolua_pushnumber(tolua_S,(lua_Number)self->GetPriority());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: priority of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_priority
static int tolua_set_Zone_priority(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'priority'",NULL);
 if (!tolua_isnumber(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetPriority(((int)  tolua_tonumber(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: heightFog of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_heightFog
static int tolua_get_Zone_heightFog(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'heightFog'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetHeightFog());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: heightFog of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_heightFog
static int tolua_set_Zone_heightFog(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'heightFog'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetHeightFog(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: override of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_override
static int tolua_get_Zone_override(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'override'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetOverride());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: override of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_override
static int tolua_set_Zone_override(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'override'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetOverride(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: ambientGradient of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_ambientGradient
static int tolua_get_Zone_ambientGradient(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ambientGradient'",NULL);
#endif
 tolua_pushboolean(tolua_S,(bool)self->GetAmbientGradient());
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: ambientGradient of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_ambientGradient
static int tolua_set_Zone_ambientGradient(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'ambientGradient'",NULL);
 if (!tolua_isboolean(tolua_S,2,0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetAmbientGradient(((bool)  tolua_toboolean(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* get function: zoneTexture of class  Zone */
#ifndef TOLUA_DISABLE_tolua_get_Zone_zoneTexture_ptr
static int tolua_get_Zone_zoneTexture_ptr(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoneTexture'",NULL);
#endif
  tolua_pushusertype(tolua_S,(void*)self->GetZoneTexture(),"Texture");
 return 1;
}
#endif //#ifndef TOLUA_DISABLE

/* set function: zoneTexture of class  Zone */
#ifndef TOLUA_DISABLE_tolua_set_Zone_zoneTexture_ptr
static int tolua_set_Zone_zoneTexture_ptr(lua_State* tolua_S)
{
  Zone* self = (Zone*)  tolua_tousertype(tolua_S,1,0);
#ifndef TOLUA_RELEASE
 tolua_Error tolua_err;
 if (!self) tolua_error(tolua_S,"invalid 'self' in accessing variable 'zoneTexture'",NULL);
 if (!tolua_isusertype(tolua_S,2,"Texture",0,&tolua_err))
 tolua_error(tolua_S,"#vinvalid type in variable assignment.",&tolua_err);
#endif
  self->SetZoneTexture(((Texture*)  tolua_tousertype(tolua_S,2,0))
)
;
 return 0;
}
#endif //#ifndef TOLUA_DISABLE

/* Open function */
TOLUA_API int tolua_GraphicsLuaAPI_open (lua_State* tolua_S)
{
 tolua_open(tolua_S);
 tolua_reg_types(tolua_S);
 tolua_module(tolua_S,NULL,1);
 tolua_beginmodule(tolua_S,NULL);
 tolua_constant(tolua_S,"TRIANGLE_LIST",TRIANGLE_LIST);
 tolua_constant(tolua_S,"LINE_LIST",LINE_LIST);
 tolua_constant(tolua_S,"POINT_LIST",POINT_LIST);
 tolua_constant(tolua_S,"TRIANGLE_STRIP",TRIANGLE_STRIP);
 tolua_constant(tolua_S,"LINE_STRIP",LINE_STRIP);
 tolua_constant(tolua_S,"TRIANGLE_FAN",TRIANGLE_FAN);
 tolua_constant(tolua_S,"GEOM_STATIC",GEOM_STATIC);
 tolua_constant(tolua_S,"GEOM_SKINNED",GEOM_SKINNED);
 tolua_constant(tolua_S,"GEOM_INSTANCED",GEOM_INSTANCED);
 tolua_constant(tolua_S,"GEOM_BILLBOARD",GEOM_BILLBOARD);
 tolua_constant(tolua_S,"GEOM_STATIC_NOINSTANCING",GEOM_STATIC_NOINSTANCING);
 tolua_constant(tolua_S,"MAX_GEOMETRYTYPES",MAX_GEOMETRYTYPES);
 tolua_constant(tolua_S,"BLEND_REPLACE",BLEND_REPLACE);
 tolua_constant(tolua_S,"BLEND_ADD",BLEND_ADD);
 tolua_constant(tolua_S,"BLEND_MULTIPLY",BLEND_MULTIPLY);
 tolua_constant(tolua_S,"BLEND_ALPHA",BLEND_ALPHA);
 tolua_constant(tolua_S,"BLEND_ADDALPHA",BLEND_ADDALPHA);
 tolua_constant(tolua_S,"BLEND_PREMULALPHA",BLEND_PREMULALPHA);
 tolua_constant(tolua_S,"BLEND_INVDESTALPHA",BLEND_INVDESTALPHA);
 tolua_constant(tolua_S,"BLEND_SUBTRACT",BLEND_SUBTRACT);
 tolua_constant(tolua_S,"BLEND_SUBTRACTALPHA",BLEND_SUBTRACTALPHA);
 tolua_constant(tolua_S,"MAX_BLENDMODES",MAX_BLENDMODES);
 tolua_constant(tolua_S,"CMP_ALWAYS",CMP_ALWAYS);
 tolua_constant(tolua_S,"CMP_EQUAL",CMP_EQUAL);
 tolua_constant(tolua_S,"CMP_NOTEQUAL",CMP_NOTEQUAL);
 tolua_constant(tolua_S,"CMP_LESS",CMP_LESS);
 tolua_constant(tolua_S,"CMP_LESSEQUAL",CMP_LESSEQUAL);
 tolua_constant(tolua_S,"CMP_GREATER",CMP_GREATER);
 tolua_constant(tolua_S,"CMP_GREATEREQUAL",CMP_GREATEREQUAL);
 tolua_constant(tolua_S,"MAX_COMPAREMODES",MAX_COMPAREMODES);
 tolua_constant(tolua_S,"CULL_NONE",CULL_NONE);
 tolua_constant(tolua_S,"CULL_CCW",CULL_CCW);
 tolua_constant(tolua_S,"CULL_CW",CULL_CW);
 tolua_constant(tolua_S,"MAX_CULLMODES",MAX_CULLMODES);
 tolua_constant(tolua_S,"FILL_SOLID",FILL_SOLID);
 tolua_constant(tolua_S,"FILL_WIREFRAME",FILL_WIREFRAME);
 tolua_constant(tolua_S,"FILL_POINT",FILL_POINT);
 tolua_constant(tolua_S,"OP_KEEP",OP_KEEP);
 tolua_constant(tolua_S,"OP_ZERO",OP_ZERO);
 tolua_constant(tolua_S,"OP_REF",OP_REF);
 tolua_constant(tolua_S,"OP_INCR",OP_INCR);
 tolua_constant(tolua_S,"OP_DECR",OP_DECR);
 tolua_constant(tolua_S,"LOCK_NONE",LOCK_NONE);
 tolua_constant(tolua_S,"LOCK_HARDWARE",LOCK_HARDWARE);
 tolua_constant(tolua_S,"LOCK_SHADOW",LOCK_SHADOW);
 tolua_constant(tolua_S,"LOCK_SCRATCH",LOCK_SCRATCH);
 tolua_constant(tolua_S,"ELEMENT_POSITION",ELEMENT_POSITION);
 tolua_constant(tolua_S,"ELEMENT_NORMAL",ELEMENT_NORMAL);
 tolua_constant(tolua_S,"ELEMENT_COLOR",ELEMENT_COLOR);
 tolua_constant(tolua_S,"ELEMENT_TEXCOORD1",ELEMENT_TEXCOORD1);
 tolua_constant(tolua_S,"ELEMENT_TEXCOORD2",ELEMENT_TEXCOORD2);
 tolua_constant(tolua_S,"ELEMENT_CUBETEXCOORD1",ELEMENT_CUBETEXCOORD1);
 tolua_constant(tolua_S,"ELEMENT_CUBETEXCOORD2",ELEMENT_CUBETEXCOORD2);
 tolua_constant(tolua_S,"ELEMENT_TANGENT",ELEMENT_TANGENT);
 tolua_constant(tolua_S,"ELEMENT_BLENDWEIGHTS",ELEMENT_BLENDWEIGHTS);
 tolua_constant(tolua_S,"ELEMENT_BLENDINDICES",ELEMENT_BLENDINDICES);
 tolua_constant(tolua_S,"ELEMENT_INSTANCEMATRIX1",ELEMENT_INSTANCEMATRIX1);
 tolua_constant(tolua_S,"ELEMENT_INSTANCEMATRIX2",ELEMENT_INSTANCEMATRIX2);
 tolua_constant(tolua_S,"ELEMENT_INSTANCEMATRIX3",ELEMENT_INSTANCEMATRIX3);
 tolua_constant(tolua_S,"ELEMENT_OBJECTINDEX",ELEMENT_OBJECTINDEX);
 tolua_constant(tolua_S,"MAX_LEGACY_VERTEX_ELEMENTS",MAX_LEGACY_VERTEX_ELEMENTS);
 tolua_constant(tolua_S,"TYPE_INT",TYPE_INT);
 tolua_constant(tolua_S,"TYPE_FLOAT",TYPE_FLOAT);
 tolua_constant(tolua_S,"TYPE_VECTOR2",TYPE_VECTOR2);
 tolua_constant(tolua_S,"TYPE_VECTOR3",TYPE_VECTOR3);
 tolua_constant(tolua_S,"TYPE_VECTOR4",TYPE_VECTOR4);
 tolua_constant(tolua_S,"TYPE_UBYTE4",TYPE_UBYTE4);
 tolua_constant(tolua_S,"TYPE_UBYTE4_NORM",TYPE_UBYTE4_NORM);
 tolua_constant(tolua_S,"MAX_VERTEX_ELEMENT_TYPES",MAX_VERTEX_ELEMENT_TYPES);
 tolua_constant(tolua_S,"SEM_POSITION",SEM_POSITION);
 tolua_constant(tolua_S,"SEM_NORMAL",SEM_NORMAL);
 tolua_constant(tolua_S,"SEM_BINORMAL",SEM_BINORMAL);
 tolua_constant(tolua_S,"SEM_TANGENT",SEM_TANGENT);
 tolua_constant(tolua_S,"SEM_TEXCOORD",SEM_TEXCOORD);
 tolua_constant(tolua_S,"SEM_COLOR",SEM_COLOR);
 tolua_constant(tolua_S,"SEM_BLENDWEIGHTS",SEM_BLENDWEIGHTS);
 tolua_constant(tolua_S,"SEM_BLENDINDICES",SEM_BLENDINDICES);
 tolua_constant(tolua_S,"SEM_OBJECTINDEX",SEM_OBJECTINDEX);
 tolua_constant(tolua_S,"MAX_VERTEX_ELEMENT_SEMANTICS",MAX_VERTEX_ELEMENT_SEMANTICS);
 tolua_constant(tolua_S,"FILTER_NEAREST",FILTER_NEAREST);
 tolua_constant(tolua_S,"FILTER_BILINEAR",FILTER_BILINEAR);
 tolua_constant(tolua_S,"FILTER_TRILINEAR",FILTER_TRILINEAR);
 tolua_constant(tolua_S,"FILTER_ANISOTROPIC",FILTER_ANISOTROPIC);
 tolua_constant(tolua_S,"FILTER_NEAREST_ANISOTROPIC",FILTER_NEAREST_ANISOTROPIC);
 tolua_constant(tolua_S,"FILTER_DEFAULT",FILTER_DEFAULT);
 tolua_constant(tolua_S,"MAX_FILTERMODES",MAX_FILTERMODES);
 tolua_constant(tolua_S,"ADDRESS_WRAP",ADDRESS_WRAP);
 tolua_constant(tolua_S,"ADDRESS_MIRROR",ADDRESS_MIRROR);
 tolua_constant(tolua_S,"ADDRESS_CLAMP",ADDRESS_CLAMP);
 tolua_constant(tolua_S,"ADDRESS_BORDER",ADDRESS_BORDER);
 tolua_constant(tolua_S,"MAX_ADDRESSMODES",MAX_ADDRESSMODES);
 tolua_constant(tolua_S,"COORD_U",COORD_U);
 tolua_constant(tolua_S,"COORD_V",COORD_V);
 tolua_constant(tolua_S,"COORD_W",COORD_W);
 tolua_constant(tolua_S,"MAX_COORDS",MAX_COORDS);
 tolua_constant(tolua_S,"TEXTURE_STATIC",TEXTURE_STATIC);
 tolua_constant(tolua_S,"TEXTURE_DYNAMIC",TEXTURE_DYNAMIC);
 tolua_constant(tolua_S,"TEXTURE_RENDERTARGET",TEXTURE_RENDERTARGET);
 tolua_constant(tolua_S,"TEXTURE_DEPTHSTENCIL",TEXTURE_DEPTHSTENCIL);
 tolua_constant(tolua_S,"FACE_POSITIVE_X",FACE_POSITIVE_X);
 tolua_constant(tolua_S,"FACE_NEGATIVE_X",FACE_NEGATIVE_X);
 tolua_constant(tolua_S,"FACE_POSITIVE_Y",FACE_POSITIVE_Y);
 tolua_constant(tolua_S,"FACE_NEGATIVE_Y",FACE_NEGATIVE_Y);
 tolua_constant(tolua_S,"FACE_POSITIVE_Z",FACE_POSITIVE_Z);
 tolua_constant(tolua_S,"FACE_NEGATIVE_Z",FACE_NEGATIVE_Z);
 tolua_constant(tolua_S,"MAX_CUBEMAP_FACES",MAX_CUBEMAP_FACES);
 tolua_constant(tolua_S,"SURFACE_MANUALUPDATE",SURFACE_MANUALUPDATE);
 tolua_constant(tolua_S,"SURFACE_UPDATEVISIBLE",SURFACE_UPDATEVISIBLE);
 tolua_constant(tolua_S,"SURFACE_UPDATEALWAYS",SURFACE_UPDATEALWAYS);
 tolua_constant(tolua_S,"VS",VS);
 tolua_constant(tolua_S,"PS",PS);
 tolua_constant(tolua_S,"TU_DIFFUSE",TU_DIFFUSE);
 tolua_constant(tolua_S,"TU_ALBEDOBUFFER",TU_ALBEDOBUFFER);
 tolua_constant(tolua_S,"TU_NORMAL",TU_NORMAL);
 tolua_constant(tolua_S,"TU_NORMALBUFFER",TU_NORMALBUFFER);
 tolua_constant(tolua_S,"TU_SPECULAR",TU_SPECULAR);
 tolua_constant(tolua_S,"TU_EMISSIVE",TU_EMISSIVE);
 tolua_constant(tolua_S,"TU_ENVIRONMENT",TU_ENVIRONMENT);
 tolua_constant(tolua_S,"FC_NONE",FC_NONE);
 tolua_constant(tolua_S,"FC_ROTATE_XYZ",FC_ROTATE_XYZ);
 tolua_constant(tolua_S,"FC_ROTATE_Y",FC_ROTATE_Y);
 tolua_constant(tolua_S,"FC_LOOKAT_XYZ",FC_LOOKAT_XYZ);
 tolua_constant(tolua_S,"FC_LOOKAT_Y",FC_LOOKAT_Y);
 tolua_constant(tolua_S,"FC_LOOKAT_MIXED",FC_LOOKAT_MIXED);
 tolua_constant(tolua_S,"FC_DIRECTION",FC_DIRECTION);
 tolua_constant(tolua_S,"SHADOWQUALITY_SIMPLE_16BIT",SHADOWQUALITY_SIMPLE_16BIT);
 tolua_constant(tolua_S,"SHADOWQUALITY_SIMPLE_24BIT",SHADOWQUALITY_SIMPLE_24BIT);
 tolua_constant(tolua_S,"SHADOWQUALITY_PCF_16BIT",SHADOWQUALITY_PCF_16BIT);
 tolua_constant(tolua_S,"SHADOWQUALITY_PCF_24BIT",SHADOWQUALITY_PCF_24BIT);
 tolua_constant(tolua_S,"SHADOWQUALITY_VSM",SHADOWQUALITY_VSM);
 tolua_constant(tolua_S,"SHADOWQUALITY_BLUR_VSM",SHADOWQUALITY_BLUR_VSM);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"VertexElement","VertexElement","",tolua_collect_VertexElement);
 #else
 tolua_cclass(tolua_S,"VertexElement","VertexElement","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"VertexElement");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_VertexElement_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_VertexElement_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_VertexElement_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_VertexElement_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_VertexElement_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_VertexElement_new01_local);
  tolua_variable(tolua_S,"type",tolua_get_VertexElement_type,tolua_set_VertexElement_type);
  tolua_variable(tolua_S,"semantic",tolua_get_VertexElement_semantic,tolua_set_VertexElement_semantic);
  tolua_variable(tolua_S,"index",tolua_get_VertexElement_unsigned_index,tolua_set_VertexElement_unsigned_index);
  tolua_variable(tolua_S,"perInstance",tolua_get_VertexElement_perInstance,tolua_set_VertexElement_perInstance);
  tolua_variable(tolua_S,"offset",tolua_get_VertexElement_offset,tolua_set_VertexElement_offset);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"QUALITY_LOW",QUALITY_LOW);
 tolua_constant(tolua_S,"QUALITY_MEDIUM",QUALITY_MEDIUM);
 tolua_constant(tolua_S,"QUALITY_HIGH",QUALITY_HIGH);
 tolua_constant(tolua_S,"QUALITY_MAX",QUALITY_MAX);
 tolua_constant(tolua_S,"CLEAR_COLOR",CLEAR_COLOR);
 tolua_constant(tolua_S,"CLEAR_DEPTH",CLEAR_DEPTH);
 tolua_constant(tolua_S,"CLEAR_STENCIL",CLEAR_STENCIL);
 tolua_constant(tolua_S,"MASK_NONE",MASK_NONE);
 tolua_constant(tolua_S,"MASK_POSITION",MASK_POSITION);
 tolua_constant(tolua_S,"MASK_NORMAL",MASK_NORMAL);
 tolua_constant(tolua_S,"MASK_COLOR",MASK_COLOR);
 tolua_constant(tolua_S,"MASK_TEXCOORD1",MASK_TEXCOORD1);
 tolua_constant(tolua_S,"MASK_TEXCOORD2",MASK_TEXCOORD2);
 tolua_constant(tolua_S,"MASK_CUBETEXCOORD1",MASK_CUBETEXCOORD1);
 tolua_constant(tolua_S,"MASK_CUBETEXCOORD2",MASK_CUBETEXCOORD2);
 tolua_constant(tolua_S,"MASK_TANGENT",MASK_TANGENT);
 tolua_constant(tolua_S,"MASK_BLENDWEIGHTS",MASK_BLENDWEIGHTS);
 tolua_constant(tolua_S,"MASK_BLENDINDICES",MASK_BLENDINDICES);
 tolua_constant(tolua_S,"MASK_INSTANCEMATRIX1",MASK_INSTANCEMATRIX1);
 tolua_constant(tolua_S,"MASK_INSTANCEMATRIX2",MASK_INSTANCEMATRIX2);
 tolua_constant(tolua_S,"MASK_INSTANCEMATRIX3",MASK_INSTANCEMATRIX3);
 tolua_constant(tolua_S,"MASK_OBJECTINDEX",MASK_OBJECTINDEX);
 tolua_variable(tolua_S,"DRAWABLE_GEOMETRY",tolua_get_DRAWABLE_GEOMETRY,NULL);
 tolua_variable(tolua_S,"DRAWABLE_LIGHT",tolua_get_DRAWABLE_LIGHT,NULL);
 tolua_variable(tolua_S,"DRAWABLE_ZONE",tolua_get_DRAWABLE_ZONE,NULL);
 tolua_variable(tolua_S,"DRAWABLE_GEOMETRY2D",tolua_get_DRAWABLE_GEOMETRY2D,NULL);
 tolua_variable(tolua_S,"DRAWABLE_ANY",tolua_get_DRAWABLE_ANY,NULL);
 tolua_variable(tolua_S,"DEFAULT_VIEWMASK",tolua_get_DEFAULT_VIEWMASK,NULL);
 tolua_variable(tolua_S,"DEFAULT_LIGHTMASK",tolua_get_DEFAULT_LIGHTMASK,NULL);
 tolua_variable(tolua_S,"DEFAULT_SHADOWMASK",tolua_get_DEFAULT_SHADOWMASK,NULL);
 tolua_variable(tolua_S,"DEFAULT_ZONEMASK",tolua_get_DEFAULT_ZONEMASK,NULL);
 tolua_variable(tolua_S,"MAX_VERTEX_LIGHTS",tolua_get_MAX_VERTEX_LIGHTS,NULL);
 tolua_variable(tolua_S,"ANIMATION_LOD_BASESCALE",tolua_get_ANIMATION_LOD_BASESCALE,NULL);
 tolua_cclass(tolua_S,"Drawable","Drawable","Component",NULL);
 tolua_beginmodule(tolua_S,"Drawable");
  tolua_function(tolua_S,"SetDrawDistance",tolua_GraphicsLuaAPI_Drawable_SetDrawDistance00);
  tolua_function(tolua_S,"SetShadowDistance",tolua_GraphicsLuaAPI_Drawable_SetShadowDistance00);
  tolua_function(tolua_S,"SetLodBias",tolua_GraphicsLuaAPI_Drawable_SetLodBias00);
  tolua_function(tolua_S,"SetViewMask",tolua_GraphicsLuaAPI_Drawable_SetViewMask00);
  tolua_function(tolua_S,"SetLightMask",tolua_GraphicsLuaAPI_Drawable_SetLightMask00);
  tolua_function(tolua_S,"SetShadowMask",tolua_GraphicsLuaAPI_Drawable_SetShadowMask00);
  tolua_function(tolua_S,"SetZoneMask",tolua_GraphicsLuaAPI_Drawable_SetZoneMask00);
  tolua_function(tolua_S,"SetMaxLights",tolua_GraphicsLuaAPI_Drawable_SetMaxLights00);
  tolua_function(tolua_S,"SetCastShadows",tolua_GraphicsLuaAPI_Drawable_SetCastShadows00);
  tolua_function(tolua_S,"SetOccluder",tolua_GraphicsLuaAPI_Drawable_SetOccluder00);
  tolua_function(tolua_S,"SetOccludee",tolua_GraphicsLuaAPI_Drawable_SetOccludee00);
  tolua_function(tolua_S,"MarkForUpdate",tolua_GraphicsLuaAPI_Drawable_MarkForUpdate00);
  tolua_function(tolua_S,"GetBoundingBox",tolua_GraphicsLuaAPI_Drawable_GetBoundingBox00);
  tolua_function(tolua_S,"GetWorldBoundingBox",tolua_GraphicsLuaAPI_Drawable_GetWorldBoundingBox00);
  tolua_function(tolua_S,"GetDrawableFlags",tolua_GraphicsLuaAPI_Drawable_GetDrawableFlags00);
  tolua_function(tolua_S,"GetDrawDistance",tolua_GraphicsLuaAPI_Drawable_GetDrawDistance00);
  tolua_function(tolua_S,"GetShadowDistance",tolua_GraphicsLuaAPI_Drawable_GetShadowDistance00);
  tolua_function(tolua_S,"GetLodBias",tolua_GraphicsLuaAPI_Drawable_GetLodBias00);
  tolua_function(tolua_S,"GetViewMask",tolua_GraphicsLuaAPI_Drawable_GetViewMask00);
  tolua_function(tolua_S,"GetLightMask",tolua_GraphicsLuaAPI_Drawable_GetLightMask00);
  tolua_function(tolua_S,"GetShadowMask",tolua_GraphicsLuaAPI_Drawable_GetShadowMask00);
  tolua_function(tolua_S,"GetZoneMask",tolua_GraphicsLuaAPI_Drawable_GetZoneMask00);
  tolua_function(tolua_S,"GetMaxLights",tolua_GraphicsLuaAPI_Drawable_GetMaxLights00);
  tolua_function(tolua_S,"GetCastShadows",tolua_GraphicsLuaAPI_Drawable_GetCastShadows00);
  tolua_function(tolua_S,"IsOccluder",tolua_GraphicsLuaAPI_Drawable_IsOccluder00);
  tolua_function(tolua_S,"IsOccludee",tolua_GraphicsLuaAPI_Drawable_IsOccludee00);
  tolua_function(tolua_S,"IsInView",tolua_GraphicsLuaAPI_Drawable_IsInView00);
  tolua_function(tolua_S,"IsInView",tolua_GraphicsLuaAPI_Drawable_IsInView01);
  tolua_function(tolua_S,"GetZone",tolua_GraphicsLuaAPI_Drawable_GetZone00);
  tolua_variable(tolua_S,"worldBoundingBox",tolua_get_Drawable_worldBoundingBox_ref,NULL);
  tolua_variable(tolua_S,"drawableFlags",tolua_get_Drawable_unsigned_drawableFlags,NULL);
  tolua_variable(tolua_S,"drawDistance",tolua_get_Drawable_drawDistance,tolua_set_Drawable_drawDistance);
  tolua_variable(tolua_S,"shadowDistance",tolua_get_Drawable_shadowDistance,tolua_set_Drawable_shadowDistance);
  tolua_variable(tolua_S,"lodBias",tolua_get_Drawable_lodBias,tolua_set_Drawable_lodBias);
  tolua_variable(tolua_S,"viewMask",tolua_get_Drawable_viewMask,tolua_set_Drawable_viewMask);
  tolua_variable(tolua_S,"lightMask",tolua_get_Drawable_lightMask,tolua_set_Drawable_lightMask);
  tolua_variable(tolua_S,"shadowMask",tolua_get_Drawable_shadowMask,tolua_set_Drawable_shadowMask);
  tolua_variable(tolua_S,"zoneMask",tolua_get_Drawable_zoneMask,tolua_set_Drawable_zoneMask);
  tolua_variable(tolua_S,"maxLights",tolua_get_Drawable_maxLights,tolua_set_Drawable_maxLights);
  tolua_variable(tolua_S,"castShadows",tolua_get_Drawable_castShadows,tolua_set_Drawable_castShadows);
  tolua_variable(tolua_S,"occluder",tolua_get_Drawable_occluder,tolua_set_Drawable_occluder);
  tolua_variable(tolua_S,"occludee",tolua_get_Drawable_occludee,tolua_set_Drawable_occludee);
  tolua_variable(tolua_S,"inView",tolua_get_Drawable_inView,NULL);
  tolua_variable(tolua_S,"zone",tolua_get_Drawable_zone_ptr,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"AnimatedModel","AnimatedModel","StaticModel",NULL);
 tolua_beginmodule(tolua_S,"AnimatedModel");
  tolua_function(tolua_S,"SetModel",tolua_GraphicsLuaAPI_AnimatedModel_SetModel00);
  tolua_function(tolua_S,"AddAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_AddAnimationState00);
  tolua_function(tolua_S,"RemoveAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState00);
  tolua_function(tolua_S,"RemoveAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState01);
  tolua_function(tolua_S,"RemoveAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState02);
  tolua_function(tolua_S,"RemoveAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState03);
  tolua_function(tolua_S,"RemoveAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_RemoveAnimationState04);
  tolua_function(tolua_S,"RemoveAllAnimationStates",tolua_GraphicsLuaAPI_AnimatedModel_RemoveAllAnimationStates00);
  tolua_function(tolua_S,"SetAnimationLodBias",tolua_GraphicsLuaAPI_AnimatedModel_SetAnimationLodBias00);
  tolua_function(tolua_S,"SetUpdateInvisible",tolua_GraphicsLuaAPI_AnimatedModel_SetUpdateInvisible00);
  tolua_function(tolua_S,"SetMorphWeight",tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight00);
  tolua_function(tolua_S,"SetMorphWeight",tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight01);
  tolua_function(tolua_S,"SetMorphWeight",tolua_GraphicsLuaAPI_AnimatedModel_SetMorphWeight02);
  tolua_function(tolua_S,"ResetMorphWeights",tolua_GraphicsLuaAPI_AnimatedModel_ResetMorphWeights00);
  tolua_function(tolua_S,"GetSkeleton",tolua_GraphicsLuaAPI_AnimatedModel_GetSkeleton00);
  tolua_function(tolua_S,"GetNumAnimationStates",tolua_GraphicsLuaAPI_AnimatedModel_GetNumAnimationStates00);
  tolua_function(tolua_S,"GetAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState00);
  tolua_function(tolua_S,"GetAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState01);
  tolua_function(tolua_S,"GetAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState02);
  tolua_function(tolua_S,"GetAnimationState",tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationState03);
  tolua_function(tolua_S,"GetAnimationLodBias",tolua_GraphicsLuaAPI_AnimatedModel_GetAnimationLodBias00);
  tolua_function(tolua_S,"GetUpdateInvisible",tolua_GraphicsLuaAPI_AnimatedModel_GetUpdateInvisible00);
  tolua_function(tolua_S,"GetNumMorphs",tolua_GraphicsLuaAPI_AnimatedModel_GetNumMorphs00);
  tolua_function(tolua_S,"GetMorphWeight",tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight00);
  tolua_function(tolua_S,"GetMorphWeight",tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight01);
  tolua_function(tolua_S,"GetMorphWeight",tolua_GraphicsLuaAPI_AnimatedModel_GetMorphWeight02);
  tolua_function(tolua_S,"IsMaster",tolua_GraphicsLuaAPI_AnimatedModel_IsMaster00);
  tolua_function(tolua_S,"UpdateBoneBoundingBox",tolua_GraphicsLuaAPI_AnimatedModel_UpdateBoneBoundingBox00);
  tolua_variable(tolua_S,"model",tolua_get_AnimatedModel_model_ptr,tolua_set_AnimatedModel_model_ptr);
  tolua_variable(tolua_S,"skeleton",tolua_get_AnimatedModel_skeleton_ref,NULL);
  tolua_variable(tolua_S,"numAnimationStates",tolua_get_AnimatedModel_numAnimationStates,NULL);
  tolua_variable(tolua_S,"animationLodBias",tolua_get_AnimatedModel_animationLodBias,tolua_set_AnimatedModel_animationLodBias);
  tolua_variable(tolua_S,"updateInvisible",tolua_get_AnimatedModel_updateInvisible,tolua_set_AnimatedModel_updateInvisible);
  tolua_variable(tolua_S,"numMorphs",tolua_get_AnimatedModel_numMorphs,NULL);
  tolua_variable(tolua_S,"master",tolua_get_AnimatedModel_master,NULL);
 tolua_endmodule(tolua_S);
 tolua_variable(tolua_S,"CHANNEL_POSITION",tolua_get_unsigned_CHANNEL_POSITION,NULL);
 tolua_variable(tolua_S,"CHANNEL_ROTATION",tolua_get_unsigned_CHANNEL_ROTATION,NULL);
 tolua_variable(tolua_S,"CHANNEL_SCALE",tolua_get_unsigned_CHANNEL_SCALE,NULL);
 tolua_cclass(tolua_S,"AnimationKeyFrame","AnimationKeyFrame","",NULL);
 tolua_beginmodule(tolua_S,"AnimationKeyFrame");
  tolua_variable(tolua_S,"time",tolua_get_AnimationKeyFrame_time,tolua_set_AnimationKeyFrame_time);
  tolua_variable(tolua_S,"position",tolua_get_AnimationKeyFrame_position,tolua_set_AnimationKeyFrame_position);
  tolua_variable(tolua_S,"rotation",tolua_get_AnimationKeyFrame_rotation,tolua_set_AnimationKeyFrame_rotation);
  tolua_variable(tolua_S,"scale",tolua_get_AnimationKeyFrame_scale,tolua_set_AnimationKeyFrame_scale);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"AnimationTrack","AnimationTrack","",NULL);
 tolua_beginmodule(tolua_S,"AnimationTrack");
  tolua_function(tolua_S,"SetKeyFrame",tolua_GraphicsLuaAPI_AnimationTrack_SetKeyFrame00);
  tolua_function(tolua_S,"AddKeyFrame",tolua_GraphicsLuaAPI_AnimationTrack_AddKeyFrame00);
  tolua_function(tolua_S,"InsertKeyFrame",tolua_GraphicsLuaAPI_AnimationTrack_InsertKeyFrame00);
  tolua_function(tolua_S,"RemoveKeyFrame",tolua_GraphicsLuaAPI_AnimationTrack_RemoveKeyFrame00);
  tolua_function(tolua_S,"RemoveAllKeyFrames",tolua_GraphicsLuaAPI_AnimationTrack_RemoveAllKeyFrames00);
  tolua_function(tolua_S,"GetKeyFrame",tolua_GraphicsLuaAPI_AnimationTrack_GetKeyFrame00);
  tolua_function(tolua_S,"GetNumKeyFrames",tolua_GraphicsLuaAPI_AnimationTrack_GetNumKeyFrames00);
  tolua_variable(tolua_S,"name",tolua_get_AnimationTrack_name,NULL);
  tolua_variable(tolua_S,"nameHash",tolua_get_AnimationTrack_nameHash,NULL);
  tolua_variable(tolua_S,"channelMask",tolua_get_AnimationTrack_unsigned_channelMask,tolua_set_AnimationTrack_unsigned_channelMask);
  tolua_variable(tolua_S,"keyFrames",tolua_get_AnimationTrack_keyFrames,tolua_set_AnimationTrack_keyFrames);
  tolua_variable(tolua_S,"numKeyFrames",tolua_get_AnimationTrack_numKeyFrames,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"AnimationTriggerPoint","AnimationTriggerPoint","",tolua_collect_AnimationTriggerPoint);
 #else
 tolua_cclass(tolua_S,"AnimationTriggerPoint","AnimationTriggerPoint","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"AnimationTriggerPoint");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_AnimationTriggerPoint_new00_local);
  tolua_variable(tolua_S,"time",tolua_get_AnimationTriggerPoint_time,tolua_set_AnimationTriggerPoint_time);
  tolua_variable(tolua_S,"data",tolua_get_AnimationTriggerPoint_data,tolua_set_AnimationTriggerPoint_data);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Animation","Animation","ResourceWithMetadata",tolua_collect_Animation);
 #else
 tolua_cclass(tolua_S,"Animation","Animation","ResourceWithMetadata",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Animation");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Animation_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Animation_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Animation_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Animation_delete00);
  tolua_function(tolua_S,"SetAnimationName",tolua_GraphicsLuaAPI_Animation_SetAnimationName00);
  tolua_function(tolua_S,"SetLength",tolua_GraphicsLuaAPI_Animation_SetLength00);
  tolua_function(tolua_S,"CreateTrack",tolua_GraphicsLuaAPI_Animation_CreateTrack00);
  tolua_function(tolua_S,"RemoveTrack",tolua_GraphicsLuaAPI_Animation_RemoveTrack00);
  tolua_function(tolua_S,"RemoveAllTracks",tolua_GraphicsLuaAPI_Animation_RemoveAllTracks00);
  tolua_function(tolua_S,"SetTrigger",tolua_GraphicsLuaAPI_Animation_SetTrigger00);
  tolua_function(tolua_S,"AddTrigger",tolua_GraphicsLuaAPI_Animation_AddTrigger00);
  tolua_function(tolua_S,"AddTrigger",tolua_GraphicsLuaAPI_Animation_AddTrigger01);
  tolua_function(tolua_S,"RemoveTrigger",tolua_GraphicsLuaAPI_Animation_RemoveTrigger00);
  tolua_function(tolua_S,"RemoveAllTriggers",tolua_GraphicsLuaAPI_Animation_RemoveAllTriggers00);
  tolua_function(tolua_S,"Clone",tolua_GraphicsLuaAPI_Animation_Clone00);
  tolua_function(tolua_S,"GetAnimationName",tolua_GraphicsLuaAPI_Animation_GetAnimationName00);
  tolua_function(tolua_S,"GetLength",tolua_GraphicsLuaAPI_Animation_GetLength00);
  tolua_function(tolua_S,"GetNumTracks",tolua_GraphicsLuaAPI_Animation_GetNumTracks00);
  tolua_function(tolua_S,"GetTrack",tolua_GraphicsLuaAPI_Animation_GetTrack00);
  tolua_function(tolua_S,"GetTrack",tolua_GraphicsLuaAPI_Animation_GetTrack01);
  tolua_function(tolua_S,"GetTrack",tolua_GraphicsLuaAPI_Animation_GetTrack02);
  tolua_function(tolua_S,"GetNumTriggers",tolua_GraphicsLuaAPI_Animation_GetNumTriggers00);
  tolua_function(tolua_S,"GetTrigger",tolua_GraphicsLuaAPI_Animation_GetTrigger00);
  tolua_variable(tolua_S,"animationName",tolua_get_Animation_animationName,tolua_set_Animation_animationName);
  tolua_variable(tolua_S,"length",tolua_get_Animation_length,tolua_set_Animation_length);
  tolua_variable(tolua_S,"numTracks",tolua_get_Animation_numTracks,NULL);
  tolua_variable(tolua_S,"numTriggers",tolua_get_Animation_numTriggers,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"AnimationControl","AnimationControl","",tolua_collect_AnimationControl);
 #else
 tolua_cclass(tolua_S,"AnimationControl","AnimationControl","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"AnimationControl");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_AnimationControl_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_AnimationControl_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_AnimationControl_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_AnimationControl_delete00);
  tolua_variable(tolua_S,"name",tolua_get_AnimationControl_name,tolua_set_AnimationControl_name);
  tolua_variable(tolua_S,"hash",tolua_get_AnimationControl_hash,tolua_set_AnimationControl_hash);
  tolua_variable(tolua_S,"speed",tolua_get_AnimationControl_speed,tolua_set_AnimationControl_speed);
  tolua_variable(tolua_S,"targetWeight",tolua_get_AnimationControl_targetWeight,tolua_set_AnimationControl_targetWeight);
  tolua_variable(tolua_S,"fadeTime",tolua_get_AnimationControl_fadeTime,tolua_set_AnimationControl_fadeTime);
  tolua_variable(tolua_S,"autoFadeTime",tolua_get_AnimationControl_autoFadeTime,tolua_set_AnimationControl_autoFadeTime);
  tolua_variable(tolua_S,"removeOnCompletion",tolua_get_AnimationControl_removeOnCompletion,tolua_set_AnimationControl_removeOnCompletion);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"AnimationController","AnimationController","Component",NULL);
 tolua_beginmodule(tolua_S,"AnimationController");
  tolua_function(tolua_S,"Play",tolua_GraphicsLuaAPI_AnimationController_Play00);
  tolua_function(tolua_S,"PlayExclusive",tolua_GraphicsLuaAPI_AnimationController_PlayExclusive00);
  tolua_function(tolua_S,"Stop",tolua_GraphicsLuaAPI_AnimationController_Stop00);
  tolua_function(tolua_S,"StopLayer",tolua_GraphicsLuaAPI_AnimationController_StopLayer00);
  tolua_function(tolua_S,"StopAll",tolua_GraphicsLuaAPI_AnimationController_StopAll00);
  tolua_function(tolua_S,"Fade",tolua_GraphicsLuaAPI_AnimationController_Fade00);
  tolua_function(tolua_S,"FadeOthers",tolua_GraphicsLuaAPI_AnimationController_FadeOthers00);
  tolua_function(tolua_S,"SetLayer",tolua_GraphicsLuaAPI_AnimationController_SetLayer00);
  tolua_function(tolua_S,"SetStartBone",tolua_GraphicsLuaAPI_AnimationController_SetStartBone00);
  tolua_function(tolua_S,"SetTime",tolua_GraphicsLuaAPI_AnimationController_SetTime00);
  tolua_function(tolua_S,"SetWeight",tolua_GraphicsLuaAPI_AnimationController_SetWeight00);
  tolua_function(tolua_S,"SetLooped",tolua_GraphicsLuaAPI_AnimationController_SetLooped00);
  tolua_function(tolua_S,"SetBlendMode",tolua_GraphicsLuaAPI_AnimationController_SetBlendMode00);
  tolua_function(tolua_S,"SetSpeed",tolua_GraphicsLuaAPI_AnimationController_SetSpeed00);
  tolua_function(tolua_S,"SetAutoFade",tolua_GraphicsLuaAPI_AnimationController_SetAutoFade00);
  tolua_function(tolua_S,"SetRemoveOnCompletion",tolua_GraphicsLuaAPI_AnimationController_SetRemoveOnCompletion00);
  tolua_function(tolua_S,"IsPlaying",tolua_GraphicsLuaAPI_AnimationController_IsPlaying00);
  tolua_function(tolua_S,"IsPlaying",tolua_GraphicsLuaAPI_AnimationController_IsPlaying01);
  tolua_function(tolua_S,"IsFadingIn",tolua_GraphicsLuaAPI_AnimationController_IsFadingIn00);
  tolua_function(tolua_S,"IsFadingOut",tolua_GraphicsLuaAPI_AnimationController_IsFadingOut00);
  tolua_function(tolua_S,"IsAtEnd",tolua_GraphicsLuaAPI_AnimationController_IsAtEnd00);
  tolua_function(tolua_S,"GetLayer",tolua_GraphicsLuaAPI_AnimationController_GetLayer00);
  tolua_function(tolua_S,"GetStartBone",tolua_GraphicsLuaAPI_AnimationController_GetStartBone00);
  tolua_function(tolua_S,"GetStartBoneName",tolua_GraphicsLuaAPI_AnimationController_GetStartBoneName00);
  tolua_function(tolua_S,"GetTime",tolua_GraphicsLuaAPI_AnimationController_GetTime00);
  tolua_function(tolua_S,"GetWeight",tolua_GraphicsLuaAPI_AnimationController_GetWeight00);
  tolua_function(tolua_S,"IsLooped",tolua_GraphicsLuaAPI_AnimationController_IsLooped00);
  tolua_function(tolua_S,"GetBlendMode",tolua_GraphicsLuaAPI_AnimationController_GetBlendMode00);
  tolua_function(tolua_S,"GetLength",tolua_GraphicsLuaAPI_AnimationController_GetLength00);
  tolua_function(tolua_S,"GetSpeed",tolua_GraphicsLuaAPI_AnimationController_GetSpeed00);
  tolua_function(tolua_S,"GetFadeTarget",tolua_GraphicsLuaAPI_AnimationController_GetFadeTarget00);
  tolua_function(tolua_S,"GetFadeTime",tolua_GraphicsLuaAPI_AnimationController_GetFadeTime00);
  tolua_function(tolua_S,"GetAutoFade",tolua_GraphicsLuaAPI_AnimationController_GetAutoFade00);
  tolua_function(tolua_S,"GetRemoveOnCompletion",tolua_GraphicsLuaAPI_AnimationController_GetRemoveOnCompletion00);
  tolua_function(tolua_S,"GetAnimationState",tolua_GraphicsLuaAPI_AnimationController_GetAnimationState00);
  tolua_function(tolua_S,"GetAnimationState",tolua_GraphicsLuaAPI_AnimationController_GetAnimationState01);
  tolua_function(tolua_S,"GetAnimation",tolua_GraphicsLuaAPI_AnimationController_GetAnimation00);
  tolua_function(tolua_S,"GetNumAnimations",tolua_GraphicsLuaAPI_AnimationController_GetNumAnimations00);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"ABM_LERP",ABM_LERP);
 tolua_constant(tolua_S,"ABM_ADDITIVE",ABM_ADDITIVE);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"AnimationState","AnimationState","",tolua_collect_AnimationState);
 #else
 tolua_cclass(tolua_S,"AnimationState","AnimationState","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"AnimationState");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_AnimationState_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_AnimationState_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_AnimationState_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_AnimationState_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_AnimationState_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_AnimationState_new01_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_AnimationState_delete00);
  tolua_function(tolua_S,"SetStartBone",tolua_GraphicsLuaAPI_AnimationState_SetStartBone00);
  tolua_function(tolua_S,"SetLooped",tolua_GraphicsLuaAPI_AnimationState_SetLooped00);
  tolua_function(tolua_S,"SetWeight",tolua_GraphicsLuaAPI_AnimationState_SetWeight00);
  tolua_function(tolua_S,"SetTime",tolua_GraphicsLuaAPI_AnimationState_SetTime00);
  tolua_function(tolua_S,"SetBoneWeight",tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight00);
  tolua_function(tolua_S,"SetBoneWeight",tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight01);
  tolua_function(tolua_S,"SetBoneWeight",tolua_GraphicsLuaAPI_AnimationState_SetBoneWeight02);
  tolua_function(tolua_S,"AddWeight",tolua_GraphicsLuaAPI_AnimationState_AddWeight00);
  tolua_function(tolua_S,"AddTime",tolua_GraphicsLuaAPI_AnimationState_AddTime00);
  tolua_function(tolua_S,"SetLayer",tolua_GraphicsLuaAPI_AnimationState_SetLayer00);
  tolua_function(tolua_S,"SetBlendMode",tolua_GraphicsLuaAPI_AnimationState_SetBlendMode00);
  tolua_function(tolua_S,"GetAnimation",tolua_GraphicsLuaAPI_AnimationState_GetAnimation00);
  tolua_function(tolua_S,"GetStartBone",tolua_GraphicsLuaAPI_AnimationState_GetStartBone00);
  tolua_function(tolua_S,"GetBoneWeight",tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight00);
  tolua_function(tolua_S,"GetBoneWeight",tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight01);
  tolua_function(tolua_S,"GetBoneWeight",tolua_GraphicsLuaAPI_AnimationState_GetBoneWeight02);
  tolua_function(tolua_S,"GetTrackIndex",tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex00);
  tolua_function(tolua_S,"GetTrackIndex",tolua_GraphicsLuaAPI_AnimationState_GetTrackIndex01);
  tolua_function(tolua_S,"IsEnabled",tolua_GraphicsLuaAPI_AnimationState_IsEnabled00);
  tolua_function(tolua_S,"IsLooped",tolua_GraphicsLuaAPI_AnimationState_IsLooped00);
  tolua_function(tolua_S,"GetWeight",tolua_GraphicsLuaAPI_AnimationState_GetWeight00);
  tolua_function(tolua_S,"GetTime",tolua_GraphicsLuaAPI_AnimationState_GetTime00);
  tolua_function(tolua_S,"GetLength",tolua_GraphicsLuaAPI_AnimationState_GetLength00);
  tolua_function(tolua_S,"GetLayer",tolua_GraphicsLuaAPI_AnimationState_GetLayer00);
  tolua_function(tolua_S,"GetBlendMode",tolua_GraphicsLuaAPI_AnimationState_GetBlendMode00);
  tolua_variable(tolua_S,"animation",tolua_get_AnimationState_animation_ptr,NULL);
  tolua_variable(tolua_S,"startBone",tolua_get_AnimationState_startBone_ptr,tolua_set_AnimationState_startBone_ptr);
  tolua_variable(tolua_S,"enabled",tolua_get_AnimationState_enabled,NULL);
  tolua_variable(tolua_S,"looped",tolua_get_AnimationState_looped,tolua_set_AnimationState_looped);
  tolua_variable(tolua_S,"weight",tolua_get_AnimationState_weight,tolua_set_AnimationState_weight);
  tolua_variable(tolua_S,"time",tolua_get_AnimationState_time,tolua_set_AnimationState_time);
  tolua_variable(tolua_S,"length",tolua_get_AnimationState_length,NULL);
  tolua_variable(tolua_S,"layer",tolua_get_AnimationState_unsigned_layer,tolua_set_AnimationState_unsigned_layer);
  tolua_variable(tolua_S,"blendMode",tolua_get_AnimationState_blendMode,tolua_set_AnimationState_blendMode);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Billboard","Billboard","",NULL);
 tolua_beginmodule(tolua_S,"Billboard");
  tolua_variable(tolua_S,"position",tolua_get_Billboard_position,tolua_set_Billboard_position);
  tolua_variable(tolua_S,"size",tolua_get_Billboard_size,tolua_set_Billboard_size);
  tolua_variable(tolua_S,"uv",tolua_get_Billboard_uv,tolua_set_Billboard_uv);
  tolua_variable(tolua_S,"color",tolua_get_Billboard_color,tolua_set_Billboard_color);
  tolua_variable(tolua_S,"rotation",tolua_get_Billboard_rotation,tolua_set_Billboard_rotation);
  tolua_variable(tolua_S,"enabled",tolua_get_Billboard_enabled,tolua_set_Billboard_enabled);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"BillboardSet","BillboardSet","Drawable",NULL);
 tolua_beginmodule(tolua_S,"BillboardSet");
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_BillboardSet_SetMaterial00);
  tolua_function(tolua_S,"SetNumBillboards",tolua_GraphicsLuaAPI_BillboardSet_SetNumBillboards00);
  tolua_function(tolua_S,"SetRelative",tolua_GraphicsLuaAPI_BillboardSet_SetRelative00);
  tolua_function(tolua_S,"SetScaled",tolua_GraphicsLuaAPI_BillboardSet_SetScaled00);
  tolua_function(tolua_S,"SetSorted",tolua_GraphicsLuaAPI_BillboardSet_SetSorted00);
  tolua_function(tolua_S,"SetFixedScreenSize",tolua_GraphicsLuaAPI_BillboardSet_SetFixedScreenSize00);
  tolua_function(tolua_S,"SetFaceCameraMode",tolua_GraphicsLuaAPI_BillboardSet_SetFaceCameraMode00);
  tolua_function(tolua_S,"SetMinAngle",tolua_GraphicsLuaAPI_BillboardSet_SetMinAngle00);
  tolua_function(tolua_S,"SetAnimationLodBias",tolua_GraphicsLuaAPI_BillboardSet_SetAnimationLodBias00);
  tolua_function(tolua_S,"Commit",tolua_GraphicsLuaAPI_BillboardSet_Commit00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_BillboardSet_GetMaterial00);
  tolua_function(tolua_S,"GetNumBillboards",tolua_GraphicsLuaAPI_BillboardSet_GetNumBillboards00);
  tolua_function(tolua_S,"GetBillboard",tolua_GraphicsLuaAPI_BillboardSet_GetBillboard00);
  tolua_function(tolua_S,"IsRelative",tolua_GraphicsLuaAPI_BillboardSet_IsRelative00);
  tolua_function(tolua_S,"IsScaled",tolua_GraphicsLuaAPI_BillboardSet_IsScaled00);
  tolua_function(tolua_S,"IsSorted",tolua_GraphicsLuaAPI_BillboardSet_IsSorted00);
  tolua_function(tolua_S,"IsFixedScreenSize",tolua_GraphicsLuaAPI_BillboardSet_IsFixedScreenSize00);
  tolua_function(tolua_S,"GetFaceCameraMode",tolua_GraphicsLuaAPI_BillboardSet_GetFaceCameraMode00);
  tolua_function(tolua_S,"GetMinAngle",tolua_GraphicsLuaAPI_BillboardSet_GetMinAngle00);
  tolua_function(tolua_S,"GetAnimationLodBias",tolua_GraphicsLuaAPI_BillboardSet_GetAnimationLodBias00);
  tolua_variable(tolua_S,"material",tolua_get_BillboardSet_material_ptr,tolua_set_BillboardSet_material_ptr);
  tolua_variable(tolua_S,"numBillboards",tolua_get_BillboardSet_numBillboards,tolua_set_BillboardSet_numBillboards);
  tolua_variable(tolua_S,"relative",tolua_get_BillboardSet_relative,tolua_set_BillboardSet_relative);
  tolua_variable(tolua_S,"scaled",tolua_get_BillboardSet_scaled,tolua_set_BillboardSet_scaled);
  tolua_variable(tolua_S,"sorted",tolua_get_BillboardSet_sorted,tolua_set_BillboardSet_sorted);
  tolua_variable(tolua_S,"fixedScreenSize",tolua_get_BillboardSet_fixedScreenSize,tolua_set_BillboardSet_fixedScreenSize);
  tolua_variable(tolua_S,"faceCameraMode",tolua_get_BillboardSet_faceCameraMode,tolua_set_BillboardSet_faceCameraMode);
  tolua_variable(tolua_S,"minAngle",tolua_get_BillboardSet_minAngle,tolua_set_BillboardSet_minAngle);
  tolua_variable(tolua_S,"animationLodBias",tolua_get_BillboardSet_animationLodBias,tolua_set_BillboardSet_animationLodBias);
 tolua_endmodule(tolua_S);
 tolua_variable(tolua_S,"VO_NONE",tolua_get_VO_NONE,NULL);
 tolua_variable(tolua_S,"VO_LOW_MATERIAL_QUALITY",tolua_get_VO_LOW_MATERIAL_QUALITY,NULL);
 tolua_variable(tolua_S,"VO_DISABLE_SHADOWS",tolua_get_VO_DISABLE_SHADOWS,NULL);
 tolua_variable(tolua_S,"VO_DISABLE_OCCLUSION",tolua_get_VO_DISABLE_OCCLUSION,NULL);
 tolua_cclass(tolua_S,"Camera","Camera","Component",NULL);
 tolua_beginmodule(tolua_S,"Camera");
  tolua_function(tolua_S,"SetNearClip",tolua_GraphicsLuaAPI_Camera_SetNearClip00);
  tolua_function(tolua_S,"SetFarClip",tolua_GraphicsLuaAPI_Camera_SetFarClip00);
  tolua_function(tolua_S,"SetFov",tolua_GraphicsLuaAPI_Camera_SetFov00);
  tolua_function(tolua_S,"SetOrthoSize",tolua_GraphicsLuaAPI_Camera_SetOrthoSize00);
  tolua_function(tolua_S,"SetOrthoSize",tolua_GraphicsLuaAPI_Camera_SetOrthoSize01);
  tolua_function(tolua_S,"SetAspectRatio",tolua_GraphicsLuaAPI_Camera_SetAspectRatio00);
  tolua_function(tolua_S,"SetFillMode",tolua_GraphicsLuaAPI_Camera_SetFillMode00);
  tolua_function(tolua_S,"SetZoom",tolua_GraphicsLuaAPI_Camera_SetZoom00);
  tolua_function(tolua_S,"SetLodBias",tolua_GraphicsLuaAPI_Camera_SetLodBias00);
  tolua_function(tolua_S,"SetViewMask",tolua_GraphicsLuaAPI_Camera_SetViewMask00);
  tolua_function(tolua_S,"SetViewOverrideFlags",tolua_GraphicsLuaAPI_Camera_SetViewOverrideFlags00);
  tolua_function(tolua_S,"SetOrthographic",tolua_GraphicsLuaAPI_Camera_SetOrthographic00);
  tolua_function(tolua_S,"SetAutoAspectRatio",tolua_GraphicsLuaAPI_Camera_SetAutoAspectRatio00);
  tolua_function(tolua_S,"SetProjectionOffset",tolua_GraphicsLuaAPI_Camera_SetProjectionOffset00);
  tolua_function(tolua_S,"SetUseReflection",tolua_GraphicsLuaAPI_Camera_SetUseReflection00);
  tolua_function(tolua_S,"SetReflectionPlane",tolua_GraphicsLuaAPI_Camera_SetReflectionPlane00);
  tolua_function(tolua_S,"SetUseClipping",tolua_GraphicsLuaAPI_Camera_SetUseClipping00);
  tolua_function(tolua_S,"SetClipPlane",tolua_GraphicsLuaAPI_Camera_SetClipPlane00);
  tolua_function(tolua_S,"SetProjection",tolua_GraphicsLuaAPI_Camera_SetProjection00);
  tolua_function(tolua_S,"GetFarClip",tolua_GraphicsLuaAPI_Camera_GetFarClip00);
  tolua_function(tolua_S,"GetNearClip",tolua_GraphicsLuaAPI_Camera_GetNearClip00);
  tolua_function(tolua_S,"GetFov",tolua_GraphicsLuaAPI_Camera_GetFov00);
  tolua_function(tolua_S,"GetOrthoSize",tolua_GraphicsLuaAPI_Camera_GetOrthoSize00);
  tolua_function(tolua_S,"GetAspectRatio",tolua_GraphicsLuaAPI_Camera_GetAspectRatio00);
  tolua_function(tolua_S,"GetZoom",tolua_GraphicsLuaAPI_Camera_GetZoom00);
  tolua_function(tolua_S,"GetLodBias",tolua_GraphicsLuaAPI_Camera_GetLodBias00);
  tolua_function(tolua_S,"GetViewMask",tolua_GraphicsLuaAPI_Camera_GetViewMask00);
  tolua_function(tolua_S,"GetViewOverrideFlags",tolua_GraphicsLuaAPI_Camera_GetViewOverrideFlags00);
  tolua_function(tolua_S,"GetFillMode",tolua_GraphicsLuaAPI_Camera_GetFillMode00);
  tolua_function(tolua_S,"IsOrthographic",tolua_GraphicsLuaAPI_Camera_IsOrthographic00);
  tolua_function(tolua_S,"GetAutoAspectRatio",tolua_GraphicsLuaAPI_Camera_GetAutoAspectRatio00);
  tolua_function(tolua_S,"GetFrustum",tolua_GraphicsLuaAPI_Camera_GetFrustum00);
  tolua_function(tolua_S,"GetProjection",tolua_GraphicsLuaAPI_Camera_GetProjection00);
  tolua_function(tolua_S,"GetGPUProjection",tolua_GraphicsLuaAPI_Camera_GetGPUProjection00);
  tolua_function(tolua_S,"GetView",tolua_GraphicsLuaAPI_Camera_GetView00);
  tolua_function(tolua_S,"GetFrustumSize",tolua_GraphicsLuaAPI_Camera_GetFrustumSize00);
  tolua_function(tolua_S,"GetHalfViewSize",tolua_GraphicsLuaAPI_Camera_GetHalfViewSize00);
  tolua_function(tolua_S,"GetSplitFrustum",tolua_GraphicsLuaAPI_Camera_GetSplitFrustum00);
  tolua_function(tolua_S,"GetViewSpaceFrustum",tolua_GraphicsLuaAPI_Camera_GetViewSpaceFrustum00);
  tolua_function(tolua_S,"GetViewSpaceSplitFrustum",tolua_GraphicsLuaAPI_Camera_GetViewSpaceSplitFrustum00);
  tolua_function(tolua_S,"GetScreenRay",tolua_GraphicsLuaAPI_Camera_GetScreenRay00);
  tolua_function(tolua_S,"WorldToScreenPoint",tolua_GraphicsLuaAPI_Camera_WorldToScreenPoint00);
  tolua_function(tolua_S,"ScreenToWorldPoint",tolua_GraphicsLuaAPI_Camera_ScreenToWorldPoint00);
  tolua_function(tolua_S,"GetProjectionOffset",tolua_GraphicsLuaAPI_Camera_GetProjectionOffset00);
  tolua_function(tolua_S,"GetUseReflection",tolua_GraphicsLuaAPI_Camera_GetUseReflection00);
  tolua_function(tolua_S,"GetReflectionPlane",tolua_GraphicsLuaAPI_Camera_GetReflectionPlane00);
  tolua_function(tolua_S,"GetUseClipping",tolua_GraphicsLuaAPI_Camera_GetUseClipping00);
  tolua_function(tolua_S,"GetClipPlane",tolua_GraphicsLuaAPI_Camera_GetClipPlane00);
  tolua_function(tolua_S,"GetDistance",tolua_GraphicsLuaAPI_Camera_GetDistance00);
  tolua_function(tolua_S,"GetDistanceSquared",tolua_GraphicsLuaAPI_Camera_GetDistanceSquared00);
  tolua_function(tolua_S,"GetLodDistance",tolua_GraphicsLuaAPI_Camera_GetLodDistance00);
  tolua_function(tolua_S,"IsProjectionValid",tolua_GraphicsLuaAPI_Camera_IsProjectionValid00);
  tolua_function(tolua_S,"GetEffectiveWorldTransform",tolua_GraphicsLuaAPI_Camera_GetEffectiveWorldTransform00);
  tolua_variable(tolua_S,"farClip",tolua_get_Camera_farClip,tolua_set_Camera_farClip);
  tolua_variable(tolua_S,"nearClip",tolua_get_Camera_nearClip,tolua_set_Camera_nearClip);
  tolua_variable(tolua_S,"fov",tolua_get_Camera_fov,tolua_set_Camera_fov);
  tolua_variable(tolua_S,"orthoSize",tolua_get_Camera_orthoSize,tolua_set_Camera_orthoSize);
  tolua_variable(tolua_S,"aspectRatio",tolua_get_Camera_aspectRatio,tolua_set_Camera_aspectRatio);
  tolua_variable(tolua_S,"zoom",tolua_get_Camera_zoom,tolua_set_Camera_zoom);
  tolua_variable(tolua_S,"lodBias",tolua_get_Camera_lodBias,tolua_set_Camera_lodBias);
  tolua_variable(tolua_S,"viewMask",tolua_get_Camera_viewMask,tolua_set_Camera_viewMask);
  tolua_variable(tolua_S,"viewOverrideFlags",tolua_get_Camera_viewOverrideFlags,tolua_set_Camera_viewOverrideFlags);
  tolua_variable(tolua_S,"fillMode",tolua_get_Camera_fillMode,tolua_set_Camera_fillMode);
  tolua_variable(tolua_S,"orthographic",tolua_get_Camera_orthographic,tolua_set_Camera_orthographic);
  tolua_variable(tolua_S,"autoAspectRatio",tolua_get_Camera_autoAspectRatio,tolua_set_Camera_autoAspectRatio);
  tolua_variable(tolua_S,"frustum",tolua_get_Camera_frustum_ref,NULL);
  tolua_variable(tolua_S,"projection",tolua_get_Camera_projection,NULL);
  tolua_variable(tolua_S,"GPUProjection",tolua_get_Camera_GPUProjection,NULL);
  tolua_variable(tolua_S,"view",tolua_get_Camera_view_ref,NULL);
  tolua_variable(tolua_S,"halfViewSize",tolua_get_Camera_halfViewSize,NULL);
  tolua_variable(tolua_S,"viewSpaceFrustum",tolua_get_Camera_viewSpaceFrustum,NULL);
  tolua_variable(tolua_S,"projectionOffset",tolua_get_Camera_projectionOffset_ref,tolua_set_Camera_projectionOffset_ref);
  tolua_variable(tolua_S,"useReflection",tolua_get_Camera_useReflection,tolua_set_Camera_useReflection);
  tolua_variable(tolua_S,"reflectionPlane",tolua_get_Camera_reflectionPlane_ref,tolua_set_Camera_reflectionPlane_ref);
  tolua_variable(tolua_S,"useClipping",tolua_get_Camera_useClipping,tolua_set_Camera_useClipping);
  tolua_variable(tolua_S,"clipPlane",tolua_get_Camera_clipPlane_ref,tolua_set_Camera_clipPlane_ref);
  tolua_variable(tolua_S,"projectionValid",tolua_get_Camera_projectionValid,NULL);
  tolua_variable(tolua_S,"effectiveWorldTransform",tolua_get_Camera_effectiveWorldTransform,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"CustomGeometryVertex","CustomGeometryVertex","",NULL);
 tolua_beginmodule(tolua_S,"CustomGeometryVertex");
  tolua_variable(tolua_S,"position",tolua_get_CustomGeometryVertex_position,tolua_set_CustomGeometryVertex_position);
  tolua_variable(tolua_S,"normal",tolua_get_CustomGeometryVertex_normal,tolua_set_CustomGeometryVertex_normal);
  tolua_variable(tolua_S,"color",tolua_get_CustomGeometryVertex_color,tolua_set_CustomGeometryVertex_color);
  tolua_variable(tolua_S,"texCoord",tolua_get_CustomGeometryVertex_texCoord,tolua_set_CustomGeometryVertex_texCoord);
  tolua_variable(tolua_S,"tangent",tolua_get_CustomGeometryVertex_tangent,tolua_set_CustomGeometryVertex_tangent);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"CustomGeometry","CustomGeometry","Drawable",NULL);
 tolua_beginmodule(tolua_S,"CustomGeometry");
  tolua_function(tolua_S,"Clear",tolua_GraphicsLuaAPI_CustomGeometry_Clear00);
  tolua_function(tolua_S,"SetNumGeometries",tolua_GraphicsLuaAPI_CustomGeometry_SetNumGeometries00);
  tolua_function(tolua_S,"SetDynamic",tolua_GraphicsLuaAPI_CustomGeometry_SetDynamic00);
  tolua_function(tolua_S,"BeginGeometry",tolua_GraphicsLuaAPI_CustomGeometry_BeginGeometry00);
  tolua_function(tolua_S,"DefineVertex",tolua_GraphicsLuaAPI_CustomGeometry_DefineVertex00);
  tolua_function(tolua_S,"DefineNormal",tolua_GraphicsLuaAPI_CustomGeometry_DefineNormal00);
  tolua_function(tolua_S,"DefineTangent",tolua_GraphicsLuaAPI_CustomGeometry_DefineTangent00);
  tolua_function(tolua_S,"DefineColor",tolua_GraphicsLuaAPI_CustomGeometry_DefineColor00);
  tolua_function(tolua_S,"DefineTexCoord",tolua_GraphicsLuaAPI_CustomGeometry_DefineTexCoord00);
  tolua_function(tolua_S,"DefineGeometry",tolua_GraphicsLuaAPI_CustomGeometry_DefineGeometry00);
  tolua_function(tolua_S,"Commit",tolua_GraphicsLuaAPI_CustomGeometry_Commit00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_CustomGeometry_SetMaterial01);
  tolua_function(tolua_S,"GetNumGeometries",tolua_GraphicsLuaAPI_CustomGeometry_GetNumGeometries00);
  tolua_function(tolua_S,"GetNumVertices",tolua_GraphicsLuaAPI_CustomGeometry_GetNumVertices00);
  tolua_function(tolua_S,"IsDynamic",tolua_GraphicsLuaAPI_CustomGeometry_IsDynamic00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_CustomGeometry_GetMaterial00);
  tolua_function(tolua_S,"GetVertex",tolua_GraphicsLuaAPI_CustomGeometry_GetVertex00);
  tolua_variable(tolua_S,"material",tolua_get_CustomGeometry_material_ptr,tolua_set_CustomGeometry_material_ptr);
  tolua_variable(tolua_S,"numGeometries",tolua_get_CustomGeometry_numGeometries,tolua_set_CustomGeometry_numGeometries);
  tolua_variable(tolua_S,"dynamic",tolua_get_CustomGeometry_dynamic,tolua_set_CustomGeometry_dynamic);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"DebugRenderer","DebugRenderer","Component",NULL);
 tolua_beginmodule(tolua_S,"DebugRenderer");
  tolua_function(tolua_S,"SetLineAntiAlias",tolua_GraphicsLuaAPI_DebugRenderer_SetLineAntiAlias00);
  tolua_function(tolua_S,"SetView",tolua_GraphicsLuaAPI_DebugRenderer_SetView00);
  tolua_function(tolua_S,"AddLine",tolua_GraphicsLuaAPI_DebugRenderer_AddLine00);
  tolua_function(tolua_S,"AddLine",tolua_GraphicsLuaAPI_DebugRenderer_AddLine01);
  tolua_function(tolua_S,"AddTriangle",tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle00);
  tolua_function(tolua_S,"AddTriangle",tolua_GraphicsLuaAPI_DebugRenderer_AddTriangle01);
  tolua_function(tolua_S,"AddPolygon",tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon00);
  tolua_function(tolua_S,"AddPolygon",tolua_GraphicsLuaAPI_DebugRenderer_AddPolygon01);
  tolua_function(tolua_S,"AddNode",tolua_GraphicsLuaAPI_DebugRenderer_AddNode00);
  tolua_function(tolua_S,"AddBoundingBox",tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox00);
  tolua_function(tolua_S,"AddBoundingBox",tolua_GraphicsLuaAPI_DebugRenderer_AddBoundingBox01);
  tolua_function(tolua_S,"AddFrustum",tolua_GraphicsLuaAPI_DebugRenderer_AddFrustum00);
  tolua_function(tolua_S,"AddPolyhedron",tolua_GraphicsLuaAPI_DebugRenderer_AddPolyhedron00);
  tolua_function(tolua_S,"AddSphere",tolua_GraphicsLuaAPI_DebugRenderer_AddSphere00);
  tolua_function(tolua_S,"AddSphereSector",tolua_GraphicsLuaAPI_DebugRenderer_AddSphereSector00);
  tolua_function(tolua_S,"AddSkeleton",tolua_GraphicsLuaAPI_DebugRenderer_AddSkeleton00);
  tolua_function(tolua_S,"AddTriangleMesh",tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh00);
  tolua_function(tolua_S,"AddTriangleMesh",tolua_GraphicsLuaAPI_DebugRenderer_AddTriangleMesh01);
  tolua_function(tolua_S,"AddCircle",tolua_GraphicsLuaAPI_DebugRenderer_AddCircle00);
  tolua_function(tolua_S,"AddCross",tolua_GraphicsLuaAPI_DebugRenderer_AddCross00);
  tolua_function(tolua_S,"AddQuad",tolua_GraphicsLuaAPI_DebugRenderer_AddQuad00);
  tolua_function(tolua_S,"Render",tolua_GraphicsLuaAPI_DebugRenderer_Render00);
  tolua_function(tolua_S,"GetLineAntiAlias",tolua_GraphicsLuaAPI_DebugRenderer_GetLineAntiAlias00);
  tolua_function(tolua_S,"GetView",tolua_GraphicsLuaAPI_DebugRenderer_GetView00);
  tolua_function(tolua_S,"GetProjection",tolua_GraphicsLuaAPI_DebugRenderer_GetProjection00);
  tolua_function(tolua_S,"GetFrustum",tolua_GraphicsLuaAPI_DebugRenderer_GetFrustum00);
  tolua_function(tolua_S,"IsInside",tolua_GraphicsLuaAPI_DebugRenderer_IsInside00);
  tolua_variable(tolua_S,"lineAntiAlias",tolua_get_DebugRenderer_lineAntiAlias,tolua_set_DebugRenderer_lineAntiAlias);
  tolua_variable(tolua_S,"view",tolua_get_DebugRenderer_view_ref,NULL);
  tolua_variable(tolua_S,"projection",tolua_get_DebugRenderer_projection_ref,NULL);
  tolua_variable(tolua_S,"frustum",tolua_get_DebugRenderer_frustum_ref,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"DecalSet","DecalSet","Drawable",NULL);
 tolua_beginmodule(tolua_S,"DecalSet");
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_DecalSet_SetMaterial00);
  tolua_function(tolua_S,"SetMaxVertices",tolua_GraphicsLuaAPI_DecalSet_SetMaxVertices00);
  tolua_function(tolua_S,"SetMaxIndices",tolua_GraphicsLuaAPI_DecalSet_SetMaxIndices00);
  tolua_function(tolua_S,"SetOptimizeBufferSize",tolua_GraphicsLuaAPI_DecalSet_SetOptimizeBufferSize00);
  tolua_function(tolua_S,"AddDecal",tolua_GraphicsLuaAPI_DecalSet_AddDecal00);
  tolua_function(tolua_S,"RemoveDecals",tolua_GraphicsLuaAPI_DecalSet_RemoveDecals00);
  tolua_function(tolua_S,"RemoveAllDecals",tolua_GraphicsLuaAPI_DecalSet_RemoveAllDecals00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_DecalSet_GetMaterial00);
  tolua_function(tolua_S,"GetNumDecals",tolua_GraphicsLuaAPI_DecalSet_GetNumDecals00);
  tolua_function(tolua_S,"GetNumVertices",tolua_GraphicsLuaAPI_DecalSet_GetNumVertices00);
  tolua_function(tolua_S,"GetNumIndices",tolua_GraphicsLuaAPI_DecalSet_GetNumIndices00);
  tolua_function(tolua_S,"GetMaxVertices",tolua_GraphicsLuaAPI_DecalSet_GetMaxVertices00);
  tolua_function(tolua_S,"GetMaxIndices",tolua_GraphicsLuaAPI_DecalSet_GetMaxIndices00);
  tolua_function(tolua_S,"GetOptimizeBufferSize",tolua_GraphicsLuaAPI_DecalSet_GetOptimizeBufferSize00);
  tolua_variable(tolua_S,"material",tolua_get_DecalSet_material_ptr,tolua_set_DecalSet_material_ptr);
  tolua_variable(tolua_S,"numDecals",tolua_get_DecalSet_numDecals,NULL);
  tolua_variable(tolua_S,"numVertices",tolua_get_DecalSet_numVertices,NULL);
  tolua_variable(tolua_S,"numIndices",tolua_get_DecalSet_numIndices,NULL);
  tolua_variable(tolua_S,"maxVertices",tolua_get_DecalSet_maxVertices,tolua_set_DecalSet_maxVertices);
  tolua_variable(tolua_S,"maxIndices",tolua_get_DecalSet_maxIndices,tolua_set_DecalSet_maxIndices);
  tolua_variable(tolua_S,"optimizeBufferSize",tolua_get_DecalSet_optimizeBufferSize,tolua_set_DecalSet_optimizeBufferSize);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Graphics","Graphics","Object",NULL);
 tolua_beginmodule(tolua_S,"Graphics");
  tolua_function(tolua_S,"SetWindowTitle",tolua_GraphicsLuaAPI_Graphics_SetWindowTitle00);
  tolua_function(tolua_S,"SetWindowIcon",tolua_GraphicsLuaAPI_Graphics_SetWindowIcon00);
  tolua_function(tolua_S,"SetWindowPosition",tolua_GraphicsLuaAPI_Graphics_SetWindowPosition00);
  tolua_function(tolua_S,"SetWindowPosition",tolua_GraphicsLuaAPI_Graphics_SetWindowPosition01);
  tolua_function(tolua_S,"SetMode",tolua_GraphicsLuaAPI_Graphics_SetMode00);
  tolua_function(tolua_S,"SetMode",tolua_GraphicsLuaAPI_Graphics_SetMode01);
  tolua_function(tolua_S,"SetSRGB",tolua_GraphicsLuaAPI_Graphics_SetSRGB00);
  tolua_function(tolua_S,"SetDither",tolua_GraphicsLuaAPI_Graphics_SetDither00);
  tolua_function(tolua_S,"SetFlushGPU",tolua_GraphicsLuaAPI_Graphics_SetFlushGPU00);
  tolua_function(tolua_S,"SetOrientations",tolua_GraphicsLuaAPI_Graphics_SetOrientations00);
  tolua_function(tolua_S,"ToggleFullscreen",tolua_GraphicsLuaAPI_Graphics_ToggleFullscreen00);
  tolua_function(tolua_S,"Maximize",tolua_GraphicsLuaAPI_Graphics_Maximize00);
  tolua_function(tolua_S,"Minimize",tolua_GraphicsLuaAPI_Graphics_Minimize00);
  tolua_function(tolua_S,"Raise",tolua_GraphicsLuaAPI_Graphics_Raise00);
  tolua_function(tolua_S,"Close",tolua_GraphicsLuaAPI_Graphics_Close00);
  tolua_function(tolua_S,"TakeScreenShot",tolua_GraphicsLuaAPI_Graphics_TakeScreenShot00);
  tolua_function(tolua_S,"BeginDumpShaders",tolua_GraphicsLuaAPI_Graphics_BeginDumpShaders00);
  tolua_function(tolua_S,"EndDumpShaders",tolua_GraphicsLuaAPI_Graphics_EndDumpShaders00);
  tolua_function(tolua_S,"PrecacheShaders",tolua_GraphicsLuaAPI_Graphics_PrecacheShaders00);
  tolua_function(tolua_S,"PrecacheShaders",tolua_GraphicsLuaAPI_Graphics_PrecacheShaders01);
  tolua_function(tolua_S,"SetShaderCacheDir",tolua_GraphicsLuaAPI_Graphics_SetShaderCacheDir00);
  tolua_function(tolua_S,"IsInitialized",tolua_GraphicsLuaAPI_Graphics_IsInitialized00);
  tolua_function(tolua_S,"GetExternalWindow",tolua_GraphicsLuaAPI_Graphics_GetExternalWindow00);
  tolua_function(tolua_S,"GetWindowTitle",tolua_GraphicsLuaAPI_Graphics_GetWindowTitle00);
  tolua_function(tolua_S,"GetApiName",tolua_GraphicsLuaAPI_Graphics_GetApiName00);
  tolua_function(tolua_S,"GetWindowPosition",tolua_GraphicsLuaAPI_Graphics_GetWindowPosition00);
  tolua_function(tolua_S,"GetWidth",tolua_GraphicsLuaAPI_Graphics_GetWidth00);
  tolua_function(tolua_S,"GetHeight",tolua_GraphicsLuaAPI_Graphics_GetHeight00);
  tolua_function(tolua_S,"GetMultiSample",tolua_GraphicsLuaAPI_Graphics_GetMultiSample00);
  tolua_function(tolua_S,"GetSize",tolua_GraphicsLuaAPI_Graphics_GetSize00);
  tolua_function(tolua_S,"GetFullscreen",tolua_GraphicsLuaAPI_Graphics_GetFullscreen00);
  tolua_function(tolua_S,"GetResizable",tolua_GraphicsLuaAPI_Graphics_GetResizable00);
  tolua_function(tolua_S,"GetBorderless",tolua_GraphicsLuaAPI_Graphics_GetBorderless00);
  tolua_function(tolua_S,"GetVSync",tolua_GraphicsLuaAPI_Graphics_GetVSync00);
  tolua_function(tolua_S,"GetMonitor",tolua_GraphicsLuaAPI_Graphics_GetMonitor00);
  tolua_function(tolua_S,"GetRefreshRate",tolua_GraphicsLuaAPI_Graphics_GetRefreshRate00);
  tolua_function(tolua_S,"GetTripleBuffer",tolua_GraphicsLuaAPI_Graphics_GetTripleBuffer00);
  tolua_function(tolua_S,"GetSRGB",tolua_GraphicsLuaAPI_Graphics_GetSRGB00);
  tolua_function(tolua_S,"GetDither",tolua_GraphicsLuaAPI_Graphics_GetDither00);
  tolua_function(tolua_S,"GetFlushGPU",tolua_GraphicsLuaAPI_Graphics_GetFlushGPU00);
  tolua_function(tolua_S,"GetOrientations",tolua_GraphicsLuaAPI_Graphics_GetOrientations00);
  tolua_function(tolua_S,"IsDeviceLost",tolua_GraphicsLuaAPI_Graphics_IsDeviceLost00);
  tolua_function(tolua_S,"GetNumPrimitives",tolua_GraphicsLuaAPI_Graphics_GetNumPrimitives00);
  tolua_function(tolua_S,"GetNumBatches",tolua_GraphicsLuaAPI_Graphics_GetNumBatches00);
  tolua_function(tolua_S,"GetDummyColorFormat",tolua_GraphicsLuaAPI_Graphics_GetDummyColorFormat00);
  tolua_function(tolua_S,"GetShadowMapFormat",tolua_GraphicsLuaAPI_Graphics_GetShadowMapFormat00);
  tolua_function(tolua_S,"GetHiresShadowMapFormat",tolua_GraphicsLuaAPI_Graphics_GetHiresShadowMapFormat00);
  tolua_function(tolua_S,"GetInstancingSupport",tolua_GraphicsLuaAPI_Graphics_GetInstancingSupport00);
  tolua_function(tolua_S,"GetLightPrepassSupport",tolua_GraphicsLuaAPI_Graphics_GetLightPrepassSupport00);
  tolua_function(tolua_S,"GetDeferredSupport",tolua_GraphicsLuaAPI_Graphics_GetDeferredSupport00);
  tolua_function(tolua_S,"GetHardwareShadowSupport",tolua_GraphicsLuaAPI_Graphics_GetHardwareShadowSupport00);
  tolua_function(tolua_S,"GetReadableDepthSupport",tolua_GraphicsLuaAPI_Graphics_GetReadableDepthSupport00);
  tolua_function(tolua_S,"GetSRGBSupport",tolua_GraphicsLuaAPI_Graphics_GetSRGBSupport00);
  tolua_function(tolua_S,"GetSRGBWriteSupport",tolua_GraphicsLuaAPI_Graphics_GetSRGBWriteSupport00);
  tolua_function(tolua_S,"GetDesktopResolution",tolua_GraphicsLuaAPI_Graphics_GetDesktopResolution00);
  tolua_function(tolua_S,"GetMonitorCount",tolua_GraphicsLuaAPI_Graphics_GetMonitorCount00);
  tolua_function(tolua_S,"GetShaderCacheDir",tolua_GraphicsLuaAPI_Graphics_GetShaderCacheDir00);
  tolua_function(tolua_S,"GetCurrentMonitor",tolua_GraphicsLuaAPI_Graphics_GetCurrentMonitor00);
  tolua_function(tolua_S,"GetMaximized",tolua_GraphicsLuaAPI_Graphics_GetMaximized00);
  tolua_function(tolua_S,"Raise",tolua_GraphicsLuaAPI_Graphics_Raise01);
  tolua_function(tolua_S,"GetDisplayDPI",tolua_GraphicsLuaAPI_Graphics_GetDisplayDPI00);
  tolua_function(tolua_S,"GetAlphaFormat",tolua_GraphicsLuaAPI_Graphics_GetAlphaFormat00);
  tolua_function(tolua_S,"GetLuminanceFormat",tolua_GraphicsLuaAPI_Graphics_GetLuminanceFormat00);
  tolua_function(tolua_S,"GetLuminanceAlphaFormat",tolua_GraphicsLuaAPI_Graphics_GetLuminanceAlphaFormat00);
  tolua_function(tolua_S,"GetRGBFormat",tolua_GraphicsLuaAPI_Graphics_GetRGBFormat00);
  tolua_function(tolua_S,"GetRGBAFormat",tolua_GraphicsLuaAPI_Graphics_GetRGBAFormat00);
  tolua_function(tolua_S,"GetRGBA16Format",tolua_GraphicsLuaAPI_Graphics_GetRGBA16Format00);
  tolua_function(tolua_S,"GetRGBAFloat16Format",tolua_GraphicsLuaAPI_Graphics_GetRGBAFloat16Format00);
  tolua_function(tolua_S,"GetRGBAFloat32Format",tolua_GraphicsLuaAPI_Graphics_GetRGBAFloat32Format00);
  tolua_function(tolua_S,"GetRG16Format",tolua_GraphicsLuaAPI_Graphics_GetRG16Format00);
  tolua_function(tolua_S,"GetRGFloat16Format",tolua_GraphicsLuaAPI_Graphics_GetRGFloat16Format00);
  tolua_function(tolua_S,"GetRGFloat32Format",tolua_GraphicsLuaAPI_Graphics_GetRGFloat32Format00);
  tolua_function(tolua_S,"GetFloat16Format",tolua_GraphicsLuaAPI_Graphics_GetFloat16Format00);
  tolua_function(tolua_S,"GetFloat32Format",tolua_GraphicsLuaAPI_Graphics_GetFloat32Format00);
  tolua_function(tolua_S,"GetLinearDepthFormat",tolua_GraphicsLuaAPI_Graphics_GetLinearDepthFormat00);
  tolua_function(tolua_S,"GetDepthStencilFormat",tolua_GraphicsLuaAPI_Graphics_GetDepthStencilFormat00);
  tolua_function(tolua_S,"GetReadableDepthFormat",tolua_GraphicsLuaAPI_Graphics_GetReadableDepthFormat00);
  tolua_function(tolua_S,"GetFormat",tolua_GraphicsLuaAPI_Graphics_GetFormat00);
  tolua_function(tolua_S,"GetMaxBones",tolua_GraphicsLuaAPI_Graphics_GetMaxBones00);
  tolua_variable(tolua_S,"initialized",tolua_get_Graphics_initialized,NULL);
  tolua_variable(tolua_S,"windowTitle",tolua_get_Graphics_windowTitle,tolua_set_Graphics_windowTitle);
  tolua_variable(tolua_S,"apiName",tolua_get_Graphics_apiName,NULL);
  tolua_variable(tolua_S,"windowPosition",tolua_get_Graphics_windowPosition,tolua_set_Graphics_windowPosition);
  tolua_variable(tolua_S,"width",tolua_get_Graphics_width,NULL);
  tolua_variable(tolua_S,"height",tolua_get_Graphics_height,NULL);
  tolua_variable(tolua_S,"multiSample",tolua_get_Graphics_multiSample,NULL);
  tolua_variable(tolua_S,"size",tolua_get_Graphics_size,NULL);
  tolua_variable(tolua_S,"fullscreen",tolua_get_Graphics_fullscreen,NULL);
  tolua_variable(tolua_S,"resizable",tolua_get_Graphics_resizable,NULL);
  tolua_variable(tolua_S,"borderless",tolua_get_Graphics_borderless,NULL);
  tolua_variable(tolua_S,"vSync",tolua_get_Graphics_vSync,NULL);
  tolua_variable(tolua_S,"refreshRate",tolua_get_Graphics_refreshRate,NULL);
  tolua_variable(tolua_S,"monitor",tolua_get_Graphics_monitor,NULL);
  tolua_variable(tolua_S,"tripleBuffer",tolua_get_Graphics_tripleBuffer,NULL);
  tolua_variable(tolua_S,"sRGB",tolua_get_Graphics_sRGB,tolua_set_Graphics_sRGB);
  tolua_variable(tolua_S,"dither",tolua_get_Graphics_dither,tolua_set_Graphics_dither);
  tolua_variable(tolua_S,"flushGPU",tolua_get_Graphics_flushGPU,tolua_set_Graphics_flushGPU);
  tolua_variable(tolua_S,"orientations",tolua_get_Graphics_orientations,tolua_set_Graphics_orientations);
  tolua_variable(tolua_S,"deviceLost",tolua_get_Graphics_deviceLost,NULL);
  tolua_variable(tolua_S,"numPrimitives",tolua_get_Graphics_numPrimitives,NULL);
  tolua_variable(tolua_S,"numBatches",tolua_get_Graphics_numBatches,NULL);
  tolua_variable(tolua_S,"dummyColorFormat",tolua_get_Graphics_dummyColorFormat,NULL);
  tolua_variable(tolua_S,"shadowMapFormat",tolua_get_Graphics_shadowMapFormat,NULL);
  tolua_variable(tolua_S,"hiresShadowMapFormat",tolua_get_Graphics_hiresShadowMapFormat,NULL);
  tolua_variable(tolua_S,"instancingSupport",tolua_get_Graphics_instancingSupport,NULL);
  tolua_variable(tolua_S,"lightPrepassSupport",tolua_get_Graphics_lightPrepassSupport,NULL);
  tolua_variable(tolua_S,"deferredSupport",tolua_get_Graphics_deferredSupport,NULL);
  tolua_variable(tolua_S,"hardwareShadowSupport",tolua_get_Graphics_hardwareShadowSupport,NULL);
  tolua_variable(tolua_S,"readableDepthSupport",tolua_get_Graphics_readableDepthSupport,NULL);
  tolua_variable(tolua_S,"sRGBSupport",tolua_get_Graphics_sRGBSupport,NULL);
  tolua_variable(tolua_S,"sRGBWriteSupport",tolua_get_Graphics_sRGBWriteSupport,NULL);
  tolua_variable(tolua_S,"monitorCount",tolua_get_Graphics_monitorCount,NULL);
  tolua_variable(tolua_S,"shaderCacheDir",tolua_get_Graphics_shaderCacheDir,tolua_set_Graphics_shaderCacheDir);
 tolua_endmodule(tolua_S);
 tolua_function(tolua_S,"GetGraphics",tolua_GraphicsLuaAPI_GetGraphics00);
 tolua_variable(tolua_S,"graphics",tolua_get_graphics_ptr,NULL);
 tolua_constant(tolua_S,"LIGHT_DIRECTIONAL",LIGHT_DIRECTIONAL);
 tolua_constant(tolua_S,"LIGHT_SPOT",LIGHT_SPOT);
 tolua_constant(tolua_S,"LIGHT_POINT",LIGHT_POINT);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"BiasParameters","BiasParameters","",tolua_collect_BiasParameters);
 #else
 tolua_cclass(tolua_S,"BiasParameters","BiasParameters","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"BiasParameters");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_BiasParameters_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_BiasParameters_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_BiasParameters_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_BiasParameters_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_BiasParameters_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_BiasParameters_new01_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_BiasParameters_delete00);
  tolua_variable(tolua_S,"constantBias",tolua_get_BiasParameters_constantBias,tolua_set_BiasParameters_constantBias);
  tolua_variable(tolua_S,"slopeScaledBias",tolua_get_BiasParameters_slopeScaledBias,tolua_set_BiasParameters_slopeScaledBias);
  tolua_variable(tolua_S,"normalOffset",tolua_get_BiasParameters_normalOffset,tolua_set_BiasParameters_normalOffset);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"CascadeParameters","CascadeParameters","",tolua_collect_CascadeParameters);
 #else
 tolua_cclass(tolua_S,"CascadeParameters","CascadeParameters","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"CascadeParameters");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_CascadeParameters_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_CascadeParameters_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_CascadeParameters_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_CascadeParameters_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_CascadeParameters_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_CascadeParameters_new01_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_CascadeParameters_delete00);
  tolua_variable(tolua_S,"fadeStart",tolua_get_CascadeParameters_fadeStart,tolua_set_CascadeParameters_fadeStart);
  tolua_variable(tolua_S,"biasAutoAdjust",tolua_get_CascadeParameters_biasAutoAdjust,tolua_set_CascadeParameters_biasAutoAdjust);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"FocusParameters","FocusParameters","",tolua_collect_FocusParameters);
 #else
 tolua_cclass(tolua_S,"FocusParameters","FocusParameters","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"FocusParameters");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_FocusParameters_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_FocusParameters_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_FocusParameters_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_FocusParameters_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_FocusParameters_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_FocusParameters_new01_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_FocusParameters_delete00);
  tolua_variable(tolua_S,"focus",tolua_get_FocusParameters_focus,tolua_set_FocusParameters_focus);
  tolua_variable(tolua_S,"nonUniform",tolua_get_FocusParameters_nonUniform,tolua_set_FocusParameters_nonUniform);
  tolua_variable(tolua_S,"autoSize",tolua_get_FocusParameters_autoSize,tolua_set_FocusParameters_autoSize);
  tolua_variable(tolua_S,"quantize",tolua_get_FocusParameters_quantize,tolua_set_FocusParameters_quantize);
  tolua_variable(tolua_S,"minView",tolua_get_FocusParameters_minView,tolua_set_FocusParameters_minView);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Light","Light","Drawable",NULL);
 tolua_beginmodule(tolua_S,"Light");
  tolua_function(tolua_S,"SetLightType",tolua_GraphicsLuaAPI_Light_SetLightType00);
  tolua_function(tolua_S,"SetPerVertex",tolua_GraphicsLuaAPI_Light_SetPerVertex00);
  tolua_function(tolua_S,"SetColor",tolua_GraphicsLuaAPI_Light_SetColor00);
  tolua_function(tolua_S,"SetTemperature",tolua_GraphicsLuaAPI_Light_SetTemperature00);
  tolua_function(tolua_S,"SetRadius",tolua_GraphicsLuaAPI_Light_SetRadius00);
  tolua_function(tolua_S,"SetLength",tolua_GraphicsLuaAPI_Light_SetLength00);
  tolua_function(tolua_S,"SetUsePhysicalValues",tolua_GraphicsLuaAPI_Light_SetUsePhysicalValues00);
  tolua_function(tolua_S,"SetSpecularIntensity",tolua_GraphicsLuaAPI_Light_SetSpecularIntensity00);
  tolua_function(tolua_S,"SetBrightness",tolua_GraphicsLuaAPI_Light_SetBrightness00);
  tolua_function(tolua_S,"SetRange",tolua_GraphicsLuaAPI_Light_SetRange00);
  tolua_function(tolua_S,"SetFov",tolua_GraphicsLuaAPI_Light_SetFov00);
  tolua_function(tolua_S,"SetAspectRatio",tolua_GraphicsLuaAPI_Light_SetAspectRatio00);
  tolua_function(tolua_S,"SetFadeDistance",tolua_GraphicsLuaAPI_Light_SetFadeDistance00);
  tolua_function(tolua_S,"SetShadowFadeDistance",tolua_GraphicsLuaAPI_Light_SetShadowFadeDistance00);
  tolua_function(tolua_S,"SetShadowBias",tolua_GraphicsLuaAPI_Light_SetShadowBias00);
  tolua_function(tolua_S,"SetShadowCascade",tolua_GraphicsLuaAPI_Light_SetShadowCascade00);
  tolua_function(tolua_S,"SetShadowFocus",tolua_GraphicsLuaAPI_Light_SetShadowFocus00);
  tolua_function(tolua_S,"SetShadowIntensity",tolua_GraphicsLuaAPI_Light_SetShadowIntensity00);
  tolua_function(tolua_S,"SetShadowResolution",tolua_GraphicsLuaAPI_Light_SetShadowResolution00);
  tolua_function(tolua_S,"SetShadowNearFarRatio",tolua_GraphicsLuaAPI_Light_SetShadowNearFarRatio00);
  tolua_function(tolua_S,"SetShadowMaxExtrusion",tolua_GraphicsLuaAPI_Light_SetShadowMaxExtrusion00);
  tolua_function(tolua_S,"SetRampTexture",tolua_GraphicsLuaAPI_Light_SetRampTexture00);
  tolua_function(tolua_S,"SetShapeTexture",tolua_GraphicsLuaAPI_Light_SetShapeTexture00);
  tolua_function(tolua_S,"GetLightType",tolua_GraphicsLuaAPI_Light_GetLightType00);
  tolua_function(tolua_S,"GetPerVertex",tolua_GraphicsLuaAPI_Light_GetPerVertex00);
  tolua_function(tolua_S,"GetColor",tolua_GraphicsLuaAPI_Light_GetColor00);
  tolua_function(tolua_S,"GetTemperature",tolua_GraphicsLuaAPI_Light_GetTemperature00);
  tolua_function(tolua_S,"GetRadius",tolua_GraphicsLuaAPI_Light_GetRadius00);
  tolua_function(tolua_S,"GetLength",tolua_GraphicsLuaAPI_Light_GetLength00);
  tolua_function(tolua_S,"GetSpecularIntensity",tolua_GraphicsLuaAPI_Light_GetSpecularIntensity00);
  tolua_function(tolua_S,"GetBrightness",tolua_GraphicsLuaAPI_Light_GetBrightness00);
  tolua_function(tolua_S,"GetEffectiveColor",tolua_GraphicsLuaAPI_Light_GetEffectiveColor00);
  tolua_function(tolua_S,"GetColorFromTemperature",tolua_GraphicsLuaAPI_Light_GetColorFromTemperature00);
  tolua_function(tolua_S,"GetUsePhysicalValues",tolua_GraphicsLuaAPI_Light_GetUsePhysicalValues00);
  tolua_function(tolua_S,"GetEffectiveSpecularIntensity",tolua_GraphicsLuaAPI_Light_GetEffectiveSpecularIntensity00);
  tolua_function(tolua_S,"GetRange",tolua_GraphicsLuaAPI_Light_GetRange00);
  tolua_function(tolua_S,"GetFov",tolua_GraphicsLuaAPI_Light_GetFov00);
  tolua_function(tolua_S,"GetAspectRatio",tolua_GraphicsLuaAPI_Light_GetAspectRatio00);
  tolua_function(tolua_S,"GetFadeDistance",tolua_GraphicsLuaAPI_Light_GetFadeDistance00);
  tolua_function(tolua_S,"GetShadowFadeDistance",tolua_GraphicsLuaAPI_Light_GetShadowFadeDistance00);
  tolua_function(tolua_S,"GetShadowBias",tolua_GraphicsLuaAPI_Light_GetShadowBias00);
  tolua_function(tolua_S,"GetShadowCascade",tolua_GraphicsLuaAPI_Light_GetShadowCascade00);
  tolua_function(tolua_S,"GetShadowFocus",tolua_GraphicsLuaAPI_Light_GetShadowFocus00);
  tolua_function(tolua_S,"GetShadowIntensity",tolua_GraphicsLuaAPI_Light_GetShadowIntensity00);
  tolua_function(tolua_S,"GetShadowResolution",tolua_GraphicsLuaAPI_Light_GetShadowResolution00);
  tolua_function(tolua_S,"GetShadowNearFarRatio",tolua_GraphicsLuaAPI_Light_GetShadowNearFarRatio00);
  tolua_function(tolua_S,"GetShadowMaxExtrusion",tolua_GraphicsLuaAPI_Light_GetShadowMaxExtrusion00);
  tolua_function(tolua_S,"GetRampTexture",tolua_GraphicsLuaAPI_Light_GetRampTexture00);
  tolua_function(tolua_S,"GetShapeTexture",tolua_GraphicsLuaAPI_Light_GetShapeTexture00);
  tolua_function(tolua_S,"GetFrustum",tolua_GraphicsLuaAPI_Light_GetFrustum00);
  tolua_function(tolua_S,"GetNumShadowSplits",tolua_GraphicsLuaAPI_Light_GetNumShadowSplits00);
  tolua_function(tolua_S,"IsNegative",tolua_GraphicsLuaAPI_Light_IsNegative00);
  tolua_variable(tolua_S,"lightType",tolua_get_Light_lightType,tolua_set_Light_lightType);
  tolua_variable(tolua_S,"perVertex",tolua_get_Light_perVertex,tolua_set_Light_perVertex);
  tolua_variable(tolua_S,"color",tolua_get_Light_color_ref,tolua_set_Light_color_ref);
  tolua_variable(tolua_S,"temperature",tolua_get_Light_temperature,tolua_set_Light_temperature);
  tolua_variable(tolua_S,"radius",tolua_get_Light_radius,tolua_set_Light_radius);
  tolua_variable(tolua_S,"length",tolua_get_Light_length,tolua_set_Light_length);
  tolua_variable(tolua_S,"usePhysicalValues",tolua_get_Light_usePhysicalValues,tolua_set_Light_usePhysicalValues);
  tolua_variable(tolua_S,"specularIntensity",tolua_get_Light_specularIntensity,tolua_set_Light_specularIntensity);
  tolua_variable(tolua_S,"brightness",tolua_get_Light_brightness,tolua_set_Light_brightness);
  tolua_variable(tolua_S,"range",tolua_get_Light_range,tolua_set_Light_range);
  tolua_variable(tolua_S,"fov",tolua_get_Light_fov,tolua_set_Light_fov);
  tolua_variable(tolua_S,"aspectRatio",tolua_get_Light_aspectRatio,tolua_set_Light_aspectRatio);
  tolua_variable(tolua_S,"fadeDistance",tolua_get_Light_fadeDistance,tolua_set_Light_fadeDistance);
  tolua_variable(tolua_S,"shadowFadeDistance",tolua_get_Light_shadowFadeDistance,tolua_set_Light_shadowFadeDistance);
  tolua_variable(tolua_S,"shadowBias",tolua_get_Light_shadowBias_ref,tolua_set_Light_shadowBias_ref);
  tolua_variable(tolua_S,"shadowCascade",tolua_get_Light_shadowCascade_ref,tolua_set_Light_shadowCascade_ref);
  tolua_variable(tolua_S,"shadowFocus",tolua_get_Light_shadowFocus_ref,tolua_set_Light_shadowFocus_ref);
  tolua_variable(tolua_S,"shadowIntensity",tolua_get_Light_shadowIntensity,tolua_set_Light_shadowIntensity);
  tolua_variable(tolua_S,"shadowResolution",tolua_get_Light_shadowResolution,tolua_set_Light_shadowResolution);
  tolua_variable(tolua_S,"shadowNearFarRatio",tolua_get_Light_shadowNearFarRatio,tolua_set_Light_shadowNearFarRatio);
  tolua_variable(tolua_S,"shadowMaxExtrusion",tolua_get_Light_shadowMaxExtrusion,tolua_set_Light_shadowMaxExtrusion);
  tolua_variable(tolua_S,"rampTexture",tolua_get_Light_rampTexture_ptr,tolua_set_Light_rampTexture_ptr);
  tolua_variable(tolua_S,"shapeTexture",tolua_get_Light_shapeTexture_ptr,tolua_set_Light_shapeTexture_ptr);
  tolua_variable(tolua_S,"frustum",tolua_get_Light_frustum,NULL);
  tolua_variable(tolua_S,"numShadowSplits",tolua_get_Light_numShadowSplits,NULL);
  tolua_variable(tolua_S,"negative",tolua_get_Light_negative,NULL);
  tolua_variable(tolua_S,"effectiveColor",tolua_get_Light_effectiveColor,NULL);
  tolua_variable(tolua_S,"effectiveSpecularIntensity",tolua_get_Light_effectiveSpecularIntensity,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Material","Material","Resource",tolua_collect_Material);
 #else
 tolua_cclass(tolua_S,"Material","Material","Resource",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Material");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Material_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Material_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Material_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Material_delete00);
  tolua_function(tolua_S,"SetNumTechniques",tolua_GraphicsLuaAPI_Material_SetNumTechniques00);
  tolua_function(tolua_S,"SetTechnique",tolua_GraphicsLuaAPI_Material_SetTechnique00);
  tolua_function(tolua_S,"SetVertexShaderDefines",tolua_GraphicsLuaAPI_Material_SetVertexShaderDefines00);
  tolua_function(tolua_S,"SetPixelShaderDefines",tolua_GraphicsLuaAPI_Material_SetPixelShaderDefines00);
  tolua_function(tolua_S,"SetShaderParameter",tolua_GraphicsLuaAPI_Material_SetShaderParameter00);
  tolua_function(tolua_S,"SetShaderParameterAnimation",tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimation00);
  tolua_function(tolua_S,"SetShaderParameterAnimationWrapMode",tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimationWrapMode00);
  tolua_function(tolua_S,"SetShaderParameterAnimationSpeed",tolua_GraphicsLuaAPI_Material_SetShaderParameterAnimationSpeed00);
  tolua_function(tolua_S,"SetTexture",tolua_GraphicsLuaAPI_Material_SetTexture00);
  tolua_function(tolua_S,"SetUVTransform",tolua_GraphicsLuaAPI_Material_SetUVTransform00);
  tolua_function(tolua_S,"SetUVTransform",tolua_GraphicsLuaAPI_Material_SetUVTransform01);
  tolua_function(tolua_S,"SetCullMode",tolua_GraphicsLuaAPI_Material_SetCullMode00);
  tolua_function(tolua_S,"SetShadowCullMode",tolua_GraphicsLuaAPI_Material_SetShadowCullMode00);
  tolua_function(tolua_S,"SetFillMode",tolua_GraphicsLuaAPI_Material_SetFillMode00);
  tolua_function(tolua_S,"SetDepthBias",tolua_GraphicsLuaAPI_Material_SetDepthBias00);
  tolua_function(tolua_S,"SetAlphaToCoverage",tolua_GraphicsLuaAPI_Material_SetAlphaToCoverage00);
  tolua_function(tolua_S,"SetLineAntiAlias",tolua_GraphicsLuaAPI_Material_SetLineAntiAlias00);
  tolua_function(tolua_S,"SetRenderOrder",tolua_GraphicsLuaAPI_Material_SetRenderOrder00);
  tolua_function(tolua_S,"SetOcclusion",tolua_GraphicsLuaAPI_Material_SetOcclusion00);
  tolua_function(tolua_S,"SetScene",tolua_GraphicsLuaAPI_Material_SetScene00);
  tolua_function(tolua_S,"RemoveShaderParameter",tolua_GraphicsLuaAPI_Material_RemoveShaderParameter00);
  tolua_function(tolua_S,"ReleaseShaders",tolua_GraphicsLuaAPI_Material_ReleaseShaders00);
  tolua_function(tolua_S,"Clone",tolua_GraphicsLuaAPI_Material_Clone00);
  tolua_function(tolua_S,"SortTechniques",tolua_GraphicsLuaAPI_Material_SortTechniques00);
  tolua_function(tolua_S,"MarkForAuxView",tolua_GraphicsLuaAPI_Material_MarkForAuxView00);
  tolua_function(tolua_S,"GetNumTechniques",tolua_GraphicsLuaAPI_Material_GetNumTechniques00);
  tolua_function(tolua_S,"GetTechnique",tolua_GraphicsLuaAPI_Material_GetTechnique00);
  tolua_function(tolua_S,"GetPass",tolua_GraphicsLuaAPI_Material_GetPass00);
  tolua_function(tolua_S,"GetTexture",tolua_GraphicsLuaAPI_Material_GetTexture00);
  tolua_function(tolua_S,"GetVertexShaderDefines",tolua_GraphicsLuaAPI_Material_GetVertexShaderDefines00);
  tolua_function(tolua_S,"GetPixelShaderDefines",tolua_GraphicsLuaAPI_Material_GetPixelShaderDefines00);
  tolua_function(tolua_S,"GetShaderParameterAnimation",tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimation00);
  tolua_function(tolua_S,"GetShaderParameterAnimationWrapMode",tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimationWrapMode00);
  tolua_function(tolua_S,"GetShaderParameterAnimationSpeed",tolua_GraphicsLuaAPI_Material_GetShaderParameterAnimationSpeed00);
  tolua_function(tolua_S,"GetCullMode",tolua_GraphicsLuaAPI_Material_GetCullMode00);
  tolua_function(tolua_S,"GetShadowCullMode",tolua_GraphicsLuaAPI_Material_GetShadowCullMode00);
  tolua_function(tolua_S,"GetFillMode",tolua_GraphicsLuaAPI_Material_GetFillMode00);
  tolua_function(tolua_S,"GetDepthBias",tolua_GraphicsLuaAPI_Material_GetDepthBias00);
  tolua_function(tolua_S,"GetAlphaToCoverage",tolua_GraphicsLuaAPI_Material_GetAlphaToCoverage00);
  tolua_function(tolua_S,"GetLineAntiAlias",tolua_GraphicsLuaAPI_Material_GetLineAntiAlias00);
  tolua_function(tolua_S,"GetRenderOrder",tolua_GraphicsLuaAPI_Material_GetRenderOrder00);
  tolua_function(tolua_S,"GetOcclusion",tolua_GraphicsLuaAPI_Material_GetOcclusion00);
  tolua_function(tolua_S,"GetSpecular",tolua_GraphicsLuaAPI_Material_GetSpecular00);
  tolua_function(tolua_S,"GetScene",tolua_GraphicsLuaAPI_Material_GetScene00);
  tolua_variable(tolua_S,"vertexShaderDefines",tolua_get_Material_vertexShaderDefines,tolua_set_Material_vertexShaderDefines);
  tolua_variable(tolua_S,"pixelShaderDefines",tolua_get_Material_pixelShaderDefines,tolua_set_Material_pixelShaderDefines);
  tolua_variable(tolua_S,"cullMode",tolua_get_Material_cullMode,tolua_set_Material_cullMode);
  tolua_variable(tolua_S,"shadowCullMode",tolua_get_Material_shadowCullMode,tolua_set_Material_shadowCullMode);
  tolua_variable(tolua_S,"fillMode",tolua_get_Material_fillMode,tolua_set_Material_fillMode);
  tolua_variable(tolua_S,"depthBias",tolua_get_Material_depthBias,tolua_set_Material_depthBias);
  tolua_variable(tolua_S,"alphaToCoverage",tolua_get_Material_alphaToCoverage,tolua_set_Material_alphaToCoverage);
  tolua_variable(tolua_S,"lineAntiAlias",tolua_get_Material_lineAntiAlias,tolua_set_Material_lineAntiAlias);
  tolua_variable(tolua_S,"renderOrder",tolua_get_Material_unsigned_renderOrder,tolua_set_Material_unsigned_renderOrder);
  tolua_variable(tolua_S,"occlusion",tolua_get_Material_occlusion,tolua_set_Material_occlusion);
  tolua_variable(tolua_S,"specular",tolua_get_Material_specular,NULL);
  tolua_variable(tolua_S,"scene",tolua_get_Material_scene_ptr,tolua_set_Material_scene_ptr);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"VertexBuffer","VertexBuffer","Object",tolua_collect_VertexBuffer);
 #else
 tolua_cclass(tolua_S,"VertexBuffer","VertexBuffer","Object",NULL);
 #endif
 tolua_beginmodule(tolua_S,"VertexBuffer");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_VertexBuffer_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_VertexBuffer_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_VertexBuffer_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_VertexBuffer_delete00);
  tolua_function(tolua_S,"SetShadowed",tolua_GraphicsLuaAPI_VertexBuffer_SetShadowed00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_VertexBuffer_SetSize00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_VertexBuffer_SetSize01);
  tolua_function(tolua_S,"SetData",tolua_GraphicsLuaAPI_VertexBuffer_SetData00);
  tolua_function(tolua_S,"SetDataRange",tolua_GraphicsLuaAPI_VertexBuffer_SetDataRange00);
  tolua_function(tolua_S,"GetData",tolua_GraphicsLuaAPI_VertexBuffer_GetData00);
  tolua_function(tolua_S,"IsShadowed",tolua_GraphicsLuaAPI_VertexBuffer_IsShadowed00);
  tolua_function(tolua_S,"IsDynamic",tolua_GraphicsLuaAPI_VertexBuffer_IsDynamic00);
  tolua_function(tolua_S,"GetVertexCount",tolua_GraphicsLuaAPI_VertexBuffer_GetVertexCount00);
  tolua_function(tolua_S,"GetVertexSize",tolua_GraphicsLuaAPI_VertexBuffer_GetVertexSize00);
  tolua_function(tolua_S,"GetElements",tolua_GraphicsLuaAPI_VertexBuffer_GetElements00);
  tolua_function(tolua_S,"HasElement",tolua_GraphicsLuaAPI_VertexBuffer_HasElement00);
  tolua_function(tolua_S,"HasElement",tolua_GraphicsLuaAPI_VertexBuffer_HasElement01);
  tolua_function(tolua_S,"GetElementOffset",tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset00);
  tolua_function(tolua_S,"GetElementOffset",tolua_GraphicsLuaAPI_VertexBuffer_GetElementOffset01);
  tolua_function(tolua_S,"GetElementMask",tolua_GraphicsLuaAPI_VertexBuffer_GetElementMask00);
  tolua_variable(tolua_S,"shadowed",tolua_get_VertexBuffer_shadowed,tolua_set_VertexBuffer_shadowed);
  tolua_variable(tolua_S,"dynamic",tolua_get_VertexBuffer_dynamic,NULL);
  tolua_variable(tolua_S,"vertexCount",tolua_get_VertexBuffer_vertexCount,NULL);
  tolua_variable(tolua_S,"vertexSize",tolua_get_VertexBuffer_vertexSize,NULL);
  tolua_variable(tolua_S,"elementMask",tolua_get_VertexBuffer_elementMask,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"IndexBuffer","IndexBuffer","Object",tolua_collect_IndexBuffer);
 #else
 tolua_cclass(tolua_S,"IndexBuffer","IndexBuffer","Object",NULL);
 #endif
 tolua_beginmodule(tolua_S,"IndexBuffer");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_IndexBuffer_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_IndexBuffer_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_IndexBuffer_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_IndexBuffer_delete00);
  tolua_function(tolua_S,"SetShadowed",tolua_GraphicsLuaAPI_IndexBuffer_SetShadowed00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_IndexBuffer_SetSize00);
  tolua_function(tolua_S,"SetData",tolua_GraphicsLuaAPI_IndexBuffer_SetData00);
  tolua_function(tolua_S,"SetDataRange",tolua_GraphicsLuaAPI_IndexBuffer_SetDataRange00);
  tolua_function(tolua_S,"GetData",tolua_GraphicsLuaAPI_IndexBuffer_GetData00);
  tolua_function(tolua_S,"IsShadowed",tolua_GraphicsLuaAPI_IndexBuffer_IsShadowed00);
  tolua_function(tolua_S,"IsDynamic",tolua_GraphicsLuaAPI_IndexBuffer_IsDynamic00);
  tolua_function(tolua_S,"GetIndexCount",tolua_GraphicsLuaAPI_IndexBuffer_GetIndexCount00);
  tolua_function(tolua_S,"GetIndexSize",tolua_GraphicsLuaAPI_IndexBuffer_GetIndexSize00);
  tolua_variable(tolua_S,"shadowed",tolua_get_IndexBuffer_shadowed,tolua_set_IndexBuffer_shadowed);
  tolua_variable(tolua_S,"dynamic",tolua_get_IndexBuffer_dynamic,NULL);
  tolua_variable(tolua_S,"indexCount",tolua_get_IndexBuffer_indexCount,NULL);
  tolua_variable(tolua_S,"indexSize",tolua_get_IndexBuffer_indexSize,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Geometry","Geometry","Object",tolua_collect_Geometry);
 #else
 tolua_cclass(tolua_S,"Geometry","Geometry","Object",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Geometry");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Geometry_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Geometry_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Geometry_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Geometry_delete00);
  tolua_function(tolua_S,"SetNumVertexBuffers",tolua_GraphicsLuaAPI_Geometry_SetNumVertexBuffers00);
  tolua_function(tolua_S,"SetVertexBuffer",tolua_GraphicsLuaAPI_Geometry_SetVertexBuffer00);
  tolua_function(tolua_S,"SetIndexBuffer",tolua_GraphicsLuaAPI_Geometry_SetIndexBuffer00);
  tolua_function(tolua_S,"SetDrawRange",tolua_GraphicsLuaAPI_Geometry_SetDrawRange00);
  tolua_function(tolua_S,"SetDrawRange",tolua_GraphicsLuaAPI_Geometry_SetDrawRange01);
  tolua_function(tolua_S,"SetLodDistance",tolua_GraphicsLuaAPI_Geometry_SetLodDistance00);
  tolua_function(tolua_S,"GetNumVertexBuffers",tolua_GraphicsLuaAPI_Geometry_GetNumVertexBuffers00);
  tolua_function(tolua_S,"GetVertexBuffer",tolua_GraphicsLuaAPI_Geometry_GetVertexBuffer00);
  tolua_function(tolua_S,"GetIndexBuffer",tolua_GraphicsLuaAPI_Geometry_GetIndexBuffer00);
  tolua_function(tolua_S,"GetPrimitiveType",tolua_GraphicsLuaAPI_Geometry_GetPrimitiveType00);
  tolua_function(tolua_S,"GetIndexStart",tolua_GraphicsLuaAPI_Geometry_GetIndexStart00);
  tolua_function(tolua_S,"GetIndexCount",tolua_GraphicsLuaAPI_Geometry_GetIndexCount00);
  tolua_function(tolua_S,"GetVertexStart",tolua_GraphicsLuaAPI_Geometry_GetVertexStart00);
  tolua_function(tolua_S,"GetVertexCount",tolua_GraphicsLuaAPI_Geometry_GetVertexCount00);
  tolua_function(tolua_S,"GetLodDistance",tolua_GraphicsLuaAPI_Geometry_GetLodDistance00);
  tolua_function(tolua_S,"IsEmpty",tolua_GraphicsLuaAPI_Geometry_IsEmpty00);
  tolua_variable(tolua_S,"numVertexBuffers",tolua_get_Geometry_numVertexBuffers,tolua_set_Geometry_numVertexBuffers);
  tolua_variable(tolua_S,"indexBuffer",tolua_get_Geometry_indexBuffer_ptr,tolua_set_Geometry_indexBuffer_ptr);
  tolua_variable(tolua_S,"primitiveType",tolua_get_Geometry_primitiveType,NULL);
  tolua_variable(tolua_S,"indexStart",tolua_get_Geometry_indexStart,NULL);
  tolua_variable(tolua_S,"indexCount",tolua_get_Geometry_indexCount,NULL);
  tolua_variable(tolua_S,"vertexStart",tolua_get_Geometry_vertexStart,NULL);
  tolua_variable(tolua_S,"vertexCount",tolua_get_Geometry_vertexCount,NULL);
  tolua_variable(tolua_S,"lodDistance",tolua_get_Geometry_lodDistance,tolua_set_Geometry_lodDistance);
  tolua_variable(tolua_S,"empty",tolua_get_Geometry_empty,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Model","Model","ResourceWithMetadata",tolua_collect_Model);
 #else
 tolua_cclass(tolua_S,"Model","Model","ResourceWithMetadata",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Model");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Model_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Model_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Model_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Model_delete00);
  tolua_function(tolua_S,"Clone",tolua_GraphicsLuaAPI_Model_Clone00);
  tolua_function(tolua_S,"SetBoundingBox",tolua_GraphicsLuaAPI_Model_SetBoundingBox00);
  tolua_function(tolua_S,"SetVertexBuffers",tolua_GraphicsLuaAPI_Model_SetVertexBuffers00);
  tolua_function(tolua_S,"SetIndexBuffers",tolua_GraphicsLuaAPI_Model_SetIndexBuffers00);
  tolua_function(tolua_S,"SetNumGeometries",tolua_GraphicsLuaAPI_Model_SetNumGeometries00);
  tolua_function(tolua_S,"SetNumGeometryLodLevels",tolua_GraphicsLuaAPI_Model_SetNumGeometryLodLevels00);
  tolua_function(tolua_S,"SetGeometry",tolua_GraphicsLuaAPI_Model_SetGeometry00);
  tolua_function(tolua_S,"SetGeometryCenter",tolua_GraphicsLuaAPI_Model_SetGeometryCenter00);
  tolua_function(tolua_S,"GetBoundingBox",tolua_GraphicsLuaAPI_Model_GetBoundingBox00);
  tolua_function(tolua_S,"GetSkeleton",tolua_GraphicsLuaAPI_Model_GetSkeleton00);
  tolua_function(tolua_S,"GetNumGeometries",tolua_GraphicsLuaAPI_Model_GetNumGeometries00);
  tolua_function(tolua_S,"GetNumGeometryLodLevels",tolua_GraphicsLuaAPI_Model_GetNumGeometryLodLevels00);
  tolua_function(tolua_S,"GetGeometry",tolua_GraphicsLuaAPI_Model_GetGeometry00);
  tolua_function(tolua_S,"GetGeometryCenter",tolua_GraphicsLuaAPI_Model_GetGeometryCenter00);
  tolua_function(tolua_S,"GetNumMorphs",tolua_GraphicsLuaAPI_Model_GetNumMorphs00);
  tolua_function(tolua_S,"GetMorph",tolua_GraphicsLuaAPI_Model_GetMorph00);
  tolua_function(tolua_S,"GetMorph",tolua_GraphicsLuaAPI_Model_GetMorph01);
  tolua_function(tolua_S,"GetMorph",tolua_GraphicsLuaAPI_Model_GetMorph02);
  tolua_function(tolua_S,"GetMorphRangeStart",tolua_GraphicsLuaAPI_Model_GetMorphRangeStart00);
  tolua_function(tolua_S,"GetMorphRangeCount",tolua_GraphicsLuaAPI_Model_GetMorphRangeCount00);
  tolua_variable(tolua_S,"boundingBox",tolua_get_Model_boundingBox_ref,tolua_set_Model_boundingBox_ref);
  tolua_variable(tolua_S,"skeleton",tolua_get_Model_skeleton,NULL);
  tolua_variable(tolua_S,"numGeometries",tolua_get_Model_numGeometries,tolua_set_Model_numGeometries);
  tolua_variable(tolua_S,"numMorphs",tolua_get_Model_numMorphs,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Octree","Octree","Component",NULL);
 tolua_beginmodule(tolua_S,"Octree");
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_Octree_SetSize00);
  tolua_function(tolua_S,"Update",tolua_GraphicsLuaAPI_Octree_Update00);
  tolua_function(tolua_S,"AddManualDrawable",tolua_GraphicsLuaAPI_Octree_AddManualDrawable00);
  tolua_function(tolua_S,"RemoveManualDrawable",tolua_GraphicsLuaAPI_Octree_RemoveManualDrawable00);
  tolua_function(tolua_S,"GetDrawables",tolua_GraphicsLuaAPI_Octree_GetDrawables00);
  tolua_function(tolua_S,"GetDrawables",tolua_GraphicsLuaAPI_Octree_GetDrawables01);
  tolua_function(tolua_S,"GetDrawables",tolua_GraphicsLuaAPI_Octree_GetDrawables02);
  tolua_function(tolua_S,"GetDrawables",tolua_GraphicsLuaAPI_Octree_GetDrawables03);
  tolua_function(tolua_S,"GetAllDrawables",tolua_GraphicsLuaAPI_Octree_GetAllDrawables00);
  tolua_function(tolua_S,"Raycast",tolua_GraphicsLuaAPI_Octree_Raycast00);
  tolua_function(tolua_S,"RaycastSingle",tolua_GraphicsLuaAPI_Octree_RaycastSingle00);
  tolua_function(tolua_S,"GetNumLevels",tolua_GraphicsLuaAPI_Octree_GetNumLevels00);
  tolua_function(tolua_S,"QueueUpdate",tolua_GraphicsLuaAPI_Octree_QueueUpdate00);
  tolua_function(tolua_S,"DrawDebugGeometry",tolua_GraphicsLuaAPI_Octree_DrawDebugGeometry00);
  tolua_variable(tolua_S,"numLevels",tolua_get_Octree_numLevels,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"OctreeQueryResult","OctreeQueryResult","",tolua_collect_OctreeQueryResult);
 #else
 tolua_cclass(tolua_S,"OctreeQueryResult","OctreeQueryResult","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"OctreeQueryResult");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_OctreeQueryResult_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_OctreeQueryResult_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_OctreeQueryResult_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_OctreeQueryResult_delete00);
  tolua_variable(tolua_S,"drawable",tolua_get_OctreeQueryResult_drawable_ptr,tolua_set_OctreeQueryResult_drawable_ptr);
  tolua_variable(tolua_S,"node",tolua_get_OctreeQueryResult_node_ptr,tolua_set_OctreeQueryResult_node_ptr);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"RAY_AABB",RAY_AABB);
 tolua_constant(tolua_S,"RAY_OBB",RAY_OBB);
 tolua_constant(tolua_S,"RAY_TRIANGLE",RAY_TRIANGLE);
 tolua_constant(tolua_S,"RAY_TRIANGLE_UV",RAY_TRIANGLE_UV);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"RayQueryResult","RayQueryResult","",tolua_collect_RayQueryResult);
 #else
 tolua_cclass(tolua_S,"RayQueryResult","RayQueryResult","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"RayQueryResult");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_RayQueryResult_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_RayQueryResult_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_RayQueryResult_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_RayQueryResult_delete00);
  tolua_variable(tolua_S,"position",tolua_get_RayQueryResult_position,tolua_set_RayQueryResult_position);
  tolua_variable(tolua_S,"normal",tolua_get_RayQueryResult_normal,tolua_set_RayQueryResult_normal);
  tolua_variable(tolua_S,"textureUV",tolua_get_RayQueryResult_textureUV,tolua_set_RayQueryResult_textureUV);
  tolua_variable(tolua_S,"distance",tolua_get_RayQueryResult_distance,tolua_set_RayQueryResult_distance);
  tolua_variable(tolua_S,"drawable",tolua_get_RayQueryResult_drawable_ptr,tolua_set_RayQueryResult_drawable_ptr);
  tolua_variable(tolua_S,"node",tolua_get_RayQueryResult_node_ptr,tolua_set_RayQueryResult_node_ptr);
  tolua_variable(tolua_S,"subObject",tolua_get_RayQueryResult_subObject,tolua_set_RayQueryResult_subObject);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"EMITTER_SPHERE",EMITTER_SPHERE);
 tolua_constant(tolua_S,"EMITTER_BOX",EMITTER_BOX);
 tolua_constant(tolua_S,"EMITTER_SPHEREVOLUME",EMITTER_SPHEREVOLUME);
 tolua_constant(tolua_S,"EMITTER_CYLINDER",EMITTER_CYLINDER);
 tolua_constant(tolua_S,"EMITTER_RING",EMITTER_RING);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"ColorFrame","ColorFrame","",tolua_collect_ColorFrame);
 #else
 tolua_cclass(tolua_S,"ColorFrame","ColorFrame","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"ColorFrame");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_ColorFrame_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_ColorFrame_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_ColorFrame_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_ColorFrame_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_ColorFrame_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_ColorFrame_new01_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_ColorFrame_new02);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_ColorFrame_new02_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_ColorFrame_new02_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_ColorFrame_delete00);
  tolua_function(tolua_S,"Interpolate",tolua_GraphicsLuaAPI_ColorFrame_Interpolate00);
  tolua_variable(tolua_S,"color",tolua_get_ColorFrame_color,tolua_set_ColorFrame_color);
  tolua_variable(tolua_S,"time",tolua_get_ColorFrame_time,tolua_set_ColorFrame_time);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"TextureFrame","TextureFrame","",tolua_collect_TextureFrame);
 #else
 tolua_cclass(tolua_S,"TextureFrame","TextureFrame","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"TextureFrame");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_TextureFrame_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_TextureFrame_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_TextureFrame_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_TextureFrame_delete00);
  tolua_variable(tolua_S,"uv",tolua_get_TextureFrame_uv,tolua_set_TextureFrame_uv);
  tolua_variable(tolua_S,"time",tolua_get_TextureFrame_time,tolua_set_TextureFrame_time);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"ParticleEffect","ParticleEffect","Resource",tolua_collect_ParticleEffect);
 #else
 tolua_cclass(tolua_S,"ParticleEffect","ParticleEffect","Resource",NULL);
 #endif
 tolua_beginmodule(tolua_S,"ParticleEffect");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_ParticleEffect_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_ParticleEffect_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_ParticleEffect_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_ParticleEffect_delete00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_ParticleEffect_SetMaterial00);
  tolua_function(tolua_S,"SetNumParticles",tolua_GraphicsLuaAPI_ParticleEffect_SetNumParticles00);
  tolua_function(tolua_S,"SetUpdateInvisible",tolua_GraphicsLuaAPI_ParticleEffect_SetUpdateInvisible00);
  tolua_function(tolua_S,"SetRelative",tolua_GraphicsLuaAPI_ParticleEffect_SetRelative00);
  tolua_function(tolua_S,"SetScaled",tolua_GraphicsLuaAPI_ParticleEffect_SetScaled00);
  tolua_function(tolua_S,"SetSorted",tolua_GraphicsLuaAPI_ParticleEffect_SetSorted00);
  tolua_function(tolua_S,"SetFixedScreenSize",tolua_GraphicsLuaAPI_ParticleEffect_SetFixedScreenSize00);
  tolua_function(tolua_S,"SetAnimationLodBias",tolua_GraphicsLuaAPI_ParticleEffect_SetAnimationLodBias00);
  tolua_function(tolua_S,"SetEmitterType",tolua_GraphicsLuaAPI_ParticleEffect_SetEmitterType00);
  tolua_function(tolua_S,"SetEmitterSize",tolua_GraphicsLuaAPI_ParticleEffect_SetEmitterSize00);
  tolua_function(tolua_S,"SetMinDirection",tolua_GraphicsLuaAPI_ParticleEffect_SetMinDirection00);
  tolua_function(tolua_S,"SetMaxDirection",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxDirection00);
  tolua_function(tolua_S,"SetConstantForce",tolua_GraphicsLuaAPI_ParticleEffect_SetConstantForce00);
  tolua_function(tolua_S,"SetDampingForce",tolua_GraphicsLuaAPI_ParticleEffect_SetDampingForce00);
  tolua_function(tolua_S,"SetActiveTime",tolua_GraphicsLuaAPI_ParticleEffect_SetActiveTime00);
  tolua_function(tolua_S,"SetInactiveTime",tolua_GraphicsLuaAPI_ParticleEffect_SetInactiveTime00);
  tolua_function(tolua_S,"SetMinEmissionRate",tolua_GraphicsLuaAPI_ParticleEffect_SetMinEmissionRate00);
  tolua_function(tolua_S,"SetMaxEmissionRate",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxEmissionRate00);
  tolua_function(tolua_S,"SetMinParticleSize",tolua_GraphicsLuaAPI_ParticleEffect_SetMinParticleSize00);
  tolua_function(tolua_S,"SetMaxParticleSize",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxParticleSize00);
  tolua_function(tolua_S,"SetMinTimeToLive",tolua_GraphicsLuaAPI_ParticleEffect_SetMinTimeToLive00);
  tolua_function(tolua_S,"SetMaxTimeToLive",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxTimeToLive00);
  tolua_function(tolua_S,"SetMinVelocity",tolua_GraphicsLuaAPI_ParticleEffect_SetMinVelocity00);
  tolua_function(tolua_S,"SetMaxVelocity",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxVelocity00);
  tolua_function(tolua_S,"SetMinRotation",tolua_GraphicsLuaAPI_ParticleEffect_SetMinRotation00);
  tolua_function(tolua_S,"SetMaxRotation",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxRotation00);
  tolua_function(tolua_S,"SetMinRotationSpeed",tolua_GraphicsLuaAPI_ParticleEffect_SetMinRotationSpeed00);
  tolua_function(tolua_S,"SetMaxRotationSpeed",tolua_GraphicsLuaAPI_ParticleEffect_SetMaxRotationSpeed00);
  tolua_function(tolua_S,"SetSizeAdd",tolua_GraphicsLuaAPI_ParticleEffect_SetSizeAdd00);
  tolua_function(tolua_S,"SetSizeMul",tolua_GraphicsLuaAPI_ParticleEffect_SetSizeMul00);
  tolua_function(tolua_S,"AddColorTime",tolua_GraphicsLuaAPI_ParticleEffect_AddColorTime00);
  tolua_function(tolua_S,"AddColorFrame",tolua_GraphicsLuaAPI_ParticleEffect_AddColorFrame00);
  tolua_function(tolua_S,"RemoveColorFrame",tolua_GraphicsLuaAPI_ParticleEffect_RemoveColorFrame00);
  tolua_function(tolua_S,"SetColorFrame",tolua_GraphicsLuaAPI_ParticleEffect_SetColorFrame00);
  tolua_function(tolua_S,"SetNumColorFrames",tolua_GraphicsLuaAPI_ParticleEffect_SetNumColorFrames00);
  tolua_function(tolua_S,"SortColorFrames",tolua_GraphicsLuaAPI_ParticleEffect_SortColorFrames00);
  tolua_function(tolua_S,"AddTextureTime",tolua_GraphicsLuaAPI_ParticleEffect_AddTextureTime00);
  tolua_function(tolua_S,"AddTextureFrame",tolua_GraphicsLuaAPI_ParticleEffect_AddTextureFrame00);
  tolua_function(tolua_S,"RemoveTextureFrame",tolua_GraphicsLuaAPI_ParticleEffect_RemoveTextureFrame00);
  tolua_function(tolua_S,"SetTextureFrame",tolua_GraphicsLuaAPI_ParticleEffect_SetTextureFrame00);
  tolua_function(tolua_S,"SetNumTextureFrames",tolua_GraphicsLuaAPI_ParticleEffect_SetNumTextureFrames00);
  tolua_function(tolua_S,"SortTextureFrames",tolua_GraphicsLuaAPI_ParticleEffect_SortTextureFrames00);
  tolua_function(tolua_S,"Clone",tolua_GraphicsLuaAPI_ParticleEffect_Clone00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_ParticleEffect_GetMaterial00);
  tolua_function(tolua_S,"GetNumParticles",tolua_GraphicsLuaAPI_ParticleEffect_GetNumParticles00);
  tolua_function(tolua_S,"GetUpdateInvisible",tolua_GraphicsLuaAPI_ParticleEffect_GetUpdateInvisible00);
  tolua_function(tolua_S,"IsRelative",tolua_GraphicsLuaAPI_ParticleEffect_IsRelative00);
  tolua_function(tolua_S,"IsScaled",tolua_GraphicsLuaAPI_ParticleEffect_IsScaled00);
  tolua_function(tolua_S,"IsSorted",tolua_GraphicsLuaAPI_ParticleEffect_IsSorted00);
  tolua_function(tolua_S,"IsFixedScreenSize",tolua_GraphicsLuaAPI_ParticleEffect_IsFixedScreenSize00);
  tolua_function(tolua_S,"GetAnimationLodBias",tolua_GraphicsLuaAPI_ParticleEffect_GetAnimationLodBias00);
  tolua_function(tolua_S,"GetEmitterType",tolua_GraphicsLuaAPI_ParticleEffect_GetEmitterType00);
  tolua_function(tolua_S,"GetEmitterSize",tolua_GraphicsLuaAPI_ParticleEffect_GetEmitterSize00);
  tolua_function(tolua_S,"GetMinDirection",tolua_GraphicsLuaAPI_ParticleEffect_GetMinDirection00);
  tolua_function(tolua_S,"GetMaxDirection",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxDirection00);
  tolua_function(tolua_S,"GetConstantForce",tolua_GraphicsLuaAPI_ParticleEffect_GetConstantForce00);
  tolua_function(tolua_S,"GetDampingForce",tolua_GraphicsLuaAPI_ParticleEffect_GetDampingForce00);
  tolua_function(tolua_S,"GetActiveTime",tolua_GraphicsLuaAPI_ParticleEffect_GetActiveTime00);
  tolua_function(tolua_S,"GetInactiveTime",tolua_GraphicsLuaAPI_ParticleEffect_GetInactiveTime00);
  tolua_function(tolua_S,"GetMinEmissionRate",tolua_GraphicsLuaAPI_ParticleEffect_GetMinEmissionRate00);
  tolua_function(tolua_S,"GetMaxEmissionRate",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxEmissionRate00);
  tolua_function(tolua_S,"GetMinParticleSize",tolua_GraphicsLuaAPI_ParticleEffect_GetMinParticleSize00);
  tolua_function(tolua_S,"GetMaxParticleSize",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxParticleSize00);
  tolua_function(tolua_S,"GetMinTimeToLive",tolua_GraphicsLuaAPI_ParticleEffect_GetMinTimeToLive00);
  tolua_function(tolua_S,"GetMaxTimeToLive",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxTimeToLive00);
  tolua_function(tolua_S,"GetMinVelocity",tolua_GraphicsLuaAPI_ParticleEffect_GetMinVelocity00);
  tolua_function(tolua_S,"GetMaxVelocity",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxVelocity00);
  tolua_function(tolua_S,"GetMinRotation",tolua_GraphicsLuaAPI_ParticleEffect_GetMinRotation00);
  tolua_function(tolua_S,"GetMaxRotation",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxRotation00);
  tolua_function(tolua_S,"GetMinRotationSpeed",tolua_GraphicsLuaAPI_ParticleEffect_GetMinRotationSpeed00);
  tolua_function(tolua_S,"GetMaxRotationSpeed",tolua_GraphicsLuaAPI_ParticleEffect_GetMaxRotationSpeed00);
  tolua_function(tolua_S,"GetSizeAdd",tolua_GraphicsLuaAPI_ParticleEffect_GetSizeAdd00);
  tolua_function(tolua_S,"GetSizeMul",tolua_GraphicsLuaAPI_ParticleEffect_GetSizeMul00);
  tolua_function(tolua_S,"GetNumColorFrames",tolua_GraphicsLuaAPI_ParticleEffect_GetNumColorFrames00);
  tolua_function(tolua_S,"GetColorFrame",tolua_GraphicsLuaAPI_ParticleEffect_GetColorFrame00);
  tolua_function(tolua_S,"GetNumTextureFrames",tolua_GraphicsLuaAPI_ParticleEffect_GetNumTextureFrames00);
  tolua_function(tolua_S,"GetTextureFrame",tolua_GraphicsLuaAPI_ParticleEffect_GetTextureFrame00);
  tolua_variable(tolua_S,"material",tolua_get_ParticleEffect_material_ptr,tolua_set_ParticleEffect_material_ptr);
  tolua_variable(tolua_S,"numParticles",tolua_get_ParticleEffect_numParticles,tolua_set_ParticleEffect_numParticles);
  tolua_variable(tolua_S,"updateInvisible",tolua_get_ParticleEffect_updateInvisible,tolua_set_ParticleEffect_updateInvisible);
  tolua_variable(tolua_S,"relative",tolua_get_ParticleEffect_relative,tolua_set_ParticleEffect_relative);
  tolua_variable(tolua_S,"scaled",tolua_get_ParticleEffect_scaled,tolua_set_ParticleEffect_scaled);
  tolua_variable(tolua_S,"sorted",tolua_get_ParticleEffect_sorted,tolua_set_ParticleEffect_sorted);
  tolua_variable(tolua_S,"fixedScreenSize",tolua_get_ParticleEffect_fixedScreenSize,tolua_set_ParticleEffect_fixedScreenSize);
  tolua_variable(tolua_S,"animationLodBias",tolua_get_ParticleEffect_animationLodBias,tolua_set_ParticleEffect_animationLodBias);
  tolua_variable(tolua_S,"emitterType",tolua_get_ParticleEffect_emitterType,tolua_set_ParticleEffect_emitterType);
  tolua_variable(tolua_S,"emitterSize",tolua_get_ParticleEffect_emitterSize_ref,NULL);
  tolua_variable(tolua_S,"minDirection",tolua_get_ParticleEffect_minDirection_ref,NULL);
  tolua_variable(tolua_S,"maxDirection",tolua_get_ParticleEffect_maxDirection_ref,NULL);
  tolua_variable(tolua_S,"constantForce",tolua_get_ParticleEffect_constantForce_ref,NULL);
  tolua_variable(tolua_S,"dampingForce",tolua_get_ParticleEffect_dampingForce,tolua_set_ParticleEffect_dampingForce);
  tolua_variable(tolua_S,"activeTime",tolua_get_ParticleEffect_activeTime,tolua_set_ParticleEffect_activeTime);
  tolua_variable(tolua_S,"inactiveTime",tolua_get_ParticleEffect_inactiveTime,tolua_set_ParticleEffect_inactiveTime);
  tolua_variable(tolua_S,"minEmissionRate",tolua_get_ParticleEffect_minEmissionRate,tolua_set_ParticleEffect_minEmissionRate);
  tolua_variable(tolua_S,"maxEmissionRate",tolua_get_ParticleEffect_maxEmissionRate,tolua_set_ParticleEffect_maxEmissionRate);
  tolua_variable(tolua_S,"minParticleSize",tolua_get_ParticleEffect_minParticleSize_ref,NULL);
  tolua_variable(tolua_S,"maxParticleSize",tolua_get_ParticleEffect_maxParticleSize_ref,NULL);
  tolua_variable(tolua_S,"minTimeToLive",tolua_get_ParticleEffect_minTimeToLive,tolua_set_ParticleEffect_minTimeToLive);
  tolua_variable(tolua_S,"maxTimeToLive",tolua_get_ParticleEffect_maxTimeToLive,tolua_set_ParticleEffect_maxTimeToLive);
  tolua_variable(tolua_S,"minVelocity",tolua_get_ParticleEffect_minVelocity,tolua_set_ParticleEffect_minVelocity);
  tolua_variable(tolua_S,"maxVelocity",tolua_get_ParticleEffect_maxVelocity,tolua_set_ParticleEffect_maxVelocity);
  tolua_variable(tolua_S,"minRotation",tolua_get_ParticleEffect_minRotation,tolua_set_ParticleEffect_minRotation);
  tolua_variable(tolua_S,"maxRotation",tolua_get_ParticleEffect_maxRotation,tolua_set_ParticleEffect_maxRotation);
  tolua_variable(tolua_S,"minRotationSpeed",tolua_get_ParticleEffect_minRotationSpeed,tolua_set_ParticleEffect_minRotationSpeed);
  tolua_variable(tolua_S,"maxRotationSpeed",tolua_get_ParticleEffect_maxRotationSpeed,tolua_set_ParticleEffect_maxRotationSpeed);
  tolua_variable(tolua_S,"sizeAdd",tolua_get_ParticleEffect_sizeAdd,tolua_set_ParticleEffect_sizeAdd);
  tolua_variable(tolua_S,"sizeMul",tolua_get_ParticleEffect_sizeMul,tolua_set_ParticleEffect_sizeMul);
  tolua_variable(tolua_S,"numColorFrames",tolua_get_ParticleEffect_numColorFrames,tolua_set_ParticleEffect_numColorFrames);
  tolua_variable(tolua_S,"numTextureFrames",tolua_get_ParticleEffect_numTextureFrames,tolua_set_ParticleEffect_numTextureFrames);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"ParticleEmitter","ParticleEmitter","BillboardSet",NULL);
 tolua_beginmodule(tolua_S,"ParticleEmitter");
  tolua_function(tolua_S,"SetEffect",tolua_GraphicsLuaAPI_ParticleEmitter_SetEffect00);
  tolua_function(tolua_S,"SetNumParticles",tolua_GraphicsLuaAPI_ParticleEmitter_SetNumParticles00);
  tolua_function(tolua_S,"SetEmitting",tolua_GraphicsLuaAPI_ParticleEmitter_SetEmitting00);
  tolua_function(tolua_S,"SetSerializeParticles",tolua_GraphicsLuaAPI_ParticleEmitter_SetSerializeParticles00);
  tolua_function(tolua_S,"SetAutoRemoveMode",tolua_GraphicsLuaAPI_ParticleEmitter_SetAutoRemoveMode00);
  tolua_function(tolua_S,"ResetEmissionTimer",tolua_GraphicsLuaAPI_ParticleEmitter_ResetEmissionTimer00);
  tolua_function(tolua_S,"RemoveAllParticles",tolua_GraphicsLuaAPI_ParticleEmitter_RemoveAllParticles00);
  tolua_function(tolua_S,"Reset",tolua_GraphicsLuaAPI_ParticleEmitter_Reset00);
  tolua_function(tolua_S,"ApplyEffect",tolua_GraphicsLuaAPI_ParticleEmitter_ApplyEffect00);
  tolua_function(tolua_S,"GetEffect",tolua_GraphicsLuaAPI_ParticleEmitter_GetEffect00);
  tolua_function(tolua_S,"GetNumParticles",tolua_GraphicsLuaAPI_ParticleEmitter_GetNumParticles00);
  tolua_function(tolua_S,"IsEmitting",tolua_GraphicsLuaAPI_ParticleEmitter_IsEmitting00);
  tolua_function(tolua_S,"GetSerializeParticles",tolua_GraphicsLuaAPI_ParticleEmitter_GetSerializeParticles00);
  tolua_function(tolua_S,"GetAutoRemoveMode",tolua_GraphicsLuaAPI_ParticleEmitter_GetAutoRemoveMode00);
  tolua_variable(tolua_S,"effect",tolua_get_ParticleEmitter_effect_ptr,tolua_set_ParticleEmitter_effect_ptr);
  tolua_variable(tolua_S,"numParticles",tolua_get_ParticleEmitter_numParticles,tolua_set_ParticleEmitter_numParticles);
  tolua_variable(tolua_S,"emitting",tolua_get_ParticleEmitter_emitting,tolua_set_ParticleEmitter_emitting);
  tolua_variable(tolua_S,"serializeParticles",tolua_get_ParticleEmitter_serializeParticles,tolua_set_ParticleEmitter_serializeParticles);
  tolua_variable(tolua_S,"autoRemoveMode",tolua_get_ParticleEmitter_autoRemoveMode,tolua_set_ParticleEmitter_autoRemoveMode);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Renderer","Renderer","",NULL);
 tolua_beginmodule(tolua_S,"Renderer");
  tolua_function(tolua_S,"SetNumViewports",tolua_GraphicsLuaAPI_Renderer_SetNumViewports00);
  tolua_function(tolua_S,"SetViewport",tolua_GraphicsLuaAPI_Renderer_SetViewport00);
  tolua_function(tolua_S,"SetDefaultRenderPath",tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath00);
  tolua_function(tolua_S,"SetDefaultRenderPath",tolua_GraphicsLuaAPI_Renderer_SetDefaultRenderPath01);
  tolua_function(tolua_S,"SetDefaultTechnique",tolua_GraphicsLuaAPI_Renderer_SetDefaultTechnique00);
  tolua_function(tolua_S,"SetHDRRendering",tolua_GraphicsLuaAPI_Renderer_SetHDRRendering00);
  tolua_function(tolua_S,"SetSpecularLighting",tolua_GraphicsLuaAPI_Renderer_SetSpecularLighting00);
  tolua_function(tolua_S,"SetTextureAnisotropy",tolua_GraphicsLuaAPI_Renderer_SetTextureAnisotropy00);
  tolua_function(tolua_S,"SetTextureFilterMode",tolua_GraphicsLuaAPI_Renderer_SetTextureFilterMode00);
  tolua_function(tolua_S,"SetTextureQuality",tolua_GraphicsLuaAPI_Renderer_SetTextureQuality00);
  tolua_function(tolua_S,"SetMaterialQuality",tolua_GraphicsLuaAPI_Renderer_SetMaterialQuality00);
  tolua_function(tolua_S,"SetDrawShadows",tolua_GraphicsLuaAPI_Renderer_SetDrawShadows00);
  tolua_function(tolua_S,"SetShadowMapSize",tolua_GraphicsLuaAPI_Renderer_SetShadowMapSize00);
  tolua_function(tolua_S,"SetShadowQuality",tolua_GraphicsLuaAPI_Renderer_SetShadowQuality00);
  tolua_function(tolua_S,"SetShadowSoftness",tolua_GraphicsLuaAPI_Renderer_SetShadowSoftness00);
  tolua_function(tolua_S,"SetVSMShadowParameters",tolua_GraphicsLuaAPI_Renderer_SetVSMShadowParameters00);
  tolua_function(tolua_S,"SetVSMMultiSample",tolua_GraphicsLuaAPI_Renderer_SetVSMMultiSample00);
  tolua_function(tolua_S,"SetReuseShadowMaps",tolua_GraphicsLuaAPI_Renderer_SetReuseShadowMaps00);
  tolua_function(tolua_S,"SetMaxShadowMaps",tolua_GraphicsLuaAPI_Renderer_SetMaxShadowMaps00);
  tolua_function(tolua_S,"SetDynamicInstancing",tolua_GraphicsLuaAPI_Renderer_SetDynamicInstancing00);
  tolua_function(tolua_S,"SetNumExtraInstancingBufferElements",tolua_GraphicsLuaAPI_Renderer_SetNumExtraInstancingBufferElements00);
  tolua_function(tolua_S,"SetMinInstances",tolua_GraphicsLuaAPI_Renderer_SetMinInstances00);
  tolua_function(tolua_S,"SetMaxSortedInstances",tolua_GraphicsLuaAPI_Renderer_SetMaxSortedInstances00);
  tolua_function(tolua_S,"SetMaxOccluderTriangles",tolua_GraphicsLuaAPI_Renderer_SetMaxOccluderTriangles00);
  tolua_function(tolua_S,"SetOcclusionBufferSize",tolua_GraphicsLuaAPI_Renderer_SetOcclusionBufferSize00);
  tolua_function(tolua_S,"SetOccluderSizeThreshold",tolua_GraphicsLuaAPI_Renderer_SetOccluderSizeThreshold00);
  tolua_function(tolua_S,"SetThreadedOcclusion",tolua_GraphicsLuaAPI_Renderer_SetThreadedOcclusion00);
  tolua_function(tolua_S,"SetMobileShadowBiasMul",tolua_GraphicsLuaAPI_Renderer_SetMobileShadowBiasMul00);
  tolua_function(tolua_S,"SetMobileShadowBiasAdd",tolua_GraphicsLuaAPI_Renderer_SetMobileShadowBiasAdd00);
  tolua_function(tolua_S,"SetMobileNormalOffsetMul",tolua_GraphicsLuaAPI_Renderer_SetMobileNormalOffsetMul00);
  tolua_function(tolua_S,"ReloadShaders",tolua_GraphicsLuaAPI_Renderer_ReloadShaders00);
  tolua_function(tolua_S,"GetNumViewports",tolua_GraphicsLuaAPI_Renderer_GetNumViewports00);
  tolua_function(tolua_S,"GetViewport",tolua_GraphicsLuaAPI_Renderer_GetViewport00);
  tolua_function(tolua_S,"GetViewportForScene",tolua_GraphicsLuaAPI_Renderer_GetViewportForScene00);
  tolua_function(tolua_S,"GetDefaultRenderPath",tolua_GraphicsLuaAPI_Renderer_GetDefaultRenderPath00);
  tolua_function(tolua_S,"GetDefaultTechnique",tolua_GraphicsLuaAPI_Renderer_GetDefaultTechnique00);
  tolua_function(tolua_S,"GetHDRRendering",tolua_GraphicsLuaAPI_Renderer_GetHDRRendering00);
  tolua_function(tolua_S,"GetSpecularLighting",tolua_GraphicsLuaAPI_Renderer_GetSpecularLighting00);
  tolua_function(tolua_S,"GetDrawShadows",tolua_GraphicsLuaAPI_Renderer_GetDrawShadows00);
  tolua_function(tolua_S,"GetTextureAnisotropy",tolua_GraphicsLuaAPI_Renderer_GetTextureAnisotropy00);
  tolua_function(tolua_S,"GetTextureFilterMode",tolua_GraphicsLuaAPI_Renderer_GetTextureFilterMode00);
  tolua_function(tolua_S,"GetTextureQuality",tolua_GraphicsLuaAPI_Renderer_GetTextureQuality00);
  tolua_function(tolua_S,"GetMaterialQuality",tolua_GraphicsLuaAPI_Renderer_GetMaterialQuality00);
  tolua_function(tolua_S,"GetShadowMapSize",tolua_GraphicsLuaAPI_Renderer_GetShadowMapSize00);
  tolua_function(tolua_S,"GetShadowQuality",tolua_GraphicsLuaAPI_Renderer_GetShadowQuality00);
  tolua_function(tolua_S,"GetShadowSoftness",tolua_GraphicsLuaAPI_Renderer_GetShadowSoftness00);
  tolua_function(tolua_S,"GetVSMShadowParameters",tolua_GraphicsLuaAPI_Renderer_GetVSMShadowParameters00);
  tolua_function(tolua_S,"GetVSMMultiSample",tolua_GraphicsLuaAPI_Renderer_GetVSMMultiSample00);
  tolua_function(tolua_S,"GetReuseShadowMaps",tolua_GraphicsLuaAPI_Renderer_GetReuseShadowMaps00);
  tolua_function(tolua_S,"GetMaxShadowMaps",tolua_GraphicsLuaAPI_Renderer_GetMaxShadowMaps00);
  tolua_function(tolua_S,"GetDynamicInstancing",tolua_GraphicsLuaAPI_Renderer_GetDynamicInstancing00);
  tolua_function(tolua_S,"GetNumExtraInstancingBufferElements",tolua_GraphicsLuaAPI_Renderer_GetNumExtraInstancingBufferElements00);
  tolua_function(tolua_S,"GetMinInstances",tolua_GraphicsLuaAPI_Renderer_GetMinInstances00);
  tolua_function(tolua_S,"GetMaxSortedInstances",tolua_GraphicsLuaAPI_Renderer_GetMaxSortedInstances00);
  tolua_function(tolua_S,"GetMaxOccluderTriangles",tolua_GraphicsLuaAPI_Renderer_GetMaxOccluderTriangles00);
  tolua_function(tolua_S,"GetOcclusionBufferSize",tolua_GraphicsLuaAPI_Renderer_GetOcclusionBufferSize00);
  tolua_function(tolua_S,"GetOccluderSizeThreshold",tolua_GraphicsLuaAPI_Renderer_GetOccluderSizeThreshold00);
  tolua_function(tolua_S,"GetThreadedOcclusion",tolua_GraphicsLuaAPI_Renderer_GetThreadedOcclusion00);
  tolua_function(tolua_S,"GetMobileShadowBiasMul",tolua_GraphicsLuaAPI_Renderer_GetMobileShadowBiasMul00);
  tolua_function(tolua_S,"GetMobileShadowBiasAdd",tolua_GraphicsLuaAPI_Renderer_GetMobileShadowBiasAdd00);
  tolua_function(tolua_S,"GetMobileNormalOffsetMul",tolua_GraphicsLuaAPI_Renderer_GetMobileNormalOffsetMul00);
  tolua_function(tolua_S,"GetNumViews",tolua_GraphicsLuaAPI_Renderer_GetNumViews00);
  tolua_function(tolua_S,"GetNumPrimitives",tolua_GraphicsLuaAPI_Renderer_GetNumPrimitives00);
  tolua_function(tolua_S,"GetNumBatches",tolua_GraphicsLuaAPI_Renderer_GetNumBatches00);
  tolua_function(tolua_S,"GetNumGeometries",tolua_GraphicsLuaAPI_Renderer_GetNumGeometries00);
  tolua_function(tolua_S,"GetNumLights",tolua_GraphicsLuaAPI_Renderer_GetNumLights00);
  tolua_function(tolua_S,"GetNumShadowMaps",tolua_GraphicsLuaAPI_Renderer_GetNumShadowMaps00);
  tolua_function(tolua_S,"GetNumOccluders",tolua_GraphicsLuaAPI_Renderer_GetNumOccluders00);
  tolua_function(tolua_S,"GetDefaultZone",tolua_GraphicsLuaAPI_Renderer_GetDefaultZone00);
  tolua_function(tolua_S,"GetDefaultMaterial",tolua_GraphicsLuaAPI_Renderer_GetDefaultMaterial00);
  tolua_function(tolua_S,"GetDefaultLightRamp",tolua_GraphicsLuaAPI_Renderer_GetDefaultLightRamp00);
  tolua_function(tolua_S,"GetDefaultLightSpot",tolua_GraphicsLuaAPI_Renderer_GetDefaultLightSpot00);
  tolua_function(tolua_S,"DrawDebugGeometry",tolua_GraphicsLuaAPI_Renderer_DrawDebugGeometry00);
  tolua_variable(tolua_S,"numViewports",tolua_get_Renderer_numViewports,tolua_set_Renderer_numViewports);
  tolua_variable(tolua_S,"defaultRenderPath",tolua_get_Renderer_defaultRenderPath_ptr,tolua_set_Renderer_defaultRenderPath_ptr);
  tolua_variable(tolua_S,"defaultTechnique",tolua_get_Renderer_defaultTechnique_ptr,tolua_set_Renderer_defaultTechnique_ptr);
  tolua_variable(tolua_S,"HDRRendering",tolua_get_Renderer_HDRRendering,tolua_set_Renderer_HDRRendering);
  tolua_variable(tolua_S,"specularLighting",tolua_get_Renderer_specularLighting,tolua_set_Renderer_specularLighting);
  tolua_variable(tolua_S,"drawShadows",tolua_get_Renderer_drawShadows,tolua_set_Renderer_drawShadows);
  tolua_variable(tolua_S,"textureAnisotropy",tolua_get_Renderer_textureAnisotropy,tolua_set_Renderer_textureAnisotropy);
  tolua_variable(tolua_S,"textureFilterMode",tolua_get_Renderer_textureFilterMode,tolua_set_Renderer_textureFilterMode);
  tolua_variable(tolua_S,"textureQuality",tolua_get_Renderer_textureQuality,tolua_set_Renderer_textureQuality);
  tolua_variable(tolua_S,"materialQuality",tolua_get_Renderer_materialQuality,tolua_set_Renderer_materialQuality);
  tolua_variable(tolua_S,"shadowMapSize",tolua_get_Renderer_shadowMapSize,tolua_set_Renderer_shadowMapSize);
  tolua_variable(tolua_S,"shadowQuality",tolua_get_Renderer_shadowQuality,tolua_set_Renderer_shadowQuality);
  tolua_variable(tolua_S,"shadowSoftness",tolua_get_Renderer_shadowSoftness,tolua_set_Renderer_shadowSoftness);
  tolua_variable(tolua_S,"VSMMultiSample",tolua_get_Renderer_VSMMultiSample,tolua_set_Renderer_VSMMultiSample);
  tolua_variable(tolua_S,"reuseShadowMaps",tolua_get_Renderer_reuseShadowMaps,tolua_set_Renderer_reuseShadowMaps);
  tolua_variable(tolua_S,"maxShadowMaps",tolua_get_Renderer_maxShadowMaps,tolua_set_Renderer_maxShadowMaps);
  tolua_variable(tolua_S,"dynamicInstancing",tolua_get_Renderer_dynamicInstancing,tolua_set_Renderer_dynamicInstancing);
  tolua_variable(tolua_S,"numExtraInstancingBufferElements",tolua_get_Renderer_numExtraInstancingBufferElements,tolua_set_Renderer_numExtraInstancingBufferElements);
  tolua_variable(tolua_S,"minInstances",tolua_get_Renderer_minInstances,tolua_set_Renderer_minInstances);
  tolua_variable(tolua_S,"maxSortedInstances",tolua_get_Renderer_maxSortedInstances,tolua_set_Renderer_maxSortedInstances);
  tolua_variable(tolua_S,"maxOccluderTriangles",tolua_get_Renderer_maxOccluderTriangles,tolua_set_Renderer_maxOccluderTriangles);
  tolua_variable(tolua_S,"occlusionBufferSize",tolua_get_Renderer_occlusionBufferSize,tolua_set_Renderer_occlusionBufferSize);
  tolua_variable(tolua_S,"occluderSizeThreshold",tolua_get_Renderer_occluderSizeThreshold,tolua_set_Renderer_occluderSizeThreshold);
  tolua_variable(tolua_S,"threadedOcclusion",tolua_get_Renderer_threadedOcclusion,tolua_set_Renderer_threadedOcclusion);
  tolua_variable(tolua_S,"mobileShadowBiasMul",tolua_get_Renderer_mobileShadowBiasMul,tolua_set_Renderer_mobileShadowBiasMul);
  tolua_variable(tolua_S,"mobileShadowBiasAdd",tolua_get_Renderer_mobileShadowBiasAdd,tolua_set_Renderer_mobileShadowBiasAdd);
  tolua_variable(tolua_S,"mobileNormalOffsetMul",tolua_get_Renderer_mobileNormalOffsetMul,tolua_set_Renderer_mobileNormalOffsetMul);
  tolua_variable(tolua_S,"numViews",tolua_get_Renderer_numViews,NULL);
  tolua_variable(tolua_S,"numPrimitives",tolua_get_Renderer_numPrimitives,NULL);
  tolua_variable(tolua_S,"numBatches",tolua_get_Renderer_numBatches,NULL);
  tolua_variable(tolua_S,"defaultZone",tolua_get_Renderer_defaultZone_ptr,NULL);
  tolua_variable(tolua_S,"defaultMaterial",tolua_get_Renderer_defaultMaterial_ptr,NULL);
  tolua_variable(tolua_S,"defaultLightRamp",tolua_get_Renderer_defaultLightRamp_ptr,NULL);
  tolua_variable(tolua_S,"defaultLightSpot",tolua_get_Renderer_defaultLightSpot_ptr,NULL);
 tolua_endmodule(tolua_S);
 tolua_function(tolua_S,"GetRenderer",tolua_GraphicsLuaAPI_GetRenderer00);
 tolua_variable(tolua_S,"renderer",tolua_get_renderer_ptr,NULL);
 tolua_constant(tolua_S,"CMD_NONE",CMD_NONE);
 tolua_constant(tolua_S,"CMD_CLEAR",CMD_CLEAR);
 tolua_constant(tolua_S,"CMD_SCENEPASS",CMD_SCENEPASS);
 tolua_constant(tolua_S,"CMD_QUAD",CMD_QUAD);
 tolua_constant(tolua_S,"CMD_FORWARDLIGHTS",CMD_FORWARDLIGHTS);
 tolua_constant(tolua_S,"CMD_LIGHTVOLUMES",CMD_LIGHTVOLUMES);
 tolua_constant(tolua_S,"CMD_RENDERUI",CMD_RENDERUI);
 tolua_constant(tolua_S,"CMD_SENDEVENT",CMD_SENDEVENT);
 tolua_constant(tolua_S,"SORT_FRONTTOBACK",SORT_FRONTTOBACK);
 tolua_constant(tolua_S,"SORT_BACKTOFRONT",SORT_BACKTOFRONT);
 tolua_constant(tolua_S,"SIZE_ABSOLUTE",SIZE_ABSOLUTE);
 tolua_constant(tolua_S,"SIZE_VIEWPORTDIVISOR",SIZE_VIEWPORTDIVISOR);
 tolua_constant(tolua_S,"SIZE_VIEWPORTMULTIPLIER",SIZE_VIEWPORTMULTIPLIER);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"RenderTargetInfo","RenderTargetInfo","",tolua_collect_RenderTargetInfo);
 #else
 tolua_cclass(tolua_S,"RenderTargetInfo","RenderTargetInfo","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"RenderTargetInfo");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_RenderTargetInfo_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_RenderTargetInfo_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_RenderTargetInfo_new00_local);
  tolua_function(tolua_S,"Load",tolua_GraphicsLuaAPI_RenderTargetInfo_Load00);
  tolua_variable(tolua_S,"name",tolua_get_RenderTargetInfo_name,tolua_set_RenderTargetInfo_name);
  tolua_variable(tolua_S,"tag",tolua_get_RenderTargetInfo_tag,tolua_set_RenderTargetInfo_tag);
  tolua_variable(tolua_S,"format",tolua_get_RenderTargetInfo_format,tolua_set_RenderTargetInfo_format);
  tolua_variable(tolua_S,"size",tolua_get_RenderTargetInfo_size,tolua_set_RenderTargetInfo_size);
  tolua_variable(tolua_S,"sizeMode",tolua_get_RenderTargetInfo_sizeMode,tolua_set_RenderTargetInfo_sizeMode);
  tolua_variable(tolua_S,"multiSample",tolua_get_RenderTargetInfo_multiSample,tolua_set_RenderTargetInfo_multiSample);
  tolua_variable(tolua_S,"autoResolve",tolua_get_RenderTargetInfo_autoResolve,tolua_set_RenderTargetInfo_autoResolve);
  tolua_variable(tolua_S,"enabled",tolua_get_RenderTargetInfo_enabled,tolua_set_RenderTargetInfo_enabled);
  tolua_variable(tolua_S,"cubemap",tolua_get_RenderTargetInfo_cubemap,tolua_set_RenderTargetInfo_cubemap);
  tolua_variable(tolua_S,"filtered",tolua_get_RenderTargetInfo_filtered,tolua_set_RenderTargetInfo_filtered);
  tolua_variable(tolua_S,"sRGB",tolua_get_RenderTargetInfo_sRGB,tolua_set_RenderTargetInfo_sRGB);
  tolua_variable(tolua_S,"persistent",tolua_get_RenderTargetInfo_persistent,tolua_set_RenderTargetInfo_persistent);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"RenderPathCommand","RenderPathCommand","",tolua_collect_RenderPathCommand);
 #else
 tolua_cclass(tolua_S,"RenderPathCommand","RenderPathCommand","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"RenderPathCommand");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_RenderPathCommand_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_RenderPathCommand_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_RenderPathCommand_new00_local);
  tolua_function(tolua_S,"Load",tolua_GraphicsLuaAPI_RenderPathCommand_Load00);
  tolua_function(tolua_S,"SetTextureName",tolua_GraphicsLuaAPI_RenderPathCommand_SetTextureName00);
  tolua_function(tolua_S,"SetShaderParameter",tolua_GraphicsLuaAPI_RenderPathCommand_SetShaderParameter00);
  tolua_function(tolua_S,"RemoveShaderParameter",tolua_GraphicsLuaAPI_RenderPathCommand_RemoveShaderParameter00);
  tolua_function(tolua_S,"SetNumOutputs",tolua_GraphicsLuaAPI_RenderPathCommand_SetNumOutputs00);
  tolua_function(tolua_S,"SetOutput",tolua_GraphicsLuaAPI_RenderPathCommand_SetOutput00);
  tolua_function(tolua_S,"SetOutputName",tolua_GraphicsLuaAPI_RenderPathCommand_SetOutputName00);
  tolua_function(tolua_S,"SetOutputFace",tolua_GraphicsLuaAPI_RenderPathCommand_SetOutputFace00);
  tolua_function(tolua_S,"SetDepthStencilName",tolua_GraphicsLuaAPI_RenderPathCommand_SetDepthStencilName00);
  tolua_function(tolua_S,"GetTextureName",tolua_GraphicsLuaAPI_RenderPathCommand_GetTextureName00);
  tolua_function(tolua_S,"GetShaderParameter",tolua_GraphicsLuaAPI_RenderPathCommand_GetShaderParameter00);
  tolua_function(tolua_S,"GetNumOutputs",tolua_GraphicsLuaAPI_RenderPathCommand_GetNumOutputs00);
  tolua_function(tolua_S,"GetOutputName",tolua_GraphicsLuaAPI_RenderPathCommand_GetOutputName00);
  tolua_function(tolua_S,"GetOutputFace",tolua_GraphicsLuaAPI_RenderPathCommand_GetOutputFace00);
  tolua_function(tolua_S,"GetDepthStencilName",tolua_GraphicsLuaAPI_RenderPathCommand_GetDepthStencilName00);
  tolua_variable(tolua_S,"tag",tolua_get_RenderPathCommand_tag,tolua_set_RenderPathCommand_tag);
  tolua_variable(tolua_S,"type",tolua_get_RenderPathCommand_type,tolua_set_RenderPathCommand_type);
  tolua_variable(tolua_S,"sortMode",tolua_get_RenderPathCommand_sortMode,tolua_set_RenderPathCommand_sortMode);
  tolua_variable(tolua_S,"pass",tolua_get_RenderPathCommand_pass,tolua_set_RenderPathCommand_pass);
  tolua_variable(tolua_S,"metadata",tolua_get_RenderPathCommand_metadata,tolua_set_RenderPathCommand_metadata);
  tolua_variable(tolua_S,"vertexShaderName",tolua_get_RenderPathCommand_vertexShaderName,tolua_set_RenderPathCommand_vertexShaderName);
  tolua_variable(tolua_S,"pixelShaderName",tolua_get_RenderPathCommand_pixelShaderName,tolua_set_RenderPathCommand_pixelShaderName);
  tolua_variable(tolua_S,"vertexShaderDefines",tolua_get_RenderPathCommand_vertexShaderDefines,tolua_set_RenderPathCommand_vertexShaderDefines);
  tolua_variable(tolua_S,"pixelShaderDefines",tolua_get_RenderPathCommand_pixelShaderDefines,tolua_set_RenderPathCommand_pixelShaderDefines);
  tolua_variable(tolua_S,"clearFlags",tolua_get_RenderPathCommand_clearFlags,tolua_set_RenderPathCommand_clearFlags);
  tolua_variable(tolua_S,"clearColor",tolua_get_RenderPathCommand_clearColor,tolua_set_RenderPathCommand_clearColor);
  tolua_variable(tolua_S,"clearDepth",tolua_get_RenderPathCommand_clearDepth,tolua_set_RenderPathCommand_clearDepth);
  tolua_variable(tolua_S,"clearStencil",tolua_get_RenderPathCommand_clearStencil,tolua_set_RenderPathCommand_clearStencil);
  tolua_variable(tolua_S,"blendMode",tolua_get_RenderPathCommand_blendMode,tolua_set_RenderPathCommand_blendMode);
  tolua_variable(tolua_S,"enabled",tolua_get_RenderPathCommand_enabled,tolua_set_RenderPathCommand_enabled);
  tolua_variable(tolua_S,"useFogColor",tolua_get_RenderPathCommand_useFogColor,tolua_set_RenderPathCommand_useFogColor);
  tolua_variable(tolua_S,"markToStencil",tolua_get_RenderPathCommand_markToStencil,tolua_set_RenderPathCommand_markToStencil);
  tolua_variable(tolua_S,"useLitBase",tolua_get_RenderPathCommand_useLitBase,tolua_set_RenderPathCommand_useLitBase);
  tolua_variable(tolua_S,"vertexLights",tolua_get_RenderPathCommand_vertexLights,tolua_set_RenderPathCommand_vertexLights);
  tolua_variable(tolua_S,"eventName",tolua_get_RenderPathCommand_eventName,tolua_set_RenderPathCommand_eventName);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"RenderPath","RenderPath","",NULL);
 tolua_beginmodule(tolua_S,"RenderPath");
  tolua_function(tolua_S,"Clone",tolua_GraphicsLuaAPI_RenderPath_Clone00);
  tolua_function(tolua_S,"Load",tolua_GraphicsLuaAPI_RenderPath_Load00);
  tolua_function(tolua_S,"Append",tolua_GraphicsLuaAPI_RenderPath_Append00);
  tolua_function(tolua_S,"SetEnabled",tolua_GraphicsLuaAPI_RenderPath_SetEnabled00);
  tolua_function(tolua_S,"IsEnabled",tolua_GraphicsLuaAPI_RenderPath_IsEnabled00);
  tolua_function(tolua_S,"IsAdded",tolua_GraphicsLuaAPI_RenderPath_IsAdded00);
  tolua_function(tolua_S,"ToggleEnabled",tolua_GraphicsLuaAPI_RenderPath_ToggleEnabled00);
  tolua_function(tolua_S,"SetRenderTarget",tolua_GraphicsLuaAPI_RenderPath_SetRenderTarget00);
  tolua_function(tolua_S,"AddRenderTarget",tolua_GraphicsLuaAPI_RenderPath_AddRenderTarget00);
  tolua_function(tolua_S,"RemoveRenderTarget",tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget00);
  tolua_function(tolua_S,"RemoveRenderTarget",tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTarget01);
  tolua_function(tolua_S,"RemoveRenderTargets",tolua_GraphicsLuaAPI_RenderPath_RemoveRenderTargets00);
  tolua_function(tolua_S,"SetCommand",tolua_GraphicsLuaAPI_RenderPath_SetCommand00);
  tolua_function(tolua_S,"AddCommand",tolua_GraphicsLuaAPI_RenderPath_AddCommand00);
  tolua_function(tolua_S,"InsertCommand",tolua_GraphicsLuaAPI_RenderPath_InsertCommand00);
  tolua_function(tolua_S,"RemoveCommand",tolua_GraphicsLuaAPI_RenderPath_RemoveCommand00);
  tolua_function(tolua_S,"RemoveCommands",tolua_GraphicsLuaAPI_RenderPath_RemoveCommands00);
  tolua_function(tolua_S,"SetShaderParameter",tolua_GraphicsLuaAPI_RenderPath_SetShaderParameter00);
  tolua_function(tolua_S,"GetNumRenderTargets",tolua_GraphicsLuaAPI_RenderPath_GetNumRenderTargets00);
  tolua_function(tolua_S,"GetNumCommands",tolua_GraphicsLuaAPI_RenderPath_GetNumCommands00);
  tolua_function(tolua_S,"GetCommand",tolua_GraphicsLuaAPI_RenderPath_GetCommand00);
  tolua_function(tolua_S,"GetShaderParameter",tolua_GraphicsLuaAPI_RenderPath_GetShaderParameter00);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"RenderSurface","RenderSurface","",tolua_collect_RenderSurface);
 #else
 tolua_cclass(tolua_S,"RenderSurface","RenderSurface","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"RenderSurface");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_RenderSurface_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_RenderSurface_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_RenderSurface_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_RenderSurface_delete00);
  tolua_function(tolua_S,"SetNumViewports",tolua_GraphicsLuaAPI_RenderSurface_SetNumViewports00);
  tolua_function(tolua_S,"SetViewport",tolua_GraphicsLuaAPI_RenderSurface_SetViewport00);
  tolua_function(tolua_S,"SetUpdateMode",tolua_GraphicsLuaAPI_RenderSurface_SetUpdateMode00);
  tolua_function(tolua_S,"SetLinkedRenderTarget",tolua_GraphicsLuaAPI_RenderSurface_SetLinkedRenderTarget00);
  tolua_function(tolua_S,"SetLinkedDepthStencil",tolua_GraphicsLuaAPI_RenderSurface_SetLinkedDepthStencil00);
  tolua_function(tolua_S,"QueueUpdate",tolua_GraphicsLuaAPI_RenderSurface_QueueUpdate00);
  tolua_function(tolua_S,"Release",tolua_GraphicsLuaAPI_RenderSurface_Release00);
  tolua_function(tolua_S,"GetParentTexture",tolua_GraphicsLuaAPI_RenderSurface_GetParentTexture00);
  tolua_function(tolua_S,"GetWidth",tolua_GraphicsLuaAPI_RenderSurface_GetWidth00);
  tolua_function(tolua_S,"GetHeight",tolua_GraphicsLuaAPI_RenderSurface_GetHeight00);
  tolua_function(tolua_S,"GetUsage",tolua_GraphicsLuaAPI_RenderSurface_GetUsage00);
  tolua_function(tolua_S,"GetNumViewports",tolua_GraphicsLuaAPI_RenderSurface_GetNumViewports00);
  tolua_function(tolua_S,"GetViewport",tolua_GraphicsLuaAPI_RenderSurface_GetViewport00);
  tolua_function(tolua_S,"GetUpdateMode",tolua_GraphicsLuaAPI_RenderSurface_GetUpdateMode00);
  tolua_function(tolua_S,"GetLinkedRenderTarget",tolua_GraphicsLuaAPI_RenderSurface_GetLinkedRenderTarget00);
  tolua_function(tolua_S,"GetLinkedDepthStencil",tolua_GraphicsLuaAPI_RenderSurface_GetLinkedDepthStencil00);
  tolua_function(tolua_S,"IsResolveDirty",tolua_GraphicsLuaAPI_RenderSurface_IsResolveDirty00);
  tolua_variable(tolua_S,"parentTexture",tolua_get_RenderSurface_parentTexture_ptr,NULL);
  tolua_variable(tolua_S,"width",tolua_get_RenderSurface_width,NULL);
  tolua_variable(tolua_S,"height",tolua_get_RenderSurface_height,NULL);
  tolua_variable(tolua_S,"usage",tolua_get_RenderSurface_usage,NULL);
  tolua_variable(tolua_S,"numViewports",tolua_get_RenderSurface_numViewports,tolua_set_RenderSurface_numViewports);
  tolua_variable(tolua_S,"updateMode",tolua_get_RenderSurface_updateMode,tolua_set_RenderSurface_updateMode);
  tolua_variable(tolua_S,"linkedRenderTarget",tolua_get_RenderSurface_linkedRenderTarget_ptr,tolua_set_RenderSurface_linkedRenderTarget_ptr);
  tolua_variable(tolua_S,"linkedDepthStencil",tolua_get_RenderSurface_linkedDepthStencil_ptr,tolua_set_RenderSurface_linkedDepthStencil_ptr);
  tolua_variable(tolua_S,"resolveDirty",tolua_get_RenderSurface_resolveDirty,NULL);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"TT_FACE_CAMERA",TT_FACE_CAMERA);
 tolua_constant(tolua_S,"TT_BONE",TT_BONE);
 tolua_cclass(tolua_S,"RibbonTrail","RibbonTrail","Drawable",NULL);
 tolua_beginmodule(tolua_S,"RibbonTrail");
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_RibbonTrail_SetMaterial00);
  tolua_function(tolua_S,"SetVertexDistance",tolua_GraphicsLuaAPI_RibbonTrail_SetVertexDistance00);
  tolua_function(tolua_S,"SetWidth",tolua_GraphicsLuaAPI_RibbonTrail_SetWidth00);
  tolua_function(tolua_S,"SetStartColor",tolua_GraphicsLuaAPI_RibbonTrail_SetStartColor00);
  tolua_function(tolua_S,"SetEndColor",tolua_GraphicsLuaAPI_RibbonTrail_SetEndColor00);
  tolua_function(tolua_S,"SetStartScale",tolua_GraphicsLuaAPI_RibbonTrail_SetStartScale00);
  tolua_function(tolua_S,"SetEndScale",tolua_GraphicsLuaAPI_RibbonTrail_SetEndScale00);
  tolua_function(tolua_S,"SetTrailType",tolua_GraphicsLuaAPI_RibbonTrail_SetTrailType00);
  tolua_function(tolua_S,"SetBaseVelocity",tolua_GraphicsLuaAPI_RibbonTrail_SetBaseVelocity00);
  tolua_function(tolua_S,"SetSorted",tolua_GraphicsLuaAPI_RibbonTrail_SetSorted00);
  tolua_function(tolua_S,"SetLifetime",tolua_GraphicsLuaAPI_RibbonTrail_SetLifetime00);
  tolua_function(tolua_S,"SetEmitting",tolua_GraphicsLuaAPI_RibbonTrail_SetEmitting00);
  tolua_function(tolua_S,"SetUpdateInvisible",tolua_GraphicsLuaAPI_RibbonTrail_SetUpdateInvisible00);
  tolua_function(tolua_S,"SetTailColumn",tolua_GraphicsLuaAPI_RibbonTrail_SetTailColumn00);
  tolua_function(tolua_S,"SetAnimationLodBias",tolua_GraphicsLuaAPI_RibbonTrail_SetAnimationLodBias00);
  tolua_function(tolua_S,"Commit",tolua_GraphicsLuaAPI_RibbonTrail_Commit00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_RibbonTrail_GetMaterial00);
  tolua_function(tolua_S,"GetVertexDistance",tolua_GraphicsLuaAPI_RibbonTrail_GetVertexDistance00);
  tolua_function(tolua_S,"GetWidth",tolua_GraphicsLuaAPI_RibbonTrail_GetWidth00);
  tolua_function(tolua_S,"GetStartColor",tolua_GraphicsLuaAPI_RibbonTrail_GetStartColor00);
  tolua_function(tolua_S,"GetEndColor",tolua_GraphicsLuaAPI_RibbonTrail_GetEndColor00);
  tolua_function(tolua_S,"GetStartScale",tolua_GraphicsLuaAPI_RibbonTrail_GetStartScale00);
  tolua_function(tolua_S,"GetEndScale",tolua_GraphicsLuaAPI_RibbonTrail_GetEndScale00);
  tolua_function(tolua_S,"GetTrailType",tolua_GraphicsLuaAPI_RibbonTrail_GetTrailType00);
  tolua_function(tolua_S,"GetBaseVelocity",tolua_GraphicsLuaAPI_RibbonTrail_GetBaseVelocity00);
  tolua_function(tolua_S,"IsSorted",tolua_GraphicsLuaAPI_RibbonTrail_IsSorted00);
  tolua_function(tolua_S,"GetLifetime",tolua_GraphicsLuaAPI_RibbonTrail_GetLifetime00);
  tolua_function(tolua_S,"GetTailColumn",tolua_GraphicsLuaAPI_RibbonTrail_GetTailColumn00);
  tolua_function(tolua_S,"IsEmitting",tolua_GraphicsLuaAPI_RibbonTrail_IsEmitting00);
  tolua_function(tolua_S,"GetUpdateInvisible",tolua_GraphicsLuaAPI_RibbonTrail_GetUpdateInvisible00);
  tolua_function(tolua_S,"GetAnimationLodBias",tolua_GraphicsLuaAPI_RibbonTrail_GetAnimationLodBias00);
  tolua_variable(tolua_S,"material",tolua_get_RibbonTrail_material_ptr,tolua_set_RibbonTrail_material_ptr);
  tolua_variable(tolua_S,"vertexDistance",tolua_get_RibbonTrail_vertexDistance,tolua_set_RibbonTrail_vertexDistance);
  tolua_variable(tolua_S,"width",tolua_get_RibbonTrail_width,tolua_set_RibbonTrail_width);
  tolua_variable(tolua_S,"startColor",tolua_get_RibbonTrail_startColor_ref,tolua_set_RibbonTrail_startColor_ref);
  tolua_variable(tolua_S,"endColor",tolua_get_RibbonTrail_endColor_ref,tolua_set_RibbonTrail_endColor_ref);
  tolua_variable(tolua_S,"startScale",tolua_get_RibbonTrail_startScale,tolua_set_RibbonTrail_startScale);
  tolua_variable(tolua_S,"endScale",tolua_get_RibbonTrail_endScale,tolua_set_RibbonTrail_endScale);
  tolua_variable(tolua_S,"trailType",tolua_get_RibbonTrail_trailType,tolua_set_RibbonTrail_trailType);
  tolua_variable(tolua_S,"baseVelocity",tolua_get_RibbonTrail_baseVelocity,tolua_set_RibbonTrail_baseVelocity);
  tolua_variable(tolua_S,"sorted",tolua_get_RibbonTrail_sorted,tolua_set_RibbonTrail_sorted);
  tolua_variable(tolua_S,"lifetime",tolua_get_RibbonTrail_lifetime,tolua_set_RibbonTrail_lifetime);
  tolua_variable(tolua_S,"tailColumn",tolua_get_RibbonTrail_tailColumn,tolua_set_RibbonTrail_tailColumn);
  tolua_variable(tolua_S,"emitting",tolua_get_RibbonTrail_emitting,tolua_set_RibbonTrail_emitting);
  tolua_variable(tolua_S,"updateInvisible",tolua_get_RibbonTrail_updateInvisible,tolua_set_RibbonTrail_updateInvisible);
  tolua_variable(tolua_S,"animationLodBias",tolua_get_RibbonTrail_animationLodBias,tolua_set_RibbonTrail_animationLodBias);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Bone","Bone","",tolua_collect_Bone);
 #else
 tolua_cclass(tolua_S,"Bone","Bone","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Bone");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Bone_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Bone_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Bone_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Bone_delete00);
  tolua_variable(tolua_S,"name",tolua_get_Bone_name,tolua_set_Bone_name);
  tolua_variable(tolua_S,"nameHash",tolua_get_Bone_nameHash,tolua_set_Bone_nameHash);
  tolua_variable(tolua_S,"parentIndex",tolua_get_Bone_parentIndex,tolua_set_Bone_parentIndex);
  tolua_variable(tolua_S,"initialPosition",tolua_get_Bone_initialPosition,tolua_set_Bone_initialPosition);
  tolua_variable(tolua_S,"initialRotation",tolua_get_Bone_initialRotation,tolua_set_Bone_initialRotation);
  tolua_variable(tolua_S,"initialScale",tolua_get_Bone_initialScale,tolua_set_Bone_initialScale);
  tolua_variable(tolua_S,"offsetMatrix",tolua_get_Bone_offsetMatrix,tolua_set_Bone_offsetMatrix);
  tolua_variable(tolua_S,"animated",tolua_get_Bone_animated,tolua_set_Bone_animated);
  tolua_variable(tolua_S,"collisionMask",tolua_get_Bone_unsigned_collisionMask,tolua_set_Bone_unsigned_collisionMask);
  tolua_variable(tolua_S,"radius",tolua_get_Bone_radius,tolua_set_Bone_radius);
  tolua_variable(tolua_S,"boundingBox",tolua_get_Bone_boundingBox,tolua_set_Bone_boundingBox);
  tolua_variable(tolua_S,"node",tolua_get_Bone_node_ptr,tolua_set_Bone_node_ptr);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Skeleton","Skeleton","",NULL);
 tolua_beginmodule(tolua_S,"Skeleton");
  tolua_function(tolua_S,"GetNumBones",tolua_GraphicsLuaAPI_Skeleton_GetNumBones00);
  tolua_function(tolua_S,"GetRootBone",tolua_GraphicsLuaAPI_Skeleton_GetRootBone00);
  tolua_function(tolua_S,"GetBone",tolua_GraphicsLuaAPI_Skeleton_GetBone00);
  tolua_function(tolua_S,"GetBone",tolua_GraphicsLuaAPI_Skeleton_GetBone01);
  tolua_function(tolua_S,"GetBoneIndex",tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex00);
  tolua_function(tolua_S,"GetBoneIndex",tolua_GraphicsLuaAPI_Skeleton_GetBoneIndex01);
  tolua_function(tolua_S,"GetBoneParent",tolua_GraphicsLuaAPI_Skeleton_GetBoneParent00);
  tolua_variable(tolua_S,"numBones",tolua_get_Skeleton_numBones,NULL);
  tolua_variable(tolua_S,"rootBone",tolua_get_Skeleton_rootBone_ptr,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Skybox","Skybox","StaticModel",NULL);
 tolua_beginmodule(tolua_S,"Skybox");
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"StaticModel","StaticModel","Drawable",NULL);
 tolua_beginmodule(tolua_S,"StaticModel");
  tolua_function(tolua_S,"SetModel",tolua_GraphicsLuaAPI_StaticModel_SetModel00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_StaticModel_SetMaterial00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_StaticModel_SetMaterial01);
  tolua_function(tolua_S,"SetOcclusionLodLevel",tolua_GraphicsLuaAPI_StaticModel_SetOcclusionLodLevel00);
  tolua_function(tolua_S,"ApplyMaterialList",tolua_GraphicsLuaAPI_StaticModel_ApplyMaterialList00);
  tolua_function(tolua_S,"GetModel",tolua_GraphicsLuaAPI_StaticModel_GetModel00);
  tolua_function(tolua_S,"GetNumGeometries",tolua_GraphicsLuaAPI_StaticModel_GetNumGeometries00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_StaticModel_GetMaterial00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_StaticModel_GetMaterial01);
  tolua_function(tolua_S,"GetOcclusionLodLevel",tolua_GraphicsLuaAPI_StaticModel_GetOcclusionLodLevel00);
  tolua_function(tolua_S,"IsInside",tolua_GraphicsLuaAPI_StaticModel_IsInside00);
  tolua_function(tolua_S,"IsInsideLocal",tolua_GraphicsLuaAPI_StaticModel_IsInsideLocal00);
  tolua_variable(tolua_S,"model",tolua_get_StaticModel_model_ptr,tolua_set_StaticModel_model_ptr);
  tolua_variable(tolua_S,"material",tolua_get_StaticModel_material_ptr,tolua_set_StaticModel_material_ptr);
  tolua_variable(tolua_S,"boundingBox",tolua_get_StaticModel_boundingBox_ref,NULL);
  tolua_variable(tolua_S,"numGeometries",tolua_get_StaticModel_numGeometries,NULL);
  tolua_variable(tolua_S,"occlusionLodLevel",tolua_get_StaticModel_occlusionLodLevel,tolua_set_StaticModel_occlusionLodLevel);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"StaticModelGroup","StaticModelGroup","StaticModel",NULL);
 tolua_beginmodule(tolua_S,"StaticModelGroup");
  tolua_function(tolua_S,"AddInstanceNode",tolua_GraphicsLuaAPI_StaticModelGroup_AddInstanceNode00);
  tolua_function(tolua_S,"RemoveInstanceNode",tolua_GraphicsLuaAPI_StaticModelGroup_RemoveInstanceNode00);
  tolua_function(tolua_S,"RemoveAllInstanceNodes",tolua_GraphicsLuaAPI_StaticModelGroup_RemoveAllInstanceNodes00);
  tolua_function(tolua_S,"GetNumInstanceNodes",tolua_GraphicsLuaAPI_StaticModelGroup_GetNumInstanceNodes00);
  tolua_function(tolua_S,"GetInstanceNode",tolua_GraphicsLuaAPI_StaticModelGroup_GetInstanceNode00);
  tolua_variable(tolua_S,"numInstanceNodes",tolua_get_StaticModelGroup_numInstanceNodes,NULL);
 tolua_endmodule(tolua_S);
 tolua_constant(tolua_S,"LIGHTING_UNLIT",LIGHTING_UNLIT);
 tolua_constant(tolua_S,"LIGHTING_PERVERTEX",LIGHTING_PERVERTEX);
 tolua_constant(tolua_S,"LIGHTING_PERPIXEL",LIGHTING_PERPIXEL);
 tolua_cclass(tolua_S,"Pass","Pass","RefCounted",NULL);
 tolua_beginmodule(tolua_S,"Pass");
  tolua_function(tolua_S,"SetBlendMode",tolua_GraphicsLuaAPI_Pass_SetBlendMode00);
  tolua_function(tolua_S,"SetCullMode",tolua_GraphicsLuaAPI_Pass_SetCullMode00);
  tolua_function(tolua_S,"SetDepthTestMode",tolua_GraphicsLuaAPI_Pass_SetDepthTestMode00);
  tolua_function(tolua_S,"SetLightingMode",tolua_GraphicsLuaAPI_Pass_SetLightingMode00);
  tolua_function(tolua_S,"SetDepthWrite",tolua_GraphicsLuaAPI_Pass_SetDepthWrite00);
  tolua_function(tolua_S,"SetAlphaToCoverage",tolua_GraphicsLuaAPI_Pass_SetAlphaToCoverage00);
  tolua_function(tolua_S,"SetIsDesktop",tolua_GraphicsLuaAPI_Pass_SetIsDesktop00);
  tolua_function(tolua_S,"SetVertexShader",tolua_GraphicsLuaAPI_Pass_SetVertexShader00);
  tolua_function(tolua_S,"SetPixelShader",tolua_GraphicsLuaAPI_Pass_SetPixelShader00);
  tolua_function(tolua_S,"SetVertexShaderDefines",tolua_GraphicsLuaAPI_Pass_SetVertexShaderDefines00);
  tolua_function(tolua_S,"SetPixelShaderDefines",tolua_GraphicsLuaAPI_Pass_SetPixelShaderDefines00);
  tolua_function(tolua_S,"SetVertexShaderDefineExcludes",tolua_GraphicsLuaAPI_Pass_SetVertexShaderDefineExcludes00);
  tolua_function(tolua_S,"SetPixelShaderDefineExcludes",tolua_GraphicsLuaAPI_Pass_SetPixelShaderDefineExcludes00);
  tolua_function(tolua_S,"ReleaseShaders",tolua_GraphicsLuaAPI_Pass_ReleaseShaders00);
  tolua_function(tolua_S,"GetName",tolua_GraphicsLuaAPI_Pass_GetName00);
  tolua_function(tolua_S,"GetIndex",tolua_GraphicsLuaAPI_Pass_GetIndex00);
  tolua_function(tolua_S,"GetCullMode",tolua_GraphicsLuaAPI_Pass_GetCullMode00);
  tolua_function(tolua_S,"GetBlendMode",tolua_GraphicsLuaAPI_Pass_GetBlendMode00);
  tolua_function(tolua_S,"GetDepthTestMode",tolua_GraphicsLuaAPI_Pass_GetDepthTestMode00);
  tolua_function(tolua_S,"GetLightingMode",tolua_GraphicsLuaAPI_Pass_GetLightingMode00);
  tolua_function(tolua_S,"GetDepthWrite",tolua_GraphicsLuaAPI_Pass_GetDepthWrite00);
  tolua_function(tolua_S,"GetAlphaToCoverage",tolua_GraphicsLuaAPI_Pass_GetAlphaToCoverage00);
  tolua_function(tolua_S,"IsDesktop",tolua_GraphicsLuaAPI_Pass_IsDesktop00);
  tolua_function(tolua_S,"GetVertexShader",tolua_GraphicsLuaAPI_Pass_GetVertexShader00);
  tolua_function(tolua_S,"GetPixelShader",tolua_GraphicsLuaAPI_Pass_GetPixelShader00);
  tolua_function(tolua_S,"GetVertexShaderDefines",tolua_GraphicsLuaAPI_Pass_GetVertexShaderDefines00);
  tolua_function(tolua_S,"GetPixelShaderDefines",tolua_GraphicsLuaAPI_Pass_GetPixelShaderDefines00);
  tolua_function(tolua_S,"GetVertexShaderDefineExcludes",tolua_GraphicsLuaAPI_Pass_GetVertexShaderDefineExcludes00);
  tolua_function(tolua_S,"GetPixelShaderDefineExcludes",tolua_GraphicsLuaAPI_Pass_GetPixelShaderDefineExcludes00);
  tolua_variable(tolua_S,"name",tolua_get_Pass_name,NULL);
  tolua_variable(tolua_S,"index",tolua_get_Pass_index,NULL);
  tolua_variable(tolua_S,"blendMode",tolua_get_Pass_blendMode,tolua_set_Pass_blendMode);
  tolua_variable(tolua_S,"cullMode",tolua_get_Pass_cullMode,tolua_set_Pass_cullMode);
  tolua_variable(tolua_S,"depthTestMode",tolua_get_Pass_depthTestMode,tolua_set_Pass_depthTestMode);
  tolua_variable(tolua_S,"lightingMode",tolua_get_Pass_lightingMode,tolua_set_Pass_lightingMode);
  tolua_variable(tolua_S,"depthWrite",tolua_get_Pass_depthWrite,tolua_set_Pass_depthWrite);
  tolua_variable(tolua_S,"alphaToCoverage",tolua_get_Pass_alphaToCoverage,tolua_set_Pass_alphaToCoverage);
  tolua_variable(tolua_S,"desktop",tolua_get_Pass_desktop,NULL);
  tolua_variable(tolua_S,"vertexShader",tolua_get_Pass_vertexShader,tolua_set_Pass_vertexShader);
  tolua_variable(tolua_S,"pixelShader",tolua_get_Pass_pixelShader,tolua_set_Pass_pixelShader);
  tolua_variable(tolua_S,"vertexShaderDefines",tolua_get_Pass_vertexShaderDefines,tolua_set_Pass_vertexShaderDefines);
  tolua_variable(tolua_S,"pixelShaderDefines",tolua_get_Pass_pixelShaderDefines,tolua_set_Pass_pixelShaderDefines);
  tolua_variable(tolua_S,"vertexShaderDefineExcludes",tolua_get_Pass_vertexShaderDefineExcludes,tolua_set_Pass_vertexShaderDefineExcludes);
  tolua_variable(tolua_S,"pixelShaderDefineExcludes",tolua_get_Pass_pixelShaderDefineExcludes,tolua_set_Pass_pixelShaderDefineExcludes);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Technique","Technique","Resource",NULL);
 tolua_beginmodule(tolua_S,"Technique");
  tolua_function(tolua_S,"SetIsDesktop",tolua_GraphicsLuaAPI_Technique_SetIsDesktop00);
  tolua_function(tolua_S,"CreatePass",tolua_GraphicsLuaAPI_Technique_CreatePass00);
  tolua_function(tolua_S,"RemovePass",tolua_GraphicsLuaAPI_Technique_RemovePass00);
  tolua_function(tolua_S,"ReleaseShaders",tolua_GraphicsLuaAPI_Technique_ReleaseShaders00);
  tolua_function(tolua_S,"Clone",tolua_GraphicsLuaAPI_Technique_Clone00);
  tolua_function(tolua_S,"HasPass",tolua_GraphicsLuaAPI_Technique_HasPass00);
  tolua_function(tolua_S,"GetPass",tolua_GraphicsLuaAPI_Technique_GetPass00);
  tolua_function(tolua_S,"GetSupportedPass",tolua_GraphicsLuaAPI_Technique_GetSupportedPass00);
  tolua_function(tolua_S,"IsSupported",tolua_GraphicsLuaAPI_Technique_IsSupported00);
  tolua_function(tolua_S,"IsDesktop",tolua_GraphicsLuaAPI_Technique_IsDesktop00);
  tolua_function(tolua_S,"GetNumPasses",tolua_GraphicsLuaAPI_Technique_GetNumPasses00);
  tolua_function(tolua_S,"GetPassTypes",tolua_GraphicsLuaAPI_Technique_GetPassTypes00);
  tolua_function(tolua_S,"GetPasses",tolua_GraphicsLuaAPI_Technique_GetPasses00);
  tolua_variable(tolua_S,"supported",tolua_get_Technique_supported,NULL);
  tolua_variable(tolua_S,"desktop",tolua_get_Technique_desktop,NULL);
  tolua_variable(tolua_S,"numPasses",tolua_get_Technique_numPasses,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Terrain","Terrain","Component",NULL);
 tolua_beginmodule(tolua_S,"Terrain");
  tolua_function(tolua_S,"SetPatchSize",tolua_GraphicsLuaAPI_Terrain_SetPatchSize00);
  tolua_function(tolua_S,"SetSpacing",tolua_GraphicsLuaAPI_Terrain_SetSpacing00);
  tolua_function(tolua_S,"SetMaxLodLevels",tolua_GraphicsLuaAPI_Terrain_SetMaxLodLevels00);
  tolua_function(tolua_S,"SetOcclusionLodLevel",tolua_GraphicsLuaAPI_Terrain_SetOcclusionLodLevel00);
  tolua_function(tolua_S,"SetSmoothing",tolua_GraphicsLuaAPI_Terrain_SetSmoothing00);
  tolua_function(tolua_S,"SetHeightMap",tolua_GraphicsLuaAPI_Terrain_SetHeightMap00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_Terrain_SetMaterial00);
  tolua_function(tolua_S,"SetNorthNeighbor",tolua_GraphicsLuaAPI_Terrain_SetNorthNeighbor00);
  tolua_function(tolua_S,"SetSouthNeighbor",tolua_GraphicsLuaAPI_Terrain_SetSouthNeighbor00);
  tolua_function(tolua_S,"SetWestNeighbor",tolua_GraphicsLuaAPI_Terrain_SetWestNeighbor00);
  tolua_function(tolua_S,"SetEastNeighbor",tolua_GraphicsLuaAPI_Terrain_SetEastNeighbor00);
  tolua_function(tolua_S,"SetNeighbors",tolua_GraphicsLuaAPI_Terrain_SetNeighbors00);
  tolua_function(tolua_S,"SetDrawDistance",tolua_GraphicsLuaAPI_Terrain_SetDrawDistance00);
  tolua_function(tolua_S,"SetShadowDistance",tolua_GraphicsLuaAPI_Terrain_SetShadowDistance00);
  tolua_function(tolua_S,"SetLodBias",tolua_GraphicsLuaAPI_Terrain_SetLodBias00);
  tolua_function(tolua_S,"SetViewMask",tolua_GraphicsLuaAPI_Terrain_SetViewMask00);
  tolua_function(tolua_S,"SetLightMask",tolua_GraphicsLuaAPI_Terrain_SetLightMask00);
  tolua_function(tolua_S,"SetShadowMask",tolua_GraphicsLuaAPI_Terrain_SetShadowMask00);
  tolua_function(tolua_S,"SetZoneMask",tolua_GraphicsLuaAPI_Terrain_SetZoneMask00);
  tolua_function(tolua_S,"SetMaxLights",tolua_GraphicsLuaAPI_Terrain_SetMaxLights00);
  tolua_function(tolua_S,"SetCastShadows",tolua_GraphicsLuaAPI_Terrain_SetCastShadows00);
  tolua_function(tolua_S,"SetOccluder",tolua_GraphicsLuaAPI_Terrain_SetOccluder00);
  tolua_function(tolua_S,"SetOccludee",tolua_GraphicsLuaAPI_Terrain_SetOccludee00);
  tolua_function(tolua_S,"ApplyHeightMap",tolua_GraphicsLuaAPI_Terrain_ApplyHeightMap00);
  tolua_function(tolua_S,"GetPatchSize",tolua_GraphicsLuaAPI_Terrain_GetPatchSize00);
  tolua_function(tolua_S,"GetSpacing",tolua_GraphicsLuaAPI_Terrain_GetSpacing00);
  tolua_function(tolua_S,"GetNumVertices",tolua_GraphicsLuaAPI_Terrain_GetNumVertices00);
  tolua_function(tolua_S,"GetNumPatches",tolua_GraphicsLuaAPI_Terrain_GetNumPatches00);
  tolua_function(tolua_S,"GetMaxLodLevels",tolua_GraphicsLuaAPI_Terrain_GetMaxLodLevels00);
  tolua_function(tolua_S,"GetOcclusionLodLevel",tolua_GraphicsLuaAPI_Terrain_GetOcclusionLodLevel00);
  tolua_function(tolua_S,"GetSmoothing",tolua_GraphicsLuaAPI_Terrain_GetSmoothing00);
  tolua_function(tolua_S,"GetHeightMap",tolua_GraphicsLuaAPI_Terrain_GetHeightMap00);
  tolua_function(tolua_S,"GetMaterial",tolua_GraphicsLuaAPI_Terrain_GetMaterial00);
  tolua_function(tolua_S,"GetNorthNeighbor",tolua_GraphicsLuaAPI_Terrain_GetNorthNeighbor00);
  tolua_function(tolua_S,"GetSouthNeighbor",tolua_GraphicsLuaAPI_Terrain_GetSouthNeighbor00);
  tolua_function(tolua_S,"GetWestNeighbor",tolua_GraphicsLuaAPI_Terrain_GetWestNeighbor00);
  tolua_function(tolua_S,"GetEastNeighbor",tolua_GraphicsLuaAPI_Terrain_GetEastNeighbor00);
  tolua_function(tolua_S,"GetPatch",tolua_GraphicsLuaAPI_Terrain_GetPatch00);
  tolua_function(tolua_S,"GetPatch",tolua_GraphicsLuaAPI_Terrain_GetPatch01);
  tolua_function(tolua_S,"GetNeighborPatch",tolua_GraphicsLuaAPI_Terrain_GetNeighborPatch00);
  tolua_function(tolua_S,"GetHeight",tolua_GraphicsLuaAPI_Terrain_GetHeight00);
  tolua_function(tolua_S,"GetNormal",tolua_GraphicsLuaAPI_Terrain_GetNormal00);
  tolua_function(tolua_S,"WorldToHeightMap",tolua_GraphicsLuaAPI_Terrain_WorldToHeightMap00);
  tolua_function(tolua_S,"HeightMapToWorld",tolua_GraphicsLuaAPI_Terrain_HeightMapToWorld00);
  tolua_function(tolua_S,"GetHeightData",tolua_GraphicsLuaAPI_Terrain_GetHeightData00);
  tolua_function(tolua_S,"GetDrawDistance",tolua_GraphicsLuaAPI_Terrain_GetDrawDistance00);
  tolua_function(tolua_S,"GetShadowDistance",tolua_GraphicsLuaAPI_Terrain_GetShadowDistance00);
  tolua_function(tolua_S,"GetLodBias",tolua_GraphicsLuaAPI_Terrain_GetLodBias00);
  tolua_function(tolua_S,"GetViewMask",tolua_GraphicsLuaAPI_Terrain_GetViewMask00);
  tolua_function(tolua_S,"GetLightMask",tolua_GraphicsLuaAPI_Terrain_GetLightMask00);
  tolua_function(tolua_S,"GetShadowMask",tolua_GraphicsLuaAPI_Terrain_GetShadowMask00);
  tolua_function(tolua_S,"GetZoneMask",tolua_GraphicsLuaAPI_Terrain_GetZoneMask00);
  tolua_function(tolua_S,"GetMaxLights",tolua_GraphicsLuaAPI_Terrain_GetMaxLights00);
  tolua_function(tolua_S,"IsVisible",tolua_GraphicsLuaAPI_Terrain_IsVisible00);
  tolua_function(tolua_S,"GetCastShadows",tolua_GraphicsLuaAPI_Terrain_GetCastShadows00);
  tolua_function(tolua_S,"IsOccluder",tolua_GraphicsLuaAPI_Terrain_IsOccluder00);
  tolua_function(tolua_S,"IsOccludee",tolua_GraphicsLuaAPI_Terrain_IsOccludee00);
  tolua_variable(tolua_S,"patchSize",tolua_get_Terrain_patchSize,tolua_set_Terrain_patchSize);
  tolua_variable(tolua_S,"spacing",tolua_get_Terrain_spacing_ref,tolua_set_Terrain_spacing_ref);
  tolua_variable(tolua_S,"numVertices",tolua_get_Terrain_numVertices_ref,NULL);
  tolua_variable(tolua_S,"numPatches",tolua_get_Terrain_numPatches_ref,NULL);
  tolua_variable(tolua_S,"maxLodLevels",tolua_get_Terrain_maxLodLevels,tolua_set_Terrain_maxLodLevels);
  tolua_variable(tolua_S,"occlusionLodLevel",tolua_get_Terrain_occlusionLodLevel,tolua_set_Terrain_occlusionLodLevel);
  tolua_variable(tolua_S,"smoothing",tolua_get_Terrain_smoothing,tolua_set_Terrain_smoothing);
  tolua_variable(tolua_S,"heightMap",tolua_get_Terrain_heightMap_ptr,tolua_set_Terrain_heightMap_ptr);
  tolua_variable(tolua_S,"material",tolua_get_Terrain_material_ptr,tolua_set_Terrain_material_ptr);
  tolua_variable(tolua_S,"northNeighbor",tolua_get_Terrain_northNeighbor_ptr,tolua_set_Terrain_northNeighbor_ptr);
  tolua_variable(tolua_S,"southNeighbor",tolua_get_Terrain_southNeighbor_ptr,tolua_set_Terrain_southNeighbor_ptr);
  tolua_variable(tolua_S,"westNeighbor",tolua_get_Terrain_westNeighbor_ptr,tolua_set_Terrain_westNeighbor_ptr);
  tolua_variable(tolua_S,"eastNeighbor",tolua_get_Terrain_eastNeighbor_ptr,tolua_set_Terrain_eastNeighbor_ptr);
  tolua_variable(tolua_S,"drawDistance",tolua_get_Terrain_drawDistance,tolua_set_Terrain_drawDistance);
  tolua_variable(tolua_S,"shadowDistance",tolua_get_Terrain_shadowDistance,tolua_set_Terrain_shadowDistance);
  tolua_variable(tolua_S,"lodBias",tolua_get_Terrain_lodBias,tolua_set_Terrain_lodBias);
  tolua_variable(tolua_S,"viewMask",tolua_get_Terrain_viewMask,tolua_set_Terrain_viewMask);
  tolua_variable(tolua_S,"lightMask",tolua_get_Terrain_lightMask,tolua_set_Terrain_lightMask);
  tolua_variable(tolua_S,"shadowMask",tolua_get_Terrain_shadowMask,tolua_set_Terrain_shadowMask);
  tolua_variable(tolua_S,"zoneMask",tolua_get_Terrain_zoneMask,tolua_set_Terrain_zoneMask);
  tolua_variable(tolua_S,"maxLights",tolua_get_Terrain_maxLights,tolua_set_Terrain_maxLights);
  tolua_variable(tolua_S,"visible",tolua_get_Terrain_visible,NULL);
  tolua_variable(tolua_S,"castShadows",tolua_get_Terrain_castShadows,tolua_set_Terrain_castShadows);
  tolua_variable(tolua_S,"occluder",tolua_get_Terrain_occluder,tolua_set_Terrain_occluder);
  tolua_variable(tolua_S,"occludee",tolua_get_Terrain_occludee,tolua_set_Terrain_occludee);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"TerrainPatch","TerrainPatch","Drawable",NULL);
 tolua_beginmodule(tolua_S,"TerrainPatch");
  tolua_function(tolua_S,"SetOwner",tolua_GraphicsLuaAPI_TerrainPatch_SetOwner00);
  tolua_function(tolua_S,"SetNeighbors",tolua_GraphicsLuaAPI_TerrainPatch_SetNeighbors00);
  tolua_function(tolua_S,"SetMaterial",tolua_GraphicsLuaAPI_TerrainPatch_SetMaterial00);
  tolua_function(tolua_S,"SetBoundingBox",tolua_GraphicsLuaAPI_TerrainPatch_SetBoundingBox00);
  tolua_function(tolua_S,"SetCoordinates",tolua_GraphicsLuaAPI_TerrainPatch_SetCoordinates00);
  tolua_function(tolua_S,"ResetLod",tolua_GraphicsLuaAPI_TerrainPatch_ResetLod00);
  tolua_function(tolua_S,"GetGeometry",tolua_GraphicsLuaAPI_TerrainPatch_GetGeometry00);
  tolua_function(tolua_S,"GetMaxLodGeometry",tolua_GraphicsLuaAPI_TerrainPatch_GetMaxLodGeometry00);
  tolua_function(tolua_S,"GetOcclusionGeometry",tolua_GraphicsLuaAPI_TerrainPatch_GetOcclusionGeometry00);
  tolua_function(tolua_S,"GetVertexBuffer",tolua_GraphicsLuaAPI_TerrainPatch_GetVertexBuffer00);
  tolua_function(tolua_S,"GetOwner",tolua_GraphicsLuaAPI_TerrainPatch_GetOwner00);
  tolua_function(tolua_S,"GetNorthPatch",tolua_GraphicsLuaAPI_TerrainPatch_GetNorthPatch00);
  tolua_function(tolua_S,"GetSouthPatch",tolua_GraphicsLuaAPI_TerrainPatch_GetSouthPatch00);
  tolua_function(tolua_S,"GetWestPatch",tolua_GraphicsLuaAPI_TerrainPatch_GetWestPatch00);
  tolua_function(tolua_S,"GetEastPatch",tolua_GraphicsLuaAPI_TerrainPatch_GetEastPatch00);
  tolua_function(tolua_S,"GetCoordinates",tolua_GraphicsLuaAPI_TerrainPatch_GetCoordinates00);
  tolua_function(tolua_S,"GetLodLevel",tolua_GraphicsLuaAPI_TerrainPatch_GetLodLevel00);
  tolua_variable(tolua_S,"geometry",tolua_get_TerrainPatch_geometry_ptr,NULL);
  tolua_variable(tolua_S,"maxLodGeometry",tolua_get_TerrainPatch_maxLodGeometry_ptr,NULL);
  tolua_variable(tolua_S,"occlusionGeometry",tolua_get_TerrainPatch_occlusionGeometry_ptr,NULL);
  tolua_variable(tolua_S,"vertexBuffer",tolua_get_TerrainPatch_vertexBuffer_ptr,NULL);
  tolua_variable(tolua_S,"owner",tolua_get_TerrainPatch_owner_ptr,tolua_set_TerrainPatch_owner_ptr);
  tolua_variable(tolua_S,"northPatch",tolua_get_TerrainPatch_northPatch_ptr,NULL);
  tolua_variable(tolua_S,"southPatch",tolua_get_TerrainPatch_southPatch_ptr,NULL);
  tolua_variable(tolua_S,"westPatch",tolua_get_TerrainPatch_westPatch_ptr,NULL);
  tolua_variable(tolua_S,"eastPatch",tolua_get_TerrainPatch_eastPatch_ptr,NULL);
  tolua_variable(tolua_S,"boundingBox",tolua_get_TerrainPatch_boundingBox_ref,tolua_set_TerrainPatch_boundingBox_ref);
  tolua_variable(tolua_S,"coordinates",tolua_get_TerrainPatch_coordinates_ref,tolua_set_TerrainPatch_coordinates_ref);
  tolua_variable(tolua_S,"lodLevel",tolua_get_TerrainPatch_lodLevel,NULL);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Texture","Texture","ResourceWithMetadata",NULL);
 tolua_beginmodule(tolua_S,"Texture");
  tolua_function(tolua_S,"SetNumLevels",tolua_GraphicsLuaAPI_Texture_SetNumLevels00);
  tolua_function(tolua_S,"SetFilterMode",tolua_GraphicsLuaAPI_Texture_SetFilterMode00);
  tolua_function(tolua_S,"SetAddressMode",tolua_GraphicsLuaAPI_Texture_SetAddressMode00);
  tolua_function(tolua_S,"SetAnisotropy",tolua_GraphicsLuaAPI_Texture_SetAnisotropy00);
  tolua_function(tolua_S,"SetBorderColor",tolua_GraphicsLuaAPI_Texture_SetBorderColor00);
  tolua_function(tolua_S,"SetSRGB",tolua_GraphicsLuaAPI_Texture_SetSRGB00);
  tolua_function(tolua_S,"SetBackupTexture",tolua_GraphicsLuaAPI_Texture_SetBackupTexture00);
  tolua_function(tolua_S,"SetMipsToSkip",tolua_GraphicsLuaAPI_Texture_SetMipsToSkip00);
  tolua_function(tolua_S,"GetFormat",tolua_GraphicsLuaAPI_Texture_GetFormat00);
  tolua_function(tolua_S,"IsCompressed",tolua_GraphicsLuaAPI_Texture_IsCompressed00);
  tolua_function(tolua_S,"GetLevels",tolua_GraphicsLuaAPI_Texture_GetLevels00);
  tolua_function(tolua_S,"GetWidth",tolua_GraphicsLuaAPI_Texture_GetWidth00);
  tolua_function(tolua_S,"GetHeight",tolua_GraphicsLuaAPI_Texture_GetHeight00);
  tolua_function(tolua_S,"GetFilterMode",tolua_GraphicsLuaAPI_Texture_GetFilterMode00);
  tolua_function(tolua_S,"GetAddressMode",tolua_GraphicsLuaAPI_Texture_GetAddressMode00);
  tolua_function(tolua_S,"GetAnisotropy",tolua_GraphicsLuaAPI_Texture_GetAnisotropy00);
  tolua_function(tolua_S,"GetBorderColor",tolua_GraphicsLuaAPI_Texture_GetBorderColor00);
  tolua_function(tolua_S,"GetSRGB",tolua_GraphicsLuaAPI_Texture_GetSRGB00);
  tolua_function(tolua_S,"GetMultiSample",tolua_GraphicsLuaAPI_Texture_GetMultiSample00);
  tolua_function(tolua_S,"GetAutoResolve",tolua_GraphicsLuaAPI_Texture_GetAutoResolve00);
  tolua_function(tolua_S,"IsResolveDirty",tolua_GraphicsLuaAPI_Texture_IsResolveDirty00);
  tolua_function(tolua_S,"GetLevelsDirty",tolua_GraphicsLuaAPI_Texture_GetLevelsDirty00);
  tolua_function(tolua_S,"GetBackupTexture",tolua_GraphicsLuaAPI_Texture_GetBackupTexture00);
  tolua_function(tolua_S,"GetMipsToSkip",tolua_GraphicsLuaAPI_Texture_GetMipsToSkip00);
  tolua_function(tolua_S,"GetLevelWidth",tolua_GraphicsLuaAPI_Texture_GetLevelWidth00);
  tolua_function(tolua_S,"GetLevelHeight",tolua_GraphicsLuaAPI_Texture_GetLevelHeight00);
  tolua_function(tolua_S,"GetUsage",tolua_GraphicsLuaAPI_Texture_GetUsage00);
  tolua_function(tolua_S,"GetDataSize",tolua_GraphicsLuaAPI_Texture_GetDataSize00);
  tolua_function(tolua_S,"GetRowDataSize",tolua_GraphicsLuaAPI_Texture_GetRowDataSize00);
  tolua_function(tolua_S,"GetComponents",tolua_GraphicsLuaAPI_Texture_GetComponents00);
  tolua_variable(tolua_S,"format",tolua_get_Texture_format,NULL);
  tolua_variable(tolua_S,"compressed",tolua_get_Texture_compressed,NULL);
  tolua_variable(tolua_S,"levels",tolua_get_Texture_levels,NULL);
  tolua_variable(tolua_S,"width",tolua_get_Texture_width,NULL);
  tolua_variable(tolua_S,"height",tolua_get_Texture_height,NULL);
  tolua_variable(tolua_S,"components",tolua_get_Texture_components,NULL);
  tolua_variable(tolua_S,"filterMode",tolua_get_Texture_filterMode,tolua_set_Texture_filterMode);
  tolua_variable(tolua_S,"anisotropy",tolua_get_Texture_anisotropy,tolua_set_Texture_anisotropy);
  tolua_variable(tolua_S,"borderColor",tolua_get_Texture_borderColor_ref,tolua_set_Texture_borderColor_ref);
  tolua_variable(tolua_S,"sRGB",tolua_get_Texture_sRGB,tolua_set_Texture_sRGB);
  tolua_variable(tolua_S,"multiSample",tolua_get_Texture_multiSample,NULL);
  tolua_variable(tolua_S,"autoResolve",tolua_get_Texture_autoResolve,NULL);
  tolua_variable(tolua_S,"resolveDirty",tolua_get_Texture_resolveDirty,NULL);
  tolua_variable(tolua_S,"levelsDirty",tolua_get_Texture_levelsDirty,NULL);
  tolua_variable(tolua_S,"backupTexture",tolua_get_Texture_backupTexture_ptr,tolua_set_Texture_backupTexture_ptr);
  tolua_variable(tolua_S,"usage",tolua_get_Texture_usage,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Texture2D","Texture2D","Texture",tolua_collect_Texture2D);
 #else
 tolua_cclass(tolua_S,"Texture2D","Texture2D","Texture",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Texture2D");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Texture2D_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Texture2D_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Texture2D_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Texture2D_delete00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_Texture2D_SetSize00);
  tolua_function(tolua_S,"SetData",tolua_GraphicsLuaAPI_Texture2D_SetData00);
  tolua_function(tolua_S,"GetImage",tolua_GraphicsLuaAPI_Texture2D_GetImage00);
  tolua_function(tolua_S,"GetRenderSurface",tolua_GraphicsLuaAPI_Texture2D_GetRenderSurface00);
  tolua_variable(tolua_S,"renderSurface",tolua_get_Texture2D_renderSurface_ptr,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Texture2DArray","Texture2DArray","Texture",tolua_collect_Texture2DArray);
 #else
 tolua_cclass(tolua_S,"Texture2DArray","Texture2DArray","Texture",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Texture2DArray");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Texture2DArray_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Texture2DArray_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Texture2DArray_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Texture2DArray_delete00);
  tolua_function(tolua_S,"SetLayers",tolua_GraphicsLuaAPI_Texture2DArray_SetLayers00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_Texture2DArray_SetSize00);
  tolua_function(tolua_S,"SetData",tolua_GraphicsLuaAPI_Texture2DArray_SetData00);
  tolua_function(tolua_S,"GetLayers",tolua_GraphicsLuaAPI_Texture2DArray_GetLayers00);
  tolua_function(tolua_S,"GetRenderSurface",tolua_GraphicsLuaAPI_Texture2DArray_GetRenderSurface00);
  tolua_variable(tolua_S,"layers",tolua_get_Texture2DArray_layers,tolua_set_Texture2DArray_layers);
  tolua_variable(tolua_S,"renderSurface",tolua_get_Texture2DArray_renderSurface_ptr,NULL);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Texture3D","Texture3D","Texture",tolua_collect_Texture3D);
 #else
 tolua_cclass(tolua_S,"Texture3D","Texture3D","Texture",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Texture3D");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Texture3D_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Texture3D_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Texture3D_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Texture3D_delete00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_Texture3D_SetSize00);
  tolua_function(tolua_S,"SetData",tolua_GraphicsLuaAPI_Texture3D_SetData00);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"TextureCube","TextureCube","Texture",tolua_collect_TextureCube);
 #else
 tolua_cclass(tolua_S,"TextureCube","TextureCube","Texture",NULL);
 #endif
 tolua_beginmodule(tolua_S,"TextureCube");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_TextureCube_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_TextureCube_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_TextureCube_new00_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_TextureCube_delete00);
  tolua_function(tolua_S,"SetSize",tolua_GraphicsLuaAPI_TextureCube_SetSize00);
  tolua_function(tolua_S,"SetData",tolua_GraphicsLuaAPI_TextureCube_SetData00);
  tolua_function(tolua_S,"GetImage",tolua_GraphicsLuaAPI_TextureCube_GetImage00);
  tolua_function(tolua_S,"GetRenderSurface",tolua_GraphicsLuaAPI_TextureCube_GetRenderSurface00);
 tolua_endmodule(tolua_S);
 #ifdef __cplusplus
 tolua_cclass(tolua_S,"Viewport","Viewport","",tolua_collect_Viewport);
 #else
 tolua_cclass(tolua_S,"Viewport","Viewport","",NULL);
 #endif
 tolua_beginmodule(tolua_S,"Viewport");
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Viewport_new00);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Viewport_new00_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Viewport_new00_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Viewport_new01);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Viewport_new01_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Viewport_new01_local);
  tolua_function(tolua_S,"new",tolua_GraphicsLuaAPI_Viewport_new02);
  tolua_function(tolua_S,"new_local",tolua_GraphicsLuaAPI_Viewport_new02_local);
  tolua_function(tolua_S,".call",tolua_GraphicsLuaAPI_Viewport_new02_local);
  tolua_function(tolua_S,"delete",tolua_GraphicsLuaAPI_Viewport_delete00);
  tolua_function(tolua_S,"SetScene",tolua_GraphicsLuaAPI_Viewport_SetScene00);
  tolua_function(tolua_S,"SetCamera",tolua_GraphicsLuaAPI_Viewport_SetCamera00);
  tolua_function(tolua_S,"SetCullCamera",tolua_GraphicsLuaAPI_Viewport_SetCullCamera00);
  tolua_function(tolua_S,"SetRect",tolua_GraphicsLuaAPI_Viewport_SetRect00);
  tolua_function(tolua_S,"SetRenderPath",tolua_GraphicsLuaAPI_Viewport_SetRenderPath00);
  tolua_function(tolua_S,"SetRenderPath",tolua_GraphicsLuaAPI_Viewport_SetRenderPath01);
  tolua_function(tolua_S,"SetDrawDebug",tolua_GraphicsLuaAPI_Viewport_SetDrawDebug00);
  tolua_function(tolua_S,"GetScene",tolua_GraphicsLuaAPI_Viewport_GetScene00);
  tolua_function(tolua_S,"GetCamera",tolua_GraphicsLuaAPI_Viewport_GetCamera00);
  tolua_function(tolua_S,"GetCullCamera",tolua_GraphicsLuaAPI_Viewport_GetCullCamera00);
  tolua_function(tolua_S,"GetRect",tolua_GraphicsLuaAPI_Viewport_GetRect00);
  tolua_function(tolua_S,"GetRenderPath",tolua_GraphicsLuaAPI_Viewport_GetRenderPath00);
  tolua_function(tolua_S,"GetDrawDebug",tolua_GraphicsLuaAPI_Viewport_GetDrawDebug00);
  tolua_function(tolua_S,"GetScreenRay",tolua_GraphicsLuaAPI_Viewport_GetScreenRay00);
  tolua_function(tolua_S,"WorldToScreenPoint",tolua_GraphicsLuaAPI_Viewport_WorldToScreenPoint00);
  tolua_function(tolua_S,"ScreenToWorldPoint",tolua_GraphicsLuaAPI_Viewport_ScreenToWorldPoint00);
  tolua_variable(tolua_S,"scene",tolua_get_Viewport_scene_ptr,tolua_set_Viewport_scene_ptr);
  tolua_variable(tolua_S,"camera",tolua_get_Viewport_camera_ptr,tolua_set_Viewport_camera_ptr);
  tolua_variable(tolua_S,"cullCamera",tolua_get_Viewport_cullCamera_ptr,tolua_set_Viewport_cullCamera_ptr);
  tolua_variable(tolua_S,"rect",tolua_get_Viewport_rect_ref,tolua_set_Viewport_rect_ref);
  tolua_variable(tolua_S,"renderPath",tolua_get_Viewport_renderPath_ptr,tolua_set_Viewport_renderPath_ptr);
  tolua_variable(tolua_S,"drawDebug",tolua_get_Viewport_drawDebug,tolua_set_Viewport_drawDebug);
 tolua_endmodule(tolua_S);
 tolua_cclass(tolua_S,"Zone","Zone","Drawable",NULL);
 tolua_beginmodule(tolua_S,"Zone");
  tolua_function(tolua_S,"SetBoundingBox",tolua_GraphicsLuaAPI_Zone_SetBoundingBox00);
  tolua_function(tolua_S,"SetAmbientColor",tolua_GraphicsLuaAPI_Zone_SetAmbientColor00);
  tolua_function(tolua_S,"SetFogColor",tolua_GraphicsLuaAPI_Zone_SetFogColor00);
  tolua_function(tolua_S,"SetFogStart",tolua_GraphicsLuaAPI_Zone_SetFogStart00);
  tolua_function(tolua_S,"SetFogEnd",tolua_GraphicsLuaAPI_Zone_SetFogEnd00);
  tolua_function(tolua_S,"SetFogHeight",tolua_GraphicsLuaAPI_Zone_SetFogHeight00);
  tolua_function(tolua_S,"SetFogHeightScale",tolua_GraphicsLuaAPI_Zone_SetFogHeightScale00);
  tolua_function(tolua_S,"SetPriority",tolua_GraphicsLuaAPI_Zone_SetPriority00);
  tolua_function(tolua_S,"SetHeightFog",tolua_GraphicsLuaAPI_Zone_SetHeightFog00);
  tolua_function(tolua_S,"SetOverride",tolua_GraphicsLuaAPI_Zone_SetOverride00);
  tolua_function(tolua_S,"SetAmbientGradient",tolua_GraphicsLuaAPI_Zone_SetAmbientGradient00);
  tolua_function(tolua_S,"SetZoneTexture",tolua_GraphicsLuaAPI_Zone_SetZoneTexture00);
  tolua_function(tolua_S,"GetInverseWorldTransform",tolua_GraphicsLuaAPI_Zone_GetInverseWorldTransform00);
  tolua_function(tolua_S,"GetAmbientColor",tolua_GraphicsLuaAPI_Zone_GetAmbientColor00);
  tolua_function(tolua_S,"GetAmbientStartColor",tolua_GraphicsLuaAPI_Zone_GetAmbientStartColor00);
  tolua_function(tolua_S,"GetAmbientEndColor",tolua_GraphicsLuaAPI_Zone_GetAmbientEndColor00);
  tolua_function(tolua_S,"GetFogColor",tolua_GraphicsLuaAPI_Zone_GetFogColor00);
  tolua_function(tolua_S,"GetFogStart",tolua_GraphicsLuaAPI_Zone_GetFogStart00);
  tolua_function(tolua_S,"GetFogEnd",tolua_GraphicsLuaAPI_Zone_GetFogEnd00);
  tolua_function(tolua_S,"GetFogHeight",tolua_GraphicsLuaAPI_Zone_GetFogHeight00);
  tolua_function(tolua_S,"GetFogHeightScale",tolua_GraphicsLuaAPI_Zone_GetFogHeightScale00);
  tolua_function(tolua_S,"GetPriority",tolua_GraphicsLuaAPI_Zone_GetPriority00);
  tolua_function(tolua_S,"GetHeightFog",tolua_GraphicsLuaAPI_Zone_GetHeightFog00);
  tolua_function(tolua_S,"GetOverride",tolua_GraphicsLuaAPI_Zone_GetOverride00);
  tolua_function(tolua_S,"GetAmbientGradient",tolua_GraphicsLuaAPI_Zone_GetAmbientGradient00);
  tolua_function(tolua_S,"GetZoneTexture",tolua_GraphicsLuaAPI_Zone_GetZoneTexture00);
  tolua_function(tolua_S,"IsInside",tolua_GraphicsLuaAPI_Zone_IsInside00);
  tolua_variable(tolua_S,"boundingBox",tolua_get_Zone_boundingBox_ref,tolua_set_Zone_boundingBox_ref);
  tolua_variable(tolua_S,"inverseWorldTransform",tolua_get_Zone_inverseWorldTransform_ref,NULL);
  tolua_variable(tolua_S,"ambientColor",tolua_get_Zone_ambientColor_ref,tolua_set_Zone_ambientColor_ref);
  tolua_variable(tolua_S,"ambientStartColor",tolua_get_Zone_ambientStartColor_ref,NULL);
  tolua_variable(tolua_S,"ambientEndColor",tolua_get_Zone_ambientEndColor_ref,NULL);
  tolua_variable(tolua_S,"fogColor",tolua_get_Zone_fogColor_ref,tolua_set_Zone_fogColor_ref);
  tolua_variable(tolua_S,"fogStart",tolua_get_Zone_fogStart,tolua_set_Zone_fogStart);
  tolua_variable(tolua_S,"fogEnd",tolua_get_Zone_fogEnd,tolua_set_Zone_fogEnd);
  tolua_variable(tolua_S,"fogHeight",tolua_get_Zone_fogHeight,tolua_set_Zone_fogHeight);
  tolua_variable(tolua_S,"fogHeightScale",tolua_get_Zone_fogHeightScale,tolua_set_Zone_fogHeightScale);
  tolua_variable(tolua_S,"priority",tolua_get_Zone_priority,tolua_set_Zone_priority);
  tolua_variable(tolua_S,"heightFog",tolua_get_Zone_heightFog,tolua_set_Zone_heightFog);
  tolua_variable(tolua_S,"override",tolua_get_Zone_override,tolua_set_Zone_override);
  tolua_variable(tolua_S,"ambientGradient",tolua_get_Zone_ambientGradient,tolua_set_Zone_ambientGradient);
  tolua_variable(tolua_S,"zoneTexture",tolua_get_Zone_zoneTexture_ptr,tolua_set_Zone_zoneTexture_ptr);
 tolua_endmodule(tolua_S);
 tolua_endmodule(tolua_S);
 return 1;
}


#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 501
 TOLUA_API int luaopen_GraphicsLuaAPI (lua_State* tolua_S) {
 return tolua_GraphicsLuaAPI_open(tolua_S);
}
#endif

#if __clang__
#pragma clang diagnostic pop
#endif